{"componentChunkName":"component---src-templates-blog-post-js","path":"/funcional/clase-01/","webpackCompilationHash":"64f7c8838b4020e404f1","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"bf36c923-6105-57f4-a223-8e77211135a4","excerpt":"Tarea para la clase que viene: Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este instructivo.\nHacer las lecciones 1, 2, 3 y 4 de Mumuki. En clase…","html":"<h2 id=\"tarea-para-la-clase-que-viene\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<p>Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este <a href=\"https://docs.google.com/document/d/1qGLqYENZ9WYgRRh_Cbn3fczQd0jMSG1nLD_dDd8jWt4/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">instructivo</a>.\nHacer las lecciones 1, 2, 3 y 4 de <a href=\"https://mumuki.io/pdep-utn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mumuki</a>. En clase contestaremos las dudas que te hayan surgido al hacer el contenido.</p>\n<h2 id=\"primero-un-poco-de-burocracia\"><a href=\"#primero-un-poco-de-burocracia\" aria-label=\"primero un poco de burocracia permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primero un poco de burocracia…</h2>\n<p>Dadas las circunstancias actuales debido a la pandemia 👑🦠, esta cursada será, en principio, virtual. Nuestro medio de comunicación será <a href=\"https://discordapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">discord</a></p>\n<p>La materia tiene 3️⃣ parciales.  </p>\n<p>¿Cómo los promociono?\n8 o más en los 3 parciales (con la posibilidad de recuperar 1 si te sacaste menos de 8).\nTPs aprobados.</p>\n<p>¿Cómo simplemente los apruebo?\n6 o más en los 3 parciales (hay 2 recuperatorios por cada parcial).\nTPs aprobados.</p>\n<p>¿Cuándo y cómo van a ser? Todavía no sabemos. ¡Paciencia! 🙏</p>\n<h2 id=\"los-temas-de-hoy\"><a href=\"#los-temas-de-hoy\" aria-label=\"los temas de hoy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Los temas de hoy</h2>\n<p>¿Qué es un paradigma de programación?\nExpresividad y declaratividad\nParadigma funcional</p>\n<h2 id=\"¿qué-es-un-paradigma-de-programación\"><a href=\"#%C2%BFqu%C3%A9-es-un-paradigma-de-programaci%C3%B3n\" aria-label=\"¿qué es un paradigma de programación permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué es un paradigma de programación?</h2>\n<p>Un paradigma es una forma en especial de pensar la solución a un problema, en este caso, un problema de programación 👩‍💻👨‍💻. Para ello, vamos a necesitar herramientas 🔧 y conceptos 📖 que cambiarán de paradigma en paradigma. </p>\n<p>Los que veremos en la cursada serán los paradigmas <strong>funcional</strong>, <strong>lógico</strong> y <strong>de objetos</strong> 😮. ¡Empecemos!</p>\n<h2 id=\"expresividad-y-declaratividad\"><a href=\"#expresividad-y-declaratividad\" aria-label=\"expresividad y declaratividad permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expresividad y declaratividad</h2>\n<p>Dos conceptos muy pero muy importantes que nos van a acompañar tooodoo este año. Son transversales a los 3 paradigmas.</p>\n<p>La <strong>expresividad</strong> viene de la mano de cuán <em>entendible</em> es nuestro código. De cómo nombramos a las variables, funciones, métodos… Tiene que estar escrito de tal forma de que lo entiendas vos, tu colega o alguien que no sepa programación tanto hoy como dentro de unos años. </p>\n<p>La <strong>declaratividad</strong> tiene que ver con ocultar los detalles algorítmicos de nuestro código. Enfocarnos en el <em>qué y no en el cómo</em>.</p>\n<p>Estos dos conceptos son complementarios y vamos a buscar que nuestras soluciones sean lo más declarativas y expresivas que podamos. No existe EL código expresivo y declarativo, sino que existen códigos más declarativos y expresivos que otros. </p>\n<p>¡Veamos unos ejemplos!</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Solución A</span>\n​\n<span class=\"token keyword\">int</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token comment\">// Solución B</span>\n​\n<span class=\"token keyword\">int</span> <span class=\"token function\">cantidadDeNumerosPares</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> unosNumeros<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cantidadDePares <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> indice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> indice<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unosNumeros<span class=\"token punctuation\">[</span>indice<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cantidadDePares<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cantidadDePares<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n​\n<span class=\"token comment\">// Solución C</span>\n​\n<span class=\"token keyword\">int</span> <span class=\"token function\">cantidadDeNumerosPares</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> unosNumeros<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> cantidadDePares <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> indice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> indice<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">esNumeroPar</span><span class=\"token punctuation\">(</span>unosNumeros<span class=\"token punctuation\">[</span>indice<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      cantidadDePares<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> cantidadDePares<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dadas esas soluciones, ¡comparémoslas!</p>\n<p>La solución A es menos expresiva que las otras dos, pero igual de declarativa que la B, aunque menos declarativa que la C.\nLa solución B es más expresiva que la A, e igual que la C, pero menos declarativa que la C, aunque igual de declarativa que la A.\nLa solución C es la más expresiva junto con la B y es la más declarativa.</p>\n<p>No te asustes si no pudiste darte cuenta tan fácilmente qué solución era más expresiva o declarativa que la otra 😨. Es una habilidad que se va adquiriendo con la experiencia, así que ¡a hacer muchos ejercicios! 💪💻</p>\n<h2 id=\"paradigma-funcional\"><a href=\"#paradigma-funcional\" aria-label=\"paradigma funcional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paradigma funcional</h2>\n<p>Es el paradigma con el vamos a arrancar. Y trata sobre… ¡adivinaste! Funciones 😝. Y acá es donde hacemos esa gran pregunta tan temida en Análisis Matemático: ¿qué es una función? 😅 Es la relación entre un dominio e imagen, en donde, para una entrada tenemos una salida (existencia) y esa salida es única (unicidad). Esta misma norma se va a cumplir para las <em>funciones</em> que creemos en <code class=\"language-text\">Haskell</code>, el lenguaje correspondiente a este paradigma.</p>\n<p>⚠️ Antes de seguir, vamos a dejar algo en claro: <strong>nunca pero nunca vamos a usar un <code class=\"language-text\">if</code>para devolver un <code class=\"language-text\">true</code> o un <code class=\"language-text\">false</code>.</strong> Es una muy mala práctica de programación y quien la haga en un parcial tendrá un 2 🦆.\n❌ El código que <strong>no</strong> hay que hacer sería:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">esMayorDeEdad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unaEdad</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unaEdad <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>✔️ Lo correcto sería:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">esMayorDeEdad</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">unaEdad</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> unaEdad <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dicho esto, adentrémonos en Haskell. Estos son los ejemplos de funciones y valores que vimos en clase:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">triple</span> <span class=\"token hvariable\">numero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">numero</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span>\n​\n<span class=\"token hvariable\">esMayorDeEdad</span> <span class=\"token hvariable\">unaEdad</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaEdad</span> <span class=\"token operator\">>=</span> <span class=\"token number\">18</span>\n​\n<span class=\"token hvariable\">frecuenciaCardiacaPromedio</span> <span class=\"token operator\">=</span> <span class=\"token number\">80</span>\n​\n<span class=\"token hvariable\">hacerActividadFisica</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">+</span> <span class=\"token number\">50</span>\n​\n<span class=\"token hvariable\">tieneTaquicardia</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">>=</span> <span class=\"token number\">100</span></code></pre></div>\n<p>De esa forma le pusimos un alias o etiqueta al valor 80 con <code class=\"language-text\">frecuenciaCardiacaPromedio</code> y creamos funciones como <code class=\"language-text\">triple</code>, <code class=\"language-text\">esMayorDeEdad</code>, <code class=\"language-text\">hacerActividadFisica</code> y <code class=\"language-text\">tieneTaquicardia</code>.\nLas funciones van a ser nuestras herramientas para poder operar a los valores.</p>\n<p>Algo muy importante es que en Haskell <strong>no hay efecto</strong>. Esto quiere decir que los valores igualados no van a mutar luego de ser operados por las funciones. Este concepto se llama <strong>inmutabilidad</strong>.</p>\n<p>Por ejemplo, si aplicamos <code class=\"language-text\">hacerActividadFisica</code> a la <code class=\"language-text\">frecuenciaCardiacaPromedio</code>, podemos ver que <code class=\"language-text\">frecuenciaCardiacaPromedio</code> no cambia su valor:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">80</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">hacerActividadFisica</span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">130</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">80</span></code></pre></div>\n<p>Por esto, es que en Haskell logramos tener lo que se llama <strong>transparencia referencial</strong>. 🤯\nEs importante recordar que <code class=\"language-text\">frecuenciaCardiacaPromedio</code> no es una variable, sino que es simplemente un alias, es decir, otra manera de decirle al valor 80.</p>\n<p>Ahora supongamos que queremos ver si tenemos taquicardia después de hacer actividad física. ¿Cómo lo resolvemos? 😱 Usando <strong>composición</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">)</span> <span class=\"token number\">70</span>\n<span class=\"token operator\">=></span> <span class=\"token constant\">True</span></code></pre></div>\n<p>¿Qué lo qué está pasando? 😱 Lo mismo que con la composición de funciones matemáticas ( FoG(x) ) 🤓. Primero se aplica la función de la derecha con el valor y luego se aplica la de la izquierda con el valor que nos devolvió la función anterior.</p>\n<p>Recordemos que, como en matemática, el valor que retorne la función de la derecha, tiene que ser un valor que la función de la izquierda pueda operar. Es decir, que la imágen de la función de la derecha esté incluída en el dominio de la función de la izquierda.</p>\n<p>Si quisiéramos componerlo al revés:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">)</span> <span class=\"token number\">70</span></code></pre></div>\n<p>Va a romper 💥 ya que <code class=\"language-text\">hacerActividadFisica</code> tiene que recibir un número, y está recibiendo un booleano.</p>\n<p>Y ya que estamos, démosle un nombre a la acción de preguntar si se tiene taquicardia luego de hacer una actividad física. Lo haremos creando una nueva función llamada <code class=\"language-text\">tieneTaquicardiaDespuesDeEntrenar</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">tieneTaquicardiaDespuesDeEntrenar</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaFrecuencia</span></code></pre></div>\n<p>Y entonces, lo que nos queda después de componer dos funciones es… ¡una nueva función! 😮</p>\n<p>Que no exista el estado en Haskell, hace que la composición tenga más relevancia.\nYa que como no podemos pisar valores con variables, la composición nos permite encadenar las funciones para trabajar con diferentes valores y así poder crear soluciones más complejas. ✨</p>\n<p>Otro tema que vimos ya al final de la clase, en el canal de discord fue el de <strong>precedencia de operadores</strong>.\nEn matemática, cuando tenemos una expresión como 2 * 3 + 4, solemos operarla dependiendo de la precedencia de cada operador. Como el * es de mayor precedencia que el +, operamos primero 2 * 3 y luego le sumamos 4.</p>\n<p>En Haskell también se respeta esto. Les dejamos una tabla para que puedan ver la precedencia que utiliza Haskell:</p>\n<table>\n<thead>\n<tr>\n<th>Precedencia (Mayor numero, mayor precedencia)</th>\n<th align=\"center\">“Operador”</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td align=\"center\">Aplicacion Normal de una Funcion</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"center\">.</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">^</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">*,/</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">+,-</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">:</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">==, /=, &#x3C;, &#x3C;=, >, >=</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">&#x26;&#x26;</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">||</td>\n</tr>\n<tr>\n<td>1</td>\n<td align=\"center\">$</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"links-útiles\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/concepto-de-funcion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Concepto de función</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/composicion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composición</a></li>\n</ul>","frontmatter":{"title":"Primera clase","date":"06-04-2020","description":"Primera clase de PdeP","tags":["funcional","composición","inmutabilidad","precedencia-de-operadores"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/funcional/clase-01/","previous":null,"next":{"fields":{"slug":"/funcional/clase-02/"},"frontmatter":{"title":"Segunda clase"}}}}}