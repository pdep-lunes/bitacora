{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/funcional/clase-03/","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"21e5706f-f826-5f2e-8d6d-39ef6d774eea","excerpt":"Tarea para la clase que viene: Lecciones 5 y 6 de Mumuki\nResolver hasta el punto del nombreDeLaBiblioteca (incluído) del TP “Hora de lectura”. ¿Qué vimos hoy…","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<p>Lecciones 5 y 6 de <a href=\"https://mumuki.io/pdep-utn/chapters/435-programacion-funcional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mumuki</a>\nResolver hasta el punto del <strong>nombreDeLaBiblioteca</strong> (incluído) del <a href=\"https://docs.google.com/document/d/1YBTaPNfEd4s82UxmsRjYRZXCCA8-lQgFaLOEVbr0fGw/edit?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP “Hora de lectura”</a>.</p>\n<h2 id=\"¿qué-vimos-hoy\" style=\"position:relative;\"><a href=\"#%C2%BFqu%C3%A9-vimos-hoy\" aria-label=\"¿qué vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué vimos hoy?</h2>\n<ul>\n<li>Tuplas: conjunto de elementos de diferentes tipos cuya longitud es fija. Por ejemplo:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bufanda\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- una dupla (tupla de dos elementos) con un string y un número.</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'e'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- una terna (tupla de 3 elementos) compuesta de elementos de diferentes tipos.</span></code></pre></div>\n<p>Vimos algunas funciones que podemos usar con tuplas de dos elementos como <code class=\"language-text\">fst</code> y <code class=\"language-text\">snd</code> que devuelven el primer y el segundo elemento, respectivamente, de una tupla de dos elementos.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Bufanda\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">)</span>\n“<span class=\"token constant\">Bufanda</span>”\n\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Bufanda\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">2500</span></code></pre></div>\n<p>También vimos el uso de <strong>variables anónimas</strong> (los <code class=\"language-text\">_</code>). Las vamos a utilizar cuando necesitemos recibir un parámetro pero que no nos interesa conocer su valor (no nos es útil conocerlo) para la definición de la función.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">precioConDescuentoDeProducto</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">precioConDescuentoDeProducto</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unPrecio</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">descuento</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unPrecio</span> <span class=\"token operator\">-</span> <span class=\"token hvariable\">descuento</span>\n\n<span class=\"token operator\">></span> <span class=\"token hvariable\">precioConDescuentoDeProducto</span> <span class=\"token punctuation\">(</span>“<span class=\"token constant\">Bufanda</span>”<span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">)</span> <span class=\"token number\">500</span>\n<span class=\"token number\">2000</span></code></pre></div>\n<p>Una cuestión muy importante a tener en cuenta es que en funcional existen tres mundos: <strong>el de los valores, el de los tipos y el de los patrones</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">nombreDeLaFuncion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Tipos</span>\n<span class=\"token hvariable\">nombreDeLaFuncion</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Patrones</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Valores</span></code></pre></div>\n<p>Las variables anónimas solo viven en el mundo de los patrones. Por lo tanto, <strong>van del lado izquierdo del igual y nunca deben ir del lado derecho ni en el tipado.</strong> En el mundo de los tipos no puede ir porque tenemos que especificar los tipo es nuestras funciones y valores, aún cuando son variables. En el de los valores tampoco tiene sentido porque es donde especificamos nuestros retornos, no podemos devolver “lo que sea”.</p>\n<ul>\n<li>Listas: conjunto de elementos de un mismo tipo. Por ejemplo:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- listas de números.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"die\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bart\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"die\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista de strings.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token constant\">True</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">True</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista de booleanos.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@skinnerOk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Es una aurora boreal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"@archuN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"puedo verla??\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"@skinnerOk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- listas de tuplas (representan un tweet).</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista vacía.</span></code></pre></div>\n<p>Vimos que hay varias funciones que podemos usar con las listas:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"¿cómo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"estás?\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">></span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">7</span>\n<span class=\"token comment\">-- length: devuelve la cantidad de elementos de la lista.</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">sum</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">10</span>\n<span class=\"token comment\">-- sum: devuelve la suma de todos los elementos de una lista. ¡Sólo funciona con lista de números!</span></code></pre></div>\n<ul>\n<li>Aplicación parcial: aplicar a una función con menos argumentos de los “normales”, para obtener otra que reciba los faltantes. Por ejemplo: </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">max</span> <span class=\"token number\">6</span> <span class=\"token number\">9</span>\n<span class=\"token number\">9</span>\n<span class=\"token comment\">-- max está aplicada totalmente (tiene los dos parámetros) y devuelve 9.</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">max</span> <span class=\"token number\">6</span> \n<span class=\"token operator\">&lt;</span><span class=\"token hvariable\">function</span><span class=\"token operator\">></span>\n<span class=\"token comment\">-- en esta ocasión max está aplicada parcialmente (le falta un parámetro) y devuelve una función.</span></code></pre></div>\n<p>Como vimos en clase, un ejemplo de composición con aplicación parcial podría ser: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">dobleDelSiguiente</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>  <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">dobleDelSiguiente</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unNumero</span>\n\n<span class=\"token operator\">></span> <span class=\"token hvariable\">dobleDelSiguiente</span> <span class=\"token number\">4</span> \n<span class=\"token number\">10</span></code></pre></div>\n<ul>\n<li>Orden superior: Funciones que reciben por parámetro otra función 🤯. ¡El orden superior es buenísimo porque nos permite crear funciones que reciban comportamiento (otras funciones) por parámetro! De esa forma podemos pensar de forma mucho más declarativa. </li>\n</ul>\n<p>Como ejemplos de funciones de orden superior vimos: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- filter: dada una condición (función que devuelve un booleano) y una lista, devuelve otra lista que contenga los elementos que cumplan la condición. Algo interesante de este ejemplo es que estamos usando aplicación parcial en (>4) ya que a la función (>) le estamos pasando un sólo parámetro (el 4) y está esperando que le llegue el que le falta (que está en la lista).</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">map</span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"murcielago\"</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- map: dada una función y una lista, devuelve otra lista que contenga a los elementos como resultado de aplicarles la función.</span></code></pre></div>\n<p>Otras más que ya vimos, son la composición (<code class=\"language-text\">.</code>) o la aplicación (<code class=\"language-text\">$</code>).</p>\n<p>¡Y hasta acá llegamos por hoy! La clase que viene seguimos. 👋</p>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/aplicacion-parcial.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aplicación parcial</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/orden-superior.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orden superior</a>\n-<a href=\"https://drive.google.com/file/d/1f72a6efSuhUyH5KX-xXYlEXY_M4C6Zz7/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de esta clase en 2021</a></li>\n</ul>","frontmatter":{"title":"Tercera clase","date":"11-04-2022","description":"Tercera clase de PdeP","tags":["funcional","aplicacion-parcial","orden-superior","tuplas","listas"]}}},"pageContext":{"slug":"/2022/funcional/clase-03/","previous":{"fields":{"slug":"/2022/funcional/clase-02/"},"frontmatter":{"title":"Segunda clase","date":"04-04-2022"}},"next":{"fields":{"slug":"/2022/funcional/clase-04/"},"frontmatter":{"title":"Cuarta clase","date":"18-04-2022"}}}},"staticQueryHashes":["452372368","63159454"]}