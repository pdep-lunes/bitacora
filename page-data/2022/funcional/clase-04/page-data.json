{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/funcional/clase-04/","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"9ba3715e-f22b-59fe-b2e5-e562018c8c5c","excerpt":"Resolvimos el ejercicio Hora de lectura. Pero… ¿Por dónde empezamos? 😅 Si vamos a trabajar con libros, empecemos por ahí. ¡A modelarlos! 🎨 ⚠️ Disclaimer: Es…","html":"<p>Resolvimos el ejercicio <a href=\"https://docs.google.com/document/d/1YBTaPNfEd4s82UxmsRjYRZXCCA8-lQgFaLOEVbr0fGw/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Hora de lectura</a>. Pero… ¿Por dónde empezamos? 😅 Si vamos a trabajar con libros, empecemos por ahí. ¡A modelarlos! 🎨</p>\n<p>⚠️ Disclaimer: Es muy importante leer todo el enunciado antes de ponerse a codear. En este caso, vamos a ir a nuestro ritmo sólo por fines pedagógicos. ⚠️</p>\n<p>Tenemos que crear cada libro, para eso, vamos a crear… ¿variables? ¡No! 😠 En funcional <strong>no existen las variables</strong> porque las cosas no varían. Recordá: <strong>en Haskell no hay estado</strong>. Es por eso que vamos a crear <strong>etiquetas</strong> 🏷️ representando a cada libro. ¿Y cómo los vamos a representar? 💭 Bueno, sabemos que cada libro tiene un título, un autor y una cantidad de páginas, entonces podríamos crear a <em>“El visitante”</em> y a <em>“Shingeki no Kyojin capítulo 1”</em> de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y así seguimos con los demás títulos. Peeeero, antes de avanzar, ¿no hay algo que te llame la atención? 🤔 Pongámonos a filosofar: ¿qué es <code class=\"language-text\">elVisitante</code>? ¿qué es <code class=\"language-text\">shingekiNoKyojin1</code>? ¡Son libros 📚! Entonces, ¿no estaría bueno poder llamarlos como corresponde?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por suerte, esto no va a quedar en un deseo. Lo vamos a poder hacer realidad con el <strong>type alias</strong> (en criollo: un apodo o un alias). Gracias a esta herramienta vamos a lograr que nuestro código sea más expresivo 😌. Entonces, para hacer esto posible deberemos agregar a nuestra solución un type alias:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>¡Y podemos seguir mejorando la expresividad de nuestro código! Si sabemos que nuestro libro es una terna compuesta por el título, autor y la cantidad de páginas… Mirá 👀:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Titulo</span> <span class=\"token operator\">=</span> <span class=\"token constant\">String</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">=</span> <span class=\"token constant\">String</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">CantidadDePaginas</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Int</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Titulo</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CantidadDePaginas</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y una vez que hayamos modelado todos los libros, ¡es hora de armar la biblioteca! Para eso vamos a usar vari… ¡Noooo! 😡 Crearemos una etiqueta. ¿Y cómo va a ser la biblioteca? Bueno, una lista con los libros que modelamos. ¿Y su tipo? ¿Una lista de <code class=\"language-text\">(String, String, Int)</code>? ¿O una lista de <code class=\"language-text\">Libro</code>s? 💭 Si bien dijimos que <code class=\"language-text\">(String, String, Int)</code> y <code class=\"language-text\">Libro</code> eran lo mismo, para darle un sentido semántico a nuestra solución, vamos a elegir como tipo de la biblioteca a lista de <code class=\"language-text\">Libro</code>s:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Sabemos lo que estás pensando… también nos gustaría tomar un helado 🍦. ¿Eh? ¿Eso no era lo que pensabas? 😳 No bueno, sí, también creemos que sería una buena idea crear un type alias para la biblioteca 😅:   </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Hagamos un recreíto de tanto código 🥴. Te vamos a contar un secreto 🤫: ¿viste el <code class=\"language-text\">String</code>? Bueno, ¡también es un apodo! ¿Te imaginás cuál es su verdadero nombre? 🙈 Es <code class=\"language-text\">type String = [Char]</code>. Así es, un <code class=\"language-text\">String</code> no es nada más ni nada menos que una lista de caracteres, una lista de <code class=\"language-text\">Char</code>. ¿Eso significa que a partir de ahora vamos a llamarle <code class=\"language-text\">[Char]</code>? ¡Nooo! El <code class=\"language-text\">String</code> va a seguir llamándose <code class=\"language-text\">String</code>, por algo alguien decidió crear ese type alias. ¿No nos crees? Mirá este ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token string\">\"¡Hola!\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token char string\">'¡'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'!'</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">True</span></code></pre></div>\n<p>El string <code class=\"language-text\">¡Hola!</code> es lo mismo que la lista de caracteres <code class=\"language-text\">[&#39;¡&#39;, &#39;H&#39;, &#39;o&#39;, &#39;l&#39;, &#39;a&#39;, &#39;!&#39;]</code>. Porque como dijimos, <code class=\"language-text\">String</code> es un type alias de <code class=\"language-text\">[Char]</code>. ¡Sigamos con el TP! 🌈</p>\n<p>Ya modelamos los libros y la biblioteca. Es hora de definir las funciones que nos piden 👩‍💻👨‍💻. La primera es <code class=\"language-text\">promedioDePaginas</code>. ¿Por dónde la encaramos 😵? <strong>Nuestro consejo es empezar por el tipo de la función</strong>. De esa forma, vamos a tener en mente qué parámetros toma y qué devuelve para luego definirla. 😊\n¿Cuántos parámetros toma <code class=\"language-text\">promedioDePaginas</code>? Uno solo, la biblioteca. Entonces, vamos a empezar poniendo una sola flechita (<strong>recordá que el tipo de una función tiene la misma cantidad de flechitas que de parámetros</strong>):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token operator\">...</span>   </code></pre></div>\n<p>A veces, es muy claro qué devuelve una función, por lo que podemos empezar completando ese espacio del tipo de la misma. En este caso, como vamos a hacer un promedio, vamos a obtener como resultado un número entero:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></code></pre></div>\n<p>¿Y de qué tipo es el parámetro que toma? Dijimos que era una biblioteca y el tipo de la biblioteca es <code class=\"language-text\">Biblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></code></pre></div>\n<p>¡Wooohooo 🎉! Tenemos el tipo de nuestra función. Ahora, definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">div</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token hvariable\">unaBiblioteca</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">length</span> <span class=\"token hvariable\">unaBiblioteca</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token operator\"> . </span><span class=\"token builtin\">map</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaBiblioteca</span>\n \n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unasPaginas</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unasPaginas</span></code></pre></div>\n<p>Algo muy importante que hicimos en esta solución fue <strong>delegar</strong>. Es decir, dividimos nuestro gran problema en partecitas más pequeñas para poder resolverlo más fácilmente. De esta forma obtenemos un código más <strong>declarativo</strong>. Peeero, tampoco debemos irnos al extremo de sobredelegar: haber creado la función <code class=\"language-text\">cantidadDeLibrosDeLaBiblioteca</code> (que recibe una biblioteca y nos devuelve su longitud) es lo mismo que hacer directamente <code class=\"language-text\">length biblioteca</code>. La razón por la que no está bueno sobredelegar es que no estamos creando funciones que hagan nuevas cosas, sino que sólo estamos renombrando funciones que ya existen y conocemos.</p>\n<p>Enfoquémonos en <code class=\"language-text\">cantidadDePaginas</code> 🔍. Es una función que dada una tupla, nos devuelve un elemento en específico de la misma. Esto es lo que llamamos un <strong>accessor</strong>.\nEn este caso, ya que teníamos una terna, tuvimos que hacer nuestra propia definición del accessor. Para las duplas ya tenemos definidas <code class=\"language-text\">fst</code> y <code class=\"language-text\">snd</code> que devuelven el primer y el segundo elemento, respectivamente, de una tupla de dos elementos.</p>\n<p>El uso del accessor es posible gracias a <strong>pattern matching</strong>, que es el concepto asociado al chequeo estructural de un dato respecto de una estructura esperada. Gracias a esto podemos tener un código más declarativo y simple. Sin embargo, su desventaja es que depende de los cambios de estructuras. Imaginémonos que nosotros agregamos un cuarto elemento a la tupla que representa al Libro. Esto haría que no fuera posible utilizar nuestro accessor inicial, ya que estructuralmente la tupla cambió.  </p>\n<p>Ahora toca el turno de definir <code class=\"language-text\">esLecturaObligatoria</code>. De vuelta vamos a descomponerla en funciones para que sea más fácil construirla. 💡 Un consejo que solemos dar es definir la función de tal forma que cuando la leamos, quede igual que el enunciado. Y la única forma de hacer esto posible es delegando:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Saga</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Saga</span>\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Autor</span>\n<span class=\"token hvariable\">autor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unAutor</span>\n\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">sagaDeEragon</span>\n\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span></code></pre></div>\n<p>Fijate que la función <code class=\"language-text\">esLecturaObligatoria</code> quedó igual que el enunciado; el mismo dice: <em>”Es una lectura obligatoria cuando es de Stephen King o de la saga de Eragon o es el ejemplar de Fundación de 230 páginas de Isaac Asimov”</em>. A esto nos referimos con delegar y que se pueda leer como una oración del TP. 😁</p>\n<p>Hagamos una observación 🔍: cuando creamos la <code class=\"language-text\">sagaDeEragon</code>, le pusimos como tipo <code class=\"language-text\">Saga</code>, donde saga es <code class=\"language-text\">[Libro]</code>. ¡Lo mismo que la biblioteca! ¿Y por qué no reutilizamos el tipo <code class=\"language-text\">Biblioteca</code> si también es <code class=\"language-text\">[Libro]</code> 🤨? Porque si bien <em>sintácticamente</em> son lo mismo, <em>semánticamente</em> no lo son. Es decir, si bien las dos son del tipo <code class=\"language-text\">[Libro]</code>, una biblioteca no es lo mismo que una saga (y si no nos crees, buscalas en el diccionario 😜). Haciendo esta diferencia ganamos expresividad.</p>\n<p>Veamos otra versión de <code class=\"language-text\">esLecturaObligatoria</code> con <strong>pattern matching</strong> (y nuestra versión preferida porque usa una herramienta del paradigma funcional y además, es más declarativa): </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Isaac Asimov\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>⚠️ Hay que tener mucho cuidado con el orden cuando utilizamos pattern matching. Los casos deben ir de lo más particular a lo más general. ⚠️\nEn este caso <code class=\"language-text\">(_, &quot;Stephen King&quot;, _)</code> y <code class=\"language-text\">(_, &quot;Isaac Asimov&quot;, 230)</code> matchean con duplas que tengan ese formato, mientras que <code class=\"language-text\">unLibro</code> matchea con cualquier tupla (por eso va después) y por último va la variable anónima (<code class=\"language-text\">_</code>) que matchea con cualquier cosa. Así vamos de los casos más específicos a los generales.</p>\n<p>Y así como tenemos una solución preferida, tenemos una que no nos gusta para nada 🤬:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span> \n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eragon</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eldest</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">brisignr</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">legado</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n\t<span class=\"token operator\">|</span><span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>Usar <strong>guardas</strong> de esta forma es un 2 (2️⃣) automático en el parcial, un desaprobado. Es un <strong>mal uso de booleanos</strong> y una <strong>muy muy mala práctica</strong> de programación. Dicho esto, quien avisa no traiciona… 👀</p>\n<p>¡Sigamos! Es el turno de <code class=\"language-text\">esFantasiosa</code>. Comencemos con su tipo, así que como recibe un parámetro, ponemos una flechita:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span></code></pre></div>\n<p>Sabemos que devuelve un booleano, por lo tanto:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Y sabemos que toma una biblioteca:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Tadáaa 🎉, tenemos el tipo de nuestra función. Ahora definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Mmmm, un momento ✋. Algo está oliendo mal 🤢… ¡a repetición de lógica! 🤮 Mirá estas tres funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Son prácticamente iguales 😱. En todas se <strong>repite la lógica</strong> de obtener el autor de un libro para fijarnos si es un autor en especial 😵. Para solucionar esto, vamos a crear una función que tenga sólo la lógica repetida, parametrizando lo único que cambia (que en este caso son los nombres de los autores):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDe</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Nuestra solución ahora quedaría así:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Hagamos una observación 🔍 a estas soluciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esFantasiosa</span>' <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span>' <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">||</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Las funciones <code class=\"language-text\">esFantasiosa</code> y <code class=\"language-text\">esFantasiosa&#39;</code> hacen exactamente lo mismo. Es lo mismo hacer <code class=\"language-text\">any (condicion1 || condicion2) lista</code> que <code class=\"language-text\">any condicion1 lista || any condicion2 lista</code>. Siempre vamos a preferir la primera solución ya que es más declarativa.\nLo mismo ocurre también con <code class=\"language-text\">map</code> y <code class=\"language-text\">filter</code>: </p>\n<ul>\n<li><code class=\"language-text\">(map funcion1.map funcion2) lista</code> es lo mismo que <code class=\"language-text\">map (funcion1.funcion2) lista</code></li>\n<li><code class=\"language-text\">(filter condicion1.filter condicion2) lista</code> es lo mismo que <code class=\"language-text\">filter (condicion1 &amp;&amp; condicion2) lista</code></li>\n</ul>\n<p>Sigamos con <code class=\"language-text\">nombreDeLaBiblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">titulo</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unTitulo</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unTitulo</span>\n\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">sinVocales</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token hvariable\">unString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">not</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">esVocal</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unString</span>\n\n<span class=\"token hvariable\">esVocal</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Char</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esVocal</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token string\">\"aeiouAEIOUÁÉÍÓÚ\"</span>\n\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">concatMap</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Recordá que como un <code class=\"language-text\">String</code> es una <code class=\"language-text\">[Char]</code> es lo mismo “aeiouAEIOUÁÉÍÓÚ” que [‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’ , ‘U’, ‘Á’, ‘É’, ‘Í’, ‘Ó’ , ‘Ú’] y es una forma mucho más fácil de escribirlo 😅. Si te quedó la duda de por qué repetimos las vocales en minúscula, mayúscula y con tildes, es para que matchee de las dos formas. 😄</p>\n<p>¡Llegamos a la última función! La que nos dice si una biblioteca es ligera:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">all</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">cantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Y de esa forma completamos el TP usando las herramientas que aprendiste hasta ahora. 👏</p>\n<h3 id=\"guardas\" style=\"position:relative;\"><a href=\"#guardas\" aria-label=\"guardas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guardas</h3>\n<p>Ahora queremos saber de qué género es un libro. Eso va a depender de:</p>\n<ul>\n<li>Si tiene menos de 40 páginas, es un cómic. 💬</li>\n<li>Si el autor es Stephen King, es de terror. 🤡</li>\n<li>Si el autor es japonés, es un manga. 🗾</li>\n<li>En cualquier otro caso, no sabemos el género. 🤷‍♀️🤷‍♂️</li>\n</ul>\n<p>Aprendimos cómo ver si un libro tiene cierta cantidad de páginas o si es de un autor en especial pero… ¿cómo averiguamos la nacionalidad de un autor? 😅 ¿Deberíamos agregar la nacionalidad del autor en cada libro? ¡Momento ✋! Sólo interesa saber quiénes son de Japón y, como en nuestra solución, el único autor japonés es <em>“Hajime Isayama”</em>, no tendría sentido agregar más información a cada libro. La forma más fácil de resolverlo es con una función:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">autoresJaponenes</span>\n\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">String</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- Si se llegaran a agregar otros autores japoneses, esta solución es más extensible.</span></code></pre></div>\n<p>¡Ya tenemos lo necesario para definir la función <code class=\"language-text\">genero</code>! </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">genero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">genero</span> <span class=\"token hvariable\">unLibro</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Terror\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esJapones</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Manga\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Comic\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Indeterminado\"</span></code></pre></div>\n<p>Recordá no olvidarte el <code class=\"language-text\">otherwise</code> cuando utilices guardas ya que es donde entra todo lo que no abarcan las guardas de encima de él. Y, ¿por qué pasa eso? 🤔 Resulta que <code class=\"language-text\">otherwise</code> es un sinónimo de <code class=\"language-text\">True</code>, por lo que siempre se va a poder entrar por esa condición cuando no se no cumplan ninguna de las demás. Utilizamos <code class=\"language-text\">otherwise</code> porque es más expresivo.</p>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"https://drive.google.com/file/d/103Xo3_a1lmnJXl8K3WlCZdgzo6ayQwi-/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase</a></li>\n<li><a href=\"https://docs.google.com/document/d/1YBTaPNfEd4s82UxmsRjYRZXCCA8-lQgFaLOEVbr0fGw/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Enunciado que hicimos en clase</a></li>\n<li><a href=\"https://github.com/pdep-lunes/pdep-clases-2022/blob/master/Funcional/Clase04/src/Lib.hs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Código del TP</a></li>\n</ul>","frontmatter":{"title":"Cuarta clase","date":"18-04-2022","description":"Cuarta clase de PdeP","tags":["funcional","guardas","práctica"]}}},"pageContext":{"slug":"/2022/funcional/clase-04/","previous":{"fields":{"slug":"/2022/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase","date":"11-04-2022"}},"next":null}},"staticQueryHashes":["452372368","63159454"]}