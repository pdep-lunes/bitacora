{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/funcional/clase-06/","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"6bed4de4-0e98-521a-b2a2-9f54e98e4fa4","excerpt":"Tarea para la clase que viene: Corregir la primera entrega del TP integrador. Comenzar la segunda entrega del TP integrador Ya pueden realizar todas las…","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Corregir la primera entrega del TP integrador.</li>\n<li>Comenzar la segunda entrega del <a href=\"https://docs.google.com/document/d/11q_pAjZo_TKzNASjzk4sNpueAV9N2Aa-LtJPQyDOaio/edit?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP integrador</a></li>\n<li>Ya pueden realizar todas las lecciones del <a href=\"https://mumuki.io/pdep-utn/chapters/435-programacion-funcional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primer capítulo de Mumuki</a></li>\n<li>Pueden comenzar a realizar <a href=\"https://www.pdep.com.ar/material/parciales\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parciales</a> para practicar. </li>\n</ul>\n<h2 id=\"¿qué-vimos-hoy\" style=\"position:relative;\"><a href=\"#%C2%BFqu%C3%A9-vimos-hoy\" aria-label=\"¿qué vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué vimos hoy?</h2>\n<p>Comenzamos con la corrección sincrónica de la primera entrega del TP de Funcional.\nListas infinitas\nLazy evaluation</p>\n<h2 id=\"listas-infinitas\" style=\"position:relative;\"><a href=\"#listas-infinitas\" aria-label=\"listas infinitas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listas infinitas</h2>\n<p>Ya vimos que en Haskell podemos modelar una biblioteca 📚 con las listas, por ejemplo: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y también podemos modelar una lista del 1 al 5:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">unoAlCinco</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Pero si quisiéramos hacer una lista del 1 al 1000… ¡¿deberíamos escribir mil veces los números?! 😱 Por suerte, nuestro gran amigo Haskell puede ayudarnos gracias a las <em>listas por rangos</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">unoAlMil</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>También podemos definir una lista de los números pares entre 1 y 100 de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">paresAlCien</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y no solo sirve para números 🔢, sino también para letras 🔡: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">abecedario</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char string\">'a'</span><span class=\"token operator\">..</span><span class=\"token char string\">'z'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y así como podemos definir listas con límites o con rangos, también podemos tener… 🥁 ¡<strong>listas infinitas</strong>!</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">infinita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>(¿Lo probaste en la consola y te olvidaste qué hacer para que pare? 😰 Apretá <strong>ctrl + c</strong>. 😉)</p>\n<h2 id=\"lazy-evaluation\" style=\"position:relative;\"><a href=\"#lazy-evaluation\" aria-label=\"lazy evaluation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy evaluation</h2>\n<p>Sabemos aplicar la función ´head´ a una lista:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"como\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"estás?\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"hola\"</span></code></pre></div>\n<p>Pero, ¿qué pasará con una lista infinita? 😮 </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>Por si quedan dudas de qué es lo que acaba de pasar, Haskell no esperó a que terminara la lista sino que tomó directamente lo que necesitaba. Eso es porque su forma de trabajo es la <strong>evaluación perezosa</strong> o <strong>lazy evaluation</strong>. Esto no pasa con todos los lenguajes. Otros (que seguramente ya utilizaste) usan la <strong>evaluación ansiosa</strong> o <strong>eager evaluation</strong> en donde, por ejemplo, esperarían a que la lista termine de cargar (infinitamente nunca 😵) para devolver el primer elemento.\nSipi, Haskell es lo más. 😍</p>\n<p>Ahora, ¿cómo funciona lazy evaluation?\nEste tipo de evaluación se basa en una <em>estrategia</em> que se llama <strong>call-by-name</strong>… ¿eeehhh? 😨\nSimplemente es operar primero las funciones que están “por fuera”, antes que las funciones de sus parámetros. Es decir, las funciones se aplican antes de que se evalúen los parámetros. 😎\nSi volvemos al ejemplo anterior:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- aplicará primero head, antes que evaluar la lista infinita</span>\n<span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>Pero también hay funciones en las cuales necesitamos evaluar primero los parámetros, antes que la función en sí:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> \n\n<span class=\"token comment\">-- (*) necesita que sus parámetros sean números para poder evaluar, entonces se evalúa primero (2+3).</span>\n\n<span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">></span> <span class=\"token number\">25</span></code></pre></div>\n<p>Evaluar primero los parámetros para luego pasarle el valor final a las funciones, lo llamamos <strong>call-by-value</strong>. Y es la estrategia en la que se basa la eager evaluation. Veamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- ... y así hasta el infinito de los tiempos ⏳. ¡No termina!</span></code></pre></div>\n<p>Vimos los siguientes casos teniendo en cuenta estas preguntas:</p>\n<ul>\n<li>¿terminarán de evaluar con lazy evaluation? </li>\n<li>¿y con eager evaluation? </li>\n<li>¿qué nos devuelve? 🤔</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">take</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Sí termina con lazy. No terminaría con eager. Devuelve [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]</span>\n\n<span class=\"token builtin\">last</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">sum</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token operator\">..</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Termina con ambas y devuelve 165.</span>\n\n<span class=\"token builtin\">any</span> <span class=\"token builtin\">even</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Termina con lazy pero no con eager. Devuelve True.</span>\n\n<span class=\"token builtin\">all</span> <span class=\"token builtin\">even</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina</span>\n\n<span class=\"token builtin\">all</span> <span class=\"token builtin\">odd</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Devuelve False</span>\n\n<span class=\"token builtin\">head</span><span class=\"token operator\"> . </span><span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Termina con lazy pero no con eager. Devuelve 1.</span>\n\n<span class=\"token builtin\">head</span><span class=\"token operator\"> . </span><span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina pero devuelve [2, 4, 6…]</span>\n\n<span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Devuelve \"Hola\". No terminaría de evaluarse con eager.</span>\n\n<span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Devuelve 3. Con eager rompería porque no se puede dividir por 0.</span>\n\n<span class=\"token builtin\">fst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Devuelve \"Hola\". Con eager porque no se puede hacer head de la lista infinita.</span>\n\n<span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Rompe porque las listas deben ser homogéneas.</span></code></pre></div>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"https://drive.google.com/file/d/13w-4VeQc4Eq8vfWrjccqOU3t4UO-7TbT/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Listas infinitas</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lazy evaluation</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Estrategias de evaluación</a></li>\n</ul>","frontmatter":{"title":"Sexta clase","date":"10-05-2021","description":"Sexta clase de PdeP","tags":["funcional","listas infinitas","lazy evaluation"]}}},"pageContext":{"slug":"/2021/funcional/clase-06/","previous":{"fields":{"slug":"/2021/funcional/clase-05/"},"frontmatter":{"title":"Quinta clase","date":"03-05-2021"}},"next":{"fields":{"slug":"/2021/funcional/clase-07/"},"frontmatter":{"title":"Séptima clase","date":"Invalid date"}}}},"staticQueryHashes":["452372368","63159454"]}