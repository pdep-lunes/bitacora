{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/funcional/clase-01/","result":{"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"fbdf1bc2-3e2c-5168-927b-0b638b59c1d3","excerpt":"Tarea para la clase que viene: Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este instructivo. Hacer las lecciones 1 y 2 de Mumuki. Primero un poco de…","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este <a href=\"https://docs.google.com/document/d/15GPmaCmp7ET9KFzSwZRYfm5JFxleos3kMO98d7pQJCk/edit?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">instructivo</a>.</li>\n<li>Hacer las lecciones 1 y 2 de <a href=\"https://mumuki.io/pdep-utn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mumuki</a>.</li>\n</ul>\n<h2 id=\"primero-un-poco-de-burocracia\" style=\"position:relative;\"><a href=\"#primero-un-poco-de-burocracia\" aria-label=\"primero un poco de burocracia permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primero un poco de burocracia…</h2>\n<p>Dadas las circunstancias actuales debido a la pandemia 👑🦠, esta cursada será virtual. Nuestro medio de comunicación será <a href=\"https://discordapp.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">discord</a></p>\n<p>La materia tiene 3️⃣ parciales.  </p>\n<p>¿Cómo los promociono?\n8 o más en los 3 parciales (con la posibilidad de recuperar 1 si te sacaste menos de 8).\nTPs aprobados.</p>\n<p>¿Cómo simplemente los apruebo?\n6 o más en los 3 parciales (hay 2 recuperatorios por cada parcial).\nTPs aprobados.</p>\n<p>¿Cuándo y cómo van a ser? Todavía no sabemos. ¡Paciencia! 🙏</p>\n<h2 id=\"los-temas-de-hoy\" style=\"position:relative;\"><a href=\"#los-temas-de-hoy\" aria-label=\"los temas de hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Los temas de hoy</h2>\n<p>¿Qué es un paradigma de programación?\nExpresividad y declaratividad\nParadigma funcional</p>\n<h2 id=\"¿qué-es-un-paradigma-de-programación\" style=\"position:relative;\"><a href=\"#%C2%BFqu%C3%A9-es-un-paradigma-de-programaci%C3%B3n\" aria-label=\"¿qué es un paradigma de programación permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué es un paradigma de programación?</h2>\n<p>Un paradigma es una forma en especial de pensar la solución a un problema, en este caso, un problema de programación 👩‍💻👨‍💻. Para ello, vamos a necesitar herramientas 🔧 y conceptos 📖 que cambiarán de paradigma en paradigma. </p>\n<p>Los que veremos en la cursada serán los paradigmas <strong>funcional</strong>, <strong>lógico</strong> y <strong>de objetos</strong> 😮. ¡Empecemos!</p>\n<h2 id=\"expresividad-y-declaratividad\" style=\"position:relative;\"><a href=\"#expresividad-y-declaratividad\" aria-label=\"expresividad y declaratividad permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expresividad y declaratividad</h2>\n<p>Dos conceptos muy pero muy importantes que nos van a acompañar tooodoo este año. Son transversales a los 3 paradigmas.</p>\n<p>La <strong>expresividad</strong> viene de la mano de cuán <em>entendible</em> es nuestro código. De cómo nombramos a las variables, funciones, métodos… Tiene que estar escrito de tal forma de que lo entiendas vos, tu colega o alguien que no sepa programación tanto hoy como dentro de unos años. </p>\n<p>La <strong>declaratividad</strong> tiene que ver con ocultar los detalles algorítmicos de nuestro código. Enfocarnos en el <em>qué y no en el cómo</em>.</p>\n<p>Estos dos conceptos son complementarios y vamos a buscar que nuestras soluciones sean lo más declarativas y expresivas que podamos. No existe EL código expresivo y declarativo, sino que existen códigos más declarativos y expresivos que otros. </p>\n<p>¡Veamos unos ejemplos!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-- Solución A\n​\nint d(int c[]) {\n  int a = 0;\n  for (int b = 0; c[b] != NULL; b++) {\n    if (c[b] % 2 == 0) {\n      a++;\n    }\n  }\n  return a;\n}\n​\n-- Solución B\n​\nint cantidadDeNumerosPares(int* unosNumeros) {\n  int cantidadDePares = 0;\n  for (int indice = 0;  != NULL; indice++) {\n    if (unosNumeros[indice] % 2 == 0) {\n      cantidadDePares++;\n    }\n  }\n  return cantidadDePares;\n}\n​\n-- Solución C\n​\nint cantidadDeNumerosPares(int* unosNumeros) {\n  int cantidadDePares = 0;\n  for (int indice = 0;  != NULL; indice++) {\n    if (esNumeroPar(unosNumeros[indice])) {\n      cantidadDePares++;\n    }\n  }\n  return cantidadDePares;\n}</code></pre></div>\n<p>Dadas esas soluciones, ¡comparémoslas!</p>\n<p>La solución A es menos expresiva que las otras dos, pero igual de declarativa que la B, aunque menos declarativa que la C.\nLa solución B es más expresiva que la A, e igual que la C, pero menos declarativa que la C, aunque igual de declarativa que la A.\nLa solución C es la más expresiva junto con la B y es la más declarativa.</p>\n<p>Sin embargo, todas estas soluciones tienen algo en común: están escritas en el mismo lenguaje de programación. Hay otros lenguajes que facilitan que nuestras soluciones sean más declarativas. Por ejemplo, este mismo problema se podría solucionar utilizando el lenguaje Haskell, haciendo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cantidadDeNumerosPares numeros = (length.filter even) numeros</code></pre></div>\n<p>No te asustes si no pudiste darte cuenta tan fácilmente qué solución era más expresiva o declarativa que la otra 😨. Es una habilidad que se va adquiriendo con la experiencia, así que ¡a hacer muchos ejercicios! 💪💻</p>\n<h2 id=\"paradigma-funcional\" style=\"position:relative;\"><a href=\"#paradigma-funcional\" aria-label=\"paradigma funcional permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Paradigma funcional</h2>\n<p>Es el paradigma con el vamos a arrancar. Y trata sobre… ¡adivinaste! Funciones 😝. Y acá es donde hacemos esa gran pregunta tan temida en Análisis Matemático: ¿qué es una función? 😅 Es la relación entre un dominio e imagen, en donde, para una entrada tenemos una salida (existencia) y esa salida es única (unicidad). Esta misma norma se va a cumplir para las <em>funciones</em> que creemos en <code class=\"language-text\">Haskell</code>, el lenguaje correspondiente a este paradigma.</p>\n<p>Dicho esto, adentrémonos en Haskell. Estos son los ejemplos de funciones que vimos en clase con sus respectivos tipos:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">doble</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">doble</span> <span class=\"token hvariable\">numero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">numero</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n\n<span class=\"token hvariable\">suma</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token hvariable\">otroNumero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">otroNumero</span></code></pre></div>\n<p>Es importante tener en cuenta que el tipo de una función NO es el tipo de su retorno, sino que está compuesto por el tipo de sus valores de entrada y el de salida. Recordemos como regla mnemotécnica que la cantidad de flechas del tipo es igual a la cantidad de parámetros que tiene la función.</p>\n<p>Ahora supongamos que queremos ver si queremos saber el doble del doble de un número. ¿Cómo lo resolvemos? 😱 Usando <strong>composición</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">doble</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">doble</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">8</span></code></pre></div>\n<p>¿Qué lo qué está pasando? 😱 Lo mismo que con la composición de funciones matemáticas ( FoG(x) ) 🤓. Primero se aplica la función de la derecha con el valor y luego se aplica la de la izquierda con el valor que nos devolvió la función anterior.</p>\n<p>Recordemos que, como en matemática, el valor que retorne la función de la derecha, tiene que ser un valor que la función de la izquierda pueda operar. Es decir, que la imagen de la función de la derecha esté incluida en el dominio de la función de la izquierda.</p>\n<p>Y ya que estamos, démosle un nombre al cálculo del doble del doble. Lo haremos creando una nueva función llamada… ¡<code class=\"language-text\">dobleDelDoble</code>!</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">dobleDelDoble</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">doble</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">doble</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unNumero</span></code></pre></div>\n<p>Y entonces, lo que nos queda después de componer dos funciones es… ¡una nueva función! 😮</p>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/concepto-de-funcion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Concepto de función</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/composicion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Composición</a></li>\n<li><a href=\"https://drive.google.com/file/d/1gcybc5zNBqQ7vu6Ku7NGeUWhlLGwnbqf/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase</a></li>\n</ul>","frontmatter":{"title":"Primera clase","date":"05-04-2021","description":"Primera clase de PdeP","tags":["funcional","composición"]}}},"pageContext":{"slug":"/2021/funcional/clase-01/","previous":{"fields":{"slug":"/2020/objetos/clase-17/"},"frontmatter":{"title":"Decimoseptima clase","date":"19-10-2020"}},"next":{"fields":{"slug":"/2021/funcional/clase-02/"},"frontmatter":{"title":"Segunda clase","date":"12-04-2021"}}}},"staticQueryHashes":["452372368","63159454"]}