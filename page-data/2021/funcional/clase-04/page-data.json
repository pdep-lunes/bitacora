{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/funcional/clase-04/","result":{"data":{"site":{"siteMetadata":{"title":"Bit√°cora","author":"pdep"}},"markdownRemark":{"id":"f0b7b369-5171-5c58-8ceb-db334e4ec390","excerpt":"Tarea para la clase que viene: Comenzar a resolver la primera entrega del TP integrador Pueden hacer hasta la lecci√≥n 11 del cap√≠tulo 1 de Mumuki. ¬øQu√© vimos‚Ä¶","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Comenzar a resolver la primera entrega del <a href=\"https://docs.google.com/document/d/1WRU-T71IJ4aGgUrwiw_OqBPXDT9V9v-uwuBLGX7inzU/edit?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP integrador</a></li>\n<li>Pueden hacer hasta la lecci√≥n 11 del <a href=\"https://mumuki.io/pdep-utn/chapters/435-programacion-funcional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">cap√≠tulo 1 de Mumuki</a>.</li>\n</ul>\n<h2 id=\"¬øqu√©-vimos-hoy\" style=\"position:relative;\"><a href=\"#%C2%BFqu%C3%A9-vimos-hoy\" aria-label=\"¬øqu√© vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬øQu√© vimos hoy?</h2>\n<p>Volvimos al TP de la clase pasada [‚ÄúHora de lectura‚Äù](<a href=\"https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit</a> para seguir trabajando con √©l y agregando nuevos ejercicios. üôå </p>\n<p>Ahora toca el turno de definir <code class=\"language-text\">esLecturaObligatoria</code>. De vuelta vamos a descomponerla en funciones para que sea m√°s f√°cil construirla. üí° Un consejo que solemos dar es definir la funci√≥n de tal forma que cuando la leamos, quede igual que el enunciado. Y la √∫nica forma de hacer esto posible es delegando:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Saga</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Saga</span>\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Autor</span>\n<span class=\"token hvariable\">autor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unAutor</span>\n\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">sagaDeEragon</span>\n\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span></code></pre></div>\n<p>Fijate que la funci√≥n <code class=\"language-text\">esLecturaObligatoria</code> qued√≥ igual que el enunciado; el mismo dice: <em>‚ÄùEs una lectura obligatoria cuando es de Stephen King o de la saga de Eragon o es el ejemplar de Fundaci√≥n de 230 p√°ginas de Isaac Asimov‚Äù</em>. A esto nos referimos con delegar y que se pueda leer como una oraci√≥n del TP. üòÅ</p>\n<p>Hagamos una observaci√≥n üîç: cuando creamos la <code class=\"language-text\">sagaDeEragon</code>, le pusimos como tipo <code class=\"language-text\">Saga</code>, donde saga es <code class=\"language-text\">[Libro]</code>. ¬°Lo mismo que la biblioteca! ¬øY por qu√© no reutilizamos el tipo <code class=\"language-text\">Biblioteca</code> si tambi√©n es <code class=\"language-text\">[Libro]</code> ü§®? Porque si bien <em>sint√°cticamente</em> son lo mismo, <em>sem√°nticamente</em> no lo son. Es decir, si bien las dos son del tipo <code class=\"language-text\">[Libro]</code>, una biblioteca no es lo mismo que una saga (y si no nos crees, buscalas en el diccionario üòú). Haciendo esta diferencia ganamos expresividad.</p>\n<p>Veamos otra versi√≥n de <code class=\"language-text\">esLecturaObligatoria</code> con <strong>pattern matching</strong> (y nuestra versi√≥n preferida porque usa una herramienta del paradigma funcional y adem√°s, es m√°s declarativa): </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Isaac Asimov\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span>' <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>‚ö†Ô∏è Hay que tener mucho cuidado con el orden cuando utilizamos pattern matching. Los casos deben ir de lo m√°s particular a lo m√°s general. ‚ö†Ô∏è\nEn este caso <code class=\"language-text\">(_, &quot;Stephen King&quot;, _)</code> y <code class=\"language-text\">(_, &quot;Isaac Asimov&quot;, 230)</code> matchean con duplas que tengan ese formato, mientras que <code class=\"language-text\">unLibro</code> matchea con cualquier tupla (por eso va despu√©s) y por √∫ltimo va la variable an√≥nima (<code class=\"language-text\">_</code>) que matchea con cualquier cosa. As√≠ vamos de los casos m√°s espec√≠ficos a los generales.</p>\n<p>Y as√≠ como tenemos una soluci√≥n preferida, tenemos una que no nos gusta para nada ü§¨:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span> \n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eragon</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eldest</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">brisignr</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">legado</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n\t<span class=\"token operator\">|</span><span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>Usar <strong>guardas</strong> de esta forma es un 2 (2Ô∏è‚É£) autom√°tico en el parcial, un desaprobado. Es un <strong>mal uso de booleanos</strong> y una <strong>muy muy mala pr√°ctica</strong> de programaci√≥n. Dicho esto, quien avisa no traiciona‚Ä¶ üëÄ</p>\n<p>¬°Sigamos! Es el turno de <code class=\"language-text\">esFantasiosa</code>. Comencemos con su tipo, as√≠ que como recibe un par√°metro, ponemos una flechita:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span></code></pre></div>\n<p>Sabemos que devuelve un booleano, por lo tanto:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Y sabemos que toma una biblioteca:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Tad√°aa üéâ, tenemos el tipo de nuestra funci√≥n. Ahora defin√°mosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Mmmm, un momento ‚úã. Algo est√° oliendo mal ü§¢‚Ä¶ ¬°a repetici√≥n de l√≥gica! ü§Æ Mir√° estas tres funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Son pr√°cticamente iguales üò±. En todas se <strong>repite la l√≥gica</strong> de obtener el autor de un libro para fijarnos si es un autor en especial üòµ. Para solucionar esto, vamos a crear una funci√≥n que tenga s√≥lo la l√≥gica repetida, parametrizando lo √∫nico que cambia (que en este caso son los nombres de los autores):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDe</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Nuestra soluci√≥n ahora quedar√≠a as√≠:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Hagamos una observaci√≥n üîç a estas soluciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esFantasiosa</span>' <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span>' <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">||</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Las funciones <code class=\"language-text\">esFantasiosa</code> y <code class=\"language-text\">esFantasiosa&#39;</code> hacen exactamente lo mismo. Es lo mismo hacer <code class=\"language-text\">any (condicion1 || condicion2) lista</code> que <code class=\"language-text\">any condicion1 lista || any condicion2 lista</code>. Siempre vamos a preferir la primera soluci√≥n ya que es m√°s declarativa.\nLo mismo ocurre tambi√©n con <code class=\"language-text\">map</code> y <code class=\"language-text\">filter</code>: </p>\n<ul>\n<li><code class=\"language-text\">(map funcion1.map funcion2) lista</code> es lo mismo que <code class=\"language-text\">map (funcion1.funcion2) lista</code></li>\n<li><code class=\"language-text\">(filter condicion1.filter condicion2) lista</code> es lo mismo que <code class=\"language-text\">filter (condicion1 &amp;&amp; condicion2) lista</code></li>\n</ul>\n<p>Sigamos con <code class=\"language-text\">nombreDeLaBiblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">titulo</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unTitulo</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unTitulo</span>\n\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">sinVocales</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token hvariable\">unString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">not</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">esVocal</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unString</span>\n\n<span class=\"token hvariable\">esVocal</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Char</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esVocal</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token string\">\"aeiouAEIOU√Å√â√ç√ì√ö\"</span>\n\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">concatMap</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Record√° que como un <code class=\"language-text\">String</code> es una <code class=\"language-text\">[Char]</code> es lo mismo ‚ÄúaeiouAEIOU√Å√â√ç√ì√ö‚Äù que [‚Äòa‚Äô, ‚Äòe‚Äô, ‚Äòi‚Äô, ‚Äòo‚Äô, ‚Äòu‚Äô, ‚ÄòA‚Äô, ‚ÄòE‚Äô, ‚ÄòI‚Äô, ‚ÄòO‚Äô , ‚ÄòU‚Äô, ‚Äò√Å‚Äô, ‚Äò√â‚Äô, ‚Äò√ç‚Äô, ‚Äò√ì‚Äô , ‚Äò√ö‚Äô] y es una forma mucho m√°s f√°cil de escribirlo üòÖ. Si te qued√≥ la duda de por qu√© repetimos las vocales en min√∫scula, may√∫scula y con tildes, es para que matchee de las dos formas. üòÑ</p>\n<p>¬°Llegamos a la √∫ltima funci√≥n! La que nos dice si una biblioteca es ligera:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">all</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">cantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Y de esa forma completamos el TP usando las herramientas que aprendiste hasta ahora. üëè</p>\n<h3 id=\"guardas\" style=\"position:relative;\"><a href=\"#guardas\" aria-label=\"guardas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guardas</h3>\n<p>Ahora queremos saber de qu√© g√©nero es un libro. Eso va a depender de:</p>\n<ul>\n<li>Si tiene menos de 40 p√°ginas, es un c√≥mic. üí¨</li>\n<li>Si el autor es Stephen King, es de terror. ü§°</li>\n<li>Si el autor es japon√©s, es un manga. üóæ</li>\n<li>En cualquier otro caso, no sabemos el g√©nero. ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÇÔ∏è</li>\n</ul>\n<p>Aprendimos c√≥mo ver si un libro tiene cierta cantidad de p√°ginas o si es de un autor en especial pero‚Ä¶ ¬øc√≥mo averiguamos la nacionalidad de un autor? üòÖ ¬øDeber√≠amos agregar la nacionalidad del autor en cada libro? ¬°Momento ‚úã! S√≥lo interesa saber qui√©nes son de Jap√≥n y, como en nuestra soluci√≥n, el √∫nico autor japon√©s es <em>‚ÄúHajime Isayama‚Äù</em>, no tendr√≠a sentido agregar m√°s informaci√≥n a cada libro. La forma m√°s f√°cil de resolverlo es con una funci√≥n:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">autoresJaponenes</span>\n\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">String</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- Si se llegaran a agregar otros autores japoneses, esta soluci√≥n es m√°s extensible.</span></code></pre></div>\n<p>¬°Ya tenemos lo necesario para definir la funci√≥n <code class=\"language-text\">genero</code>! </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">genero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">genero</span> <span class=\"token hvariable\">unLibro</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Terror\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esJapones</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Manga\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Comic\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Indeterminado\"</span></code></pre></div>\n<p>Record√° no olvidarte el <code class=\"language-text\">otherwise</code> cuando utilices guardas ya que es donde entra todo lo que no abarcan las guardas de encima de √©l. Y, ¬øpor qu√© pasa eso? ü§î Resulta que <code class=\"language-text\">otherwise</code> es un sin√≥nimo de <code class=\"language-text\">True</code>, por lo que siempre se va a poder entrar por esa condici√≥n cuando no se no cumplan ninguna de las dem√°s. Utilizamos <code class=\"language-text\">otherwise</code> porque es m√°s expresivo.</p>\n<p>¬øCu√°ndo usar guardas y cuando pattern matching? üò©\nUsamos pattern matching cuando tenemos algo que encaja con un patr√≥n, por ejemplo una tupla de 3 elementos, una lista vac√≠a, etc. üß©\nUsamos guardas cuando queremos evaluar conjuntos de dominios (en matem√°tica, esto es muy similar a las funciones partidas). üîÄ</p>\n<h3 id=\"data\" style=\"position:relative;\"><a href=\"#data\" aria-label=\"data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data</h3>\n<p>¬°Excelente! Ya tenemos funcionando la funci√≥n <code class=\"language-text\">genero</code> üéâ. ¬øQu√© pasa si le mandamos como argumento una tupla que representa a una persona? No deber√≠a funcionar porque explicitamos en su tipo que recib√≠a un <code class=\"language-text\">Libro</code>‚Ä¶ Veamos qu√© pasa con la tupla que representa a nuestro querido profe Gus: üëÄ</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">genero</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Gustavo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Trucco\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"Comic\"</span></code></pre></div>\n<p>¬ø¬°Entonces el profe es un c√≥mic!? üò± Ya quisiera, pero no lo es. Lo que pas√≥ es que si bien dijimos que <code class=\"language-text\">genero</code> funciona s√≥lo con <code class=\"language-text\">Libro</code>s, un <code class=\"language-text\">Libro</code> es una tupla de tipo <code class=\"language-text\">(String, String, Int)</code>, ¬°el mismo tipo que la tupla que representa a una persona! üòÖ\nRecord√° que al usar el type alias, <strong>no estamos creando un nuevo tipo de dato</strong>, sino que le estamos dando un nombre a una estructura que tiene sentido para nuestra soluci√≥n y as√≠ ganar expresividad.</p>\n<p>Entonces, ¬øc√≥mo lo solucionamos? ü§® Creando nuestro propio tipo de dato con <strong>Data</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Autor</span> <span class=\"token constant\">Int</span></code></pre></div>\n<p>En donde <code class=\"language-text\">UnLibro</code> es una funci√≥n que llamamos <strong>constructor</strong> y su tipo es <code class=\"language-text\">UnLibro :: String -&gt; Autor -&gt; Int -&gt; Libro</code>. Es decir, es una funci√≥n que recibe los par√°metros necesarios para crear un libro. </p>\n<p>Modelemos a ‚ÄúEl visitante‚Äù:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">UnLibro</span> <span class=\"token string\">\"El visitante\"</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token number\">592</span></code></pre></div>\n<p>Si quisi√©ramos probarlo en la consola, nos tirar√≠a un error porque el data que construimos no es ‚Äúmostrable‚Äù üò©. Es decir, Haskell no sabe c√≥mo mostrar nuestro tipo de dato, pero lo solucionamos escribiendo <code class=\"language-text\">deriving Show</code> al final de la declaraci√≥n del data: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Autor</span> <span class=\"token constant\">Int</span> <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span></code></pre></div>\n<p>Y entonces, ¬øqu√© ventajas tenemos al usar data? Porque pareciera ser lo mismo que usar tuplas con el type alias üôÑ. La diferencia est√° en que, con el data, estamos creando nuestro propio tipo de dato y, gracias a eso, vamos a poder restringir a las funciones a que s√≥lo funcionen con el tipo de dato que le decimos. Ahora, <code class=\"language-text\">genero</code> s√≥lo va a recibir <code class=\"language-text\">Libro</code>s, de otra forma, romper√°. üí•</p>\n<p>Otra ventaja es que podemos utilizar data con <strong>record syntax</strong> y, de esta forma, nos genera autom√°ticamente los accessors:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span></code></pre></div>\n<p>En este caso tanto <code class=\"language-text\">libro</code> como <code class=\"language-text\">autor</code> y <code class=\"language-text\">cantidadDePaginas</code> son funciones (accessors) que van a acceder a cada elemento del data üôå. ¬øC√≥mo nos damos cuenta? Porque estamos explicitando el tipo de cada una al momento de crear el tipo de dato.</p>\n<p>En conclusi√≥n, ambas sintaxis para definir datas son equivalentes, solo que record syntax nos regala las funciones para acceder a las propiedades. üéÅ</p>\n<p>Es importante tener en cuenta, que al utilizar Data estamos creando un tipo (<code class=\"language-text\">Libro</code>), una funci√≥n constructora (<code class=\"language-text\">UnLibro</code>) y un patr√≥n (<code class=\"language-text\">UnLibro unTitulo unAutor cantidadDePaginas</code>).</p>\n<p>Por otro lado, si queremos comparar una instancia de data con otra, tenemos que decirle a Haskell que queremos que sean comparables. ¬øC√≥mo hacemos eso? Agregando <code class=\"language-text\">Eq</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Eq</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora vamos a modelar la funci√≥n <code class=\"language-text\">agregarPaginas</code>. ¬øEsta funci√≥n va a modificar al libro original? ¬°No! Los data, al igual que todo en el paradigma funcional, siguen siendo inmutables. Por ende, la funci√≥n nos devolver√° una copia del libro con la cantidad de p√°ginas aumentada.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">agregarPaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">agregarPaginas</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UnLibro</span> <span class=\"token hvariable\">unTitulo</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unaCantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">paginasAAgregar</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token hvariable\">unTitulo</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unaCantidadDePaginas</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">paginasAAgregar</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos hacer lo mismo con record syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">agregarPaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">agregarPaginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">paginasAAgregar</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">+</span>  <span class=\"token hvariable\">paginasAAgregar</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es importante destacar que para devolver la nueva cantidad de p√°ginas debemos sumar la cantidad de p√°ginas original. Para eso, utilizamos el accessor <code class=\"language-text\">cantidadDePaginas</code> y es importante pasarle por par√°metro <code class=\"language-text\">unLibro</code> para que pueda darnos el valor. No olvidar que <code class=\"language-text\">cantidadDePaginas</code> sigue siendo una funci√≥n que necesita su par√°metro.</p>\n<p>En caso de que queramos crear un libro editando mas de un valor, podemos hacer lo mismo que antes, separando cada valor con una <code class=\"language-text\">,</code>. Veamos un ejemplo: sacarSecuela, la cual no solo le agrega 50 p√°ginas a un libro sino que le agrega un 2 al nombre.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">sacarSecuela</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">sacarSecuela</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">libro</span> <span class=\"token operator\">++</span> ‚Äò<span class=\"token number\">2</span>‚Äô<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">+</span>  <span class=\"token number\">50</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"links-√∫tiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links √∫tiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links √ötiles</h2>\n<ul>\n<li><a href=\"https://drive.google.com/file/d/1qsd33clhXqg5PRjZt_v_txKxQpNDsTp4/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/data--definiendo-nuestros-tipos-en-haskell.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data</a></li>\n</ul>","frontmatter":{"title":"Cuarta clase","date":"26-04-2021","description":"Cuarta clase de PdeP","tags":["funcional","guardas","data"]}}},"pageContext":{"slug":"/2021/funcional/clase-04/","previous":{"fields":{"slug":"/2021/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase","date":"19-04-2021"}},"next":{"fields":{"slug":"/2021/funcional/clase-05/"},"frontmatter":{"title":"Quinta clase","date":"03-05-2021"}}}},"staticQueryHashes":["452372368","63159454"]}