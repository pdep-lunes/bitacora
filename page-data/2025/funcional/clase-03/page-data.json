{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2025/funcional/clase-03/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"91325b9c-fcd9-55f4-b6e1-9f77fd169f27","excerpt":"Tarea para la clase que viene: Resolver el TP “Hora de lectura”. Importante: si bien en esta bitácora está la resolución paso a paso y el código de la misma…","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<p>Resolver el <a href=\"https://docs.google.com/document/d/1h0JQAyYL5ePak_9HS5ROgNv4afz6OE5hLXeajFG5l7o/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP “Hora de lectura”</a>. <strong>Importante</strong>: si bien en esta bitácora está la resolución paso a paso y el código de la misma, sugerimos que intenten resolver por su cuenta el ejercicio antes de ver la solución (¡y preguntarnos lo que no se entienda!).</p>\n<h2 id=\"qué-vimos-hoy\" style=\"position:relative;\"><a href=\"#qu%C3%A9-vimos-hoy\" aria-label=\"qué vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué vimos hoy?</h2>\n<p>Los nuevos temas fueron:</p>\n<ul>\n<li>Aplicación parcial: aplicar a una función con menos argumentos de los “normales”, para obtener otra que espere los faltantes. Por ejemplo: </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">max</span> <span class=\"token number\">6</span> <span class=\"token number\">9</span>\n<span class=\"token number\">9</span>\n<span class=\"token comment\">-- max está aplicada totalmente (tiene los dos parámetros) y devuelve 9.</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">max</span> <span class=\"token number\">6</span> \n<span class=\"token operator\">&lt;</span><span class=\"token hvariable\">function</span><span class=\"token operator\">></span>\n<span class=\"token comment\">-- en esta ocasión max está aplicada parcialmente (le falta un parámetro) y devuelve una función.</span>\n\n<span class=\"token comment\">-- otro ejemplo con composición redefiniendo doble del siguiente</span>\n<span class=\"token hvariable\">dobleDelSiguiente</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">dobleDelSiguiente</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unNumero</span></code></pre></div>\n<ul>\n<li>Tuplas: conjunto de elementos de diferentes tipos cuya longitud es fija. Por ejemplo:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pepita\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38176598</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- una dupla (tupla de dos elementos) con un string y un número.</span></code></pre></div>\n<p>Para las duplas ya tenemos definidas <code class=\"language-text\">fst</code> y <code class=\"language-text\">snd</code> que devuelven el primer y el segundo elemento, respectivamente, de una tupla de dos elementos.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Pepita\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38176598</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"Pepita\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Pepita\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38176598</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">38176598</span></code></pre></div>\n<p>También existen las n-ternas, o sea, tuplas de N elementos. Por ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'e'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- una terna (tupla de 3 elementos) compuesta de elementos de diferentes tipos.</span></code></pre></div>\n<p>Para hacer el equivalente al <code class=\"language-text\">fst</code> y <code class=\"language-text\">snd</code> de las duplas, existen lo que llamamos un <strong>accessor</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">primerElemento</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">primerElemento</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">primero</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">primero</span>\n<span class=\"token hvariable\">primerElemento</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'e'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span> <span class=\"token string\">\"hola\"</span>\n<span class=\"token comment\">-- una terna (tupla de 3 elementos) compuesta de elementos de diferentes tipos.</span></code></pre></div>\n<p>El uso del accessor es posible gracias a <strong>pattern matching</strong>, que es el concepto asociado al chequeo estructural de un dato respecto de una estructura esperada. Gracias a esto podemos tener un código más declarativo y simple. Sin embargo, su desventaja es que depende de los cambios de estructuras. Imaginémonos que nosotros agregamos un cuarto elemento a la tupla. Esto haría que no fuera posible utilizar nuestro accessor inicial, ya que estructuralmente la tupla cambió.  </p>\n<p>Algo más para decir de esta función es que está usando <strong>variables anónimas</strong> (los <code class=\"language-text\">_</code>). Las vamos a utilizar cuando necesitemos recibir un parámetro pero que no nos interesa conocer su valor (no nos es útil conocerlo) para la definición de la función.</p>\n<p>Una cuestión muy importante a tener en cuenta es que en funcional existen tres mundos: <strong>el de los valores, el de los tipos y el de los patrones</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">nombreDeLaFuncion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Tipos</span>\n<span class=\"token hvariable\">nombreDeLaFuncion</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Patrones</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Mundo</span> <span class=\"token hvariable\">de</span> <span class=\"token hvariable\">los</span> <span class=\"token constant\">Valores</span></code></pre></div>\n<p>Las variables anónimas solo viven en el mundo de los patrones. Por lo tanto, <strong>van del lado izquierdo del igual y nunca deben ir del lado derecho ni en el tipado.</strong> En el mundo de los tipos no puede ir porque tenemos que especificar los tipos de nuestras funciones y valores, aún cuando son variables. En el de los valores tampoco tiene sentido porque es donde especificamos nuestros retornos, no podemos devolver “lo que sea”.</p>\n<ul>\n<li>Listas: conjunto de elementos de un mismo tipo. Por ejemplo:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- listas de números.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"die\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bart\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"die\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista de strings.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token constant\">True</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">True</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista de booleanos.</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@skinnerOk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Es una aurora boreal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"@archuN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"puedo verla??\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"@skinnerOk\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- listas de tuplas (representan un tweet).</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- lista vacía.</span></code></pre></div>\n<p>Vimos que hay varias funciones que podemos usar con las listas:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"¿cómo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"estás?\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">3</span>\n<span class=\"token operator\">></span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">7</span>\n<span class=\"token comment\">-- length: devuelve la cantidad de elementos de la lista.</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">1</span>\n<span class=\"token comment\">-- head: devuelve el primer elemento de una lista</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">tail</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- tail: devuelve una nueva lista pero sin el primer elemento de la original</span>\n\n\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">elem</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">True</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">elem</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">False</span>\n<span class=\"token comment\">-- elem: devuelve si un elemento forma parte o no de una lista</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">sum</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">10</span>\n<span class=\"token comment\">-- sum: devuelve la suma de todos los elementos de una lista. ¡Sólo funciona con lista de números!</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">any</span> <span class=\"token builtin\">even</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">True</span>\n<span class=\"token comment\">-- any: devuelve si alguno de los elementos de la lista cumplen la condición pasada por parámetro</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">all</span> <span class=\"token builtin\">odd</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">False</span>\n<span class=\"token comment\">-- all: devuelve si todos los elementos de la lista cumplen la condición pasada por parámetro</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- filter: dada una condición (función que devuelve un booleano) y una lista, devuelve otra lista que contenga los elementos que cumplan la condición. Algo interesante de este ejemplo es que estamos usando aplicación parcial en (>4) ya que a la función (>) le estamos pasando un sólo parámetro (el 4) y está esperando que le llegue el que le falta (que está en la lista).</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">map</span> <span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"murcielago\"</span><span class=\"token punctuation\">]</span> \n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">27</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- map: dada una función y una lista, devuelve otra lista que contenga a los elementos como resultado de aplicarles la función pasada por parametro.</span></code></pre></div>\n<p>Las funciones <code class=\"language-text\">map</code> y <code class=\"language-text\">filter</code> (y otras más que iremos viendo o ya vimos, como la composición (<code class=\"language-text\">.</code>) o la aplicación (<code class=\"language-text\">$</code>)) son llamadas de <strong>orden superior</strong> porque reciben por parámetro otra función 🤯. ¡El orden superior es buenísimo porque nos permite crear funciones que reciban comportamiento (otras funciones) como argumento! De esa forma podemos pensar de forma mucho más declarativa: </p>\n<ul>\n<li>Puedo aislar y reutilizar comportamiento común.</li>\n<li>Puedo partir mi problema, separando responsabilidades, entre el código que tiene orden superior, y el comportamiento parametrizado.</li>\n<li>Puedo tener un código con partes incompletas, esperando rellenarlos pasando comportamiento por parámetro, y no sólo datos.</li>\n</ul>\n<p>¡Ahora sí! Resolvamos el ejercicio <a href=\"https://docs.google.com/document/d/1YNnnn1bVDi1E0ErvyaPBpqcyYmxBWdgOenKztIvzk9E/edit?tab=t.0#heading=h.poq6zqz17xui\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Hora de Lectura”</a>. Pero… ¿Por dónde empezamos? 😅 Si vamos a trabajar con libros, empecemos por ahí. ¡A modelarlos! 🎨</p>\n<p>⚠️ Disclaimer: Es muy importante leer todo el enunciado antes de ponerse a codear. En este caso, vamos a ir a nuestro ritmo sólo por fines pedagógicos. ⚠️</p>\n<p>Tenemos que crear cada libro, para eso, vamos a crear… ¿variables? ¡No! 😠 En funcional <strong>no existen las variables</strong> porque las cosas no varían. Recordá: <strong>en Haskell no hay estado</strong>. Es por eso que vamos a crear <strong>etiquetas</strong> 🏷️ representando a cada libro. ¿Y cómo los vamos a representar? 💭 Bueno, sabemos que cada libro tiene un título, un autor y una cantidad de páginas, entonces podríamos crear a <em>“El visitante”</em> y a <em>“Shingeki no Kyojin capítulo 1”</em> de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y así seguimos con los demás títulos. Peeeero, antes de avanzar, ¿no hay algo que te llame la atención? 🤔 Pongámonos a filosofar: ¿qué es <code class=\"language-text\">elVisitante</code>? ¿qué es <code class=\"language-text\">shingekiNoKyojin1</code>? ¡Son libros 📚! Entonces, ¿no estaría bueno poder llamarlos como corresponde?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por suerte, esto no va a quedar en un deseo. Lo vamos a poder hacer realidad con el <strong>type alias</strong> (en criollo: un apodo o un alias). Gracias a esta herramienta vamos a lograr que nuestro código sea más expresivo 😌. Entonces, para hacer esto posible deberemos agregar a nuestra solución un type alias:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>¡Y podemos seguir mejorando la expresividad de nuestro código! Si sabemos que nuestro libro es una terna compuesta por el título, autor y la cantidad de páginas… Mirá 👀:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Titulo</span> <span class=\"token operator\">=</span> <span class=\"token constant\">String</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">=</span> <span class=\"token constant\">String</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">CantidadDePaginas</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Int</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Titulo</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CantidadDePaginas</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"el visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"shingeki no kyojin 1 \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y una vez que hayamos modelado todos los libros, ¡es hora de armar la biblioteca! Para eso vamos a usar vari… ¡Noooo! 😡 Crearemos una etiqueta. ¿Y cómo va a ser la biblioteca? Bueno, una lista con los libros que modelamos. ¿Y su tipo? ¿Una lista de <code class=\"language-text\">(String, String, Int)</code>? ¿O una lista de <code class=\"language-text\">Libro</code>s? 💭 Si bien dijimos que <code class=\"language-text\">(String, String, Int)</code> y <code class=\"language-text\">Libro</code> eran lo mismo, para darle un sentido semántico a nuestra solución, vamos a elegir como tipo de la biblioteca a lista de <code class=\"language-text\">Libro</code>s:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Sabemos lo que estás pensando… también nos gustaría tomar un helado 🍦. ¿Eh? ¿Eso no era lo que pensabas? 😳 No bueno, sí, también creemos que sería una buena idea crear un type alias para la biblioteca 😅:   </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Hagamos un recreíto de tanto código 🥴. Te vamos a contar un secreto 🤫: ¿viste el <code class=\"language-text\">String</code>? Bueno, ¡también es un apodo! ¿Te imaginás cuál es su verdadero nombre? 🙈 Es <code class=\"language-text\">type String = [Char]</code>. Así es, un <code class=\"language-text\">String</code> no es nada más ni nada menos que una lista de caracteres, una lista de <code class=\"language-text\">Char</code>. ¿Eso significa que a partir de ahora vamos a llamarle <code class=\"language-text\">[Char]</code>? ¡Nooo! El <code class=\"language-text\">String</code> va a seguir llamándose <code class=\"language-text\">String</code>, por algo alguien decidió crear ese type alias. ¿No nos crees? Mirá este ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token string\">\"¡Hola!\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token char string\">'¡'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'!'</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">True</span></code></pre></div>\n<p>El string <code class=\"language-text\">¡Hola!</code> es lo mismo que la lista de caracteres <code class=\"language-text\">['¡', 'H', 'o', 'l', 'a', '!']</code>. Porque como dijimos, <code class=\"language-text\">String</code> es un type alias de <code class=\"language-text\">[Char]</code>. ¡Sigamos con el TP! 🌈</p>\n<p>Ya modelamos los libros y la biblioteca. Es hora de definir las funciones que nos piden 👩‍💻👨‍💻. La primera es <code class=\"language-text\">promedioDePaginas</code>. ¿Por dónde la encaramos 😵? <strong>Nuestro consejo es empezar por el tipo de la función</strong>. De esa forma, vamos a tener en mente qué parámetros toma y qué devuelve para luego definirla. 😊\n¿Cuántos parámetros toma <code class=\"language-text\">promedioDePaginas</code>? Uno solo, la biblioteca. Entonces, vamos a empezar poniendo una sola flechita (<strong>recordá que el tipo de una función tiene la misma cantidad de flechitas que de parámetros</strong>):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token operator\">...</span>   </code></pre></div>\n<p>A veces, es muy claro qué devuelve una función, por lo que podemos empezar completando ese espacio del tipo de la misma. En este caso, como vamos a hacer un promedio, vamos a obtener como resultado un número entero:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></code></pre></div>\n<p>¿Y de qué tipo es el parámetro que toma? Dijimos que era una biblioteca y el tipo de la biblioteca es <code class=\"language-text\">Biblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span></code></pre></div>\n<p>¡Wooohooo 🎉! Tenemos el tipo de nuestra función. Ahora, definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">promedioDePaginas</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">div</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token hvariable\">unaBiblioteca</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">length</span> <span class=\"token hvariable\">unaBiblioteca</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginasTotales</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span> <span class=\"token operator\">.</span> <span class=\"token builtin\">map</span> <span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaBiblioteca</span>\n \n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unasPaginas</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unasPaginas</span></code></pre></div>\n<p>Algo muy importante que hicimos en esta solución fue <strong>delegar</strong>. Es decir, dividimos nuestro gran problema en partecitas más pequeñas para poder resolverlo más fácilmente. De esta forma obtenemos un código más <strong>declarativo</strong>. Peeero, tampoco debemos irnos al extremo de sobredelegar: haber creado la función <code class=\"language-text\">cantidadDeLibrosDeLaBiblioteca</code> (que recibe una biblioteca y nos devuelve su longitud) es lo mismo que hacer directamente <code class=\"language-text\">length biblioteca</code>. La razón por la que no está bueno sobredelegar es que no estamos creando funciones que hagan nuevas cosas, sino que sólo estamos renombrando funciones que ya existen y conocemos.</p>\n<p>Ahora toca el turno de definir <code class=\"language-text\">esLecturaObligatoria</code>. De vuelta vamos a descomponerla en funciones para que sea más fácil construirla. 💡 Un consejo que solemos dar es definir la función de tal forma que cuando la leamos, quede igual que el enunciado. Y la única forma de hacer esto posible es delegando:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Saga</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Saga</span>\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Autor</span>\n<span class=\"token hvariable\">autor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unAutor</span>\n\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">sagaDeEragon</span>\n\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span></code></pre></div>\n<p>Fijate que la función <code class=\"language-text\">esLecturaObligatoria</code> quedó igual que el enunciado; el mismo dice: <em>”Es una lectura obligatoria cuando es de Stephen King o de la saga de Eragon o es el ejemplar de Fundación de 230 páginas de Isaac Asimov”</em>. A esto nos referimos con delegar y que se pueda leer como una oración del TP. 😁</p>\n<p>Hagamos una observación 🔍: cuando creamos la <code class=\"language-text\">sagaDeEragon</code>, le pusimos como tipo <code class=\"language-text\">Saga</code>, donde saga es <code class=\"language-text\">[Libro]</code>. ¡Lo mismo que la biblioteca! ¿Y por qué no reutilizamos el tipo <code class=\"language-text\">Biblioteca</code> si también es <code class=\"language-text\">[Libro]</code> 🤨? Porque si bien <em>sintácticamente</em> son lo mismo, <em>semánticamente</em> no lo son. Es decir, si bien las dos son del tipo <code class=\"language-text\">[Libro]</code>, una biblioteca no es lo mismo que una saga (y si no nos crees, buscalas en el diccionario 😜). Haciendo esta diferencia ganamos expresividad.</p>\n<p>¡Sigamos! Es el turno de <code class=\"language-text\">esFantasiosa</code>. Comencemos con su tipo, así que como recibe un parámetro, ponemos una flechita:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span></code></pre></div>\n<p>Sabemos que devuelve un booleano, por lo tanto:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Y sabemos que toma una biblioteca:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Tadáaa 🎉, tenemos el tipo de nuestra función. Ahora definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Mmmm, un momento ✋. Algo está oliendo mal 🤢… ¡a repetición de lógica! 🤮 Mirá estas tres funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Son prácticamente iguales 😱. En todas se <strong>repite la lógica</strong> de obtener el autor de un libro para fijarnos si es un autor en especial 😵. Para solucionar esto, vamos a crear una función que tenga sólo la lógica repetida, parametrizando lo único que cambia (que en este caso son los nombres de los autores):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDe</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Nuestra solución ahora quedaría así:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Sigamos con <code class=\"language-text\">nombreDeLaBiblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">titulo</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unTitulo</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unTitulo</span>\n\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">sinVocales</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">sinVocales</span> <span class=\"token hvariable\">unString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">not</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">esVocal</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unString</span>\n\n<span class=\"token hvariable\">esVocal</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Char</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esVocal</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token string\">\"aeiouAEIOUÁÉÍÓÚ\"</span>\n\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">concatenatoriaDeTitulos</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">concatMap</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Recordá que como un <code class=\"language-text\">String</code> es una <code class=\"language-text\">[Char]</code> es lo mismo “aeiouAEIOUÁÉÍÓÚ” que [‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’ , ‘U’, ‘Á’, ‘É’, ‘Í’, ‘Ó’ , ‘Ú’] y es una forma mucho más fácil de escribirlo 😅. Si te quedó la duda de por qué repetimos las vocales en minúscula, mayúscula y con tildes, es para que matchee de las dos formas. 😄</p>\n<p>¡Llegamos a la última función! La que nos dice si una biblioteca es ligera:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">all</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">cantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Y de esa forma completamos el TP usando las herramientas que aprendiste hasta ahora. La clase que viene seguimos. 👋</p>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"https://docs.google.com/document/d/1h0JQAyYL5ePak_9HS5ROgNv4afz6OE5hLXeajFG5l7o/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Enunciado que hicimos en clase</a></li>\n<li><a href=\"https://gist.github.com/gonziesc/c61e699bde0bd5f593015e8b568cb7fb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Código del TP</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/aplicacion-parcial.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aplicación parcial</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/orden-superior.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Orden superior</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/pattern-matching-en-haskell.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pattern Matching</a></li>\n</ul>","frontmatter":{"title":"Aplicación parcial y orden superior","date":"14-04-2025","description":"Tercera clase de PdeP","tags":["funcional","aplicacion-parcial","orden-superior","pattern-matching","tuplas","listas"]}}},"pageContext":{"slug":"/2025/funcional/clase-03/","previous":{"fields":{"slug":"/2025/funcional/clase-02/"},"frontmatter":{"title":"Funcional, composición y tipos","date":"07-04-2025"}},"next":{"fields":{"slug":"/2025/funcional/classe-04/"},"frontmatter":{"title":"Guardas y Data","date":"21-04-2025"}}}},
    "staticQueryHashes": ["452372368","63159454"]}