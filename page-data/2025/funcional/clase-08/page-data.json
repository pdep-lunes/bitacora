{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2025/funcional/clase-08/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"1d354a76-de04-5044-a30a-21bfc90e23d7","excerpt":"Tarea para la clase que viene: Corregir la primera entrega del TP integrador. Seguir con la segunda entrega del TP integrador  Pueden comenzar a realizar…","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Corregir la primera entrega del TP integrador.</li>\n<li>Seguir con la segunda entrega del <a href=\"https://docs.google.com/document/d/1Uq3lbeWwCQcMaL6mlazEIh9Bo_y670Pt9Ig7i-Y4cm4/edit?tab=t.0#heading=h.bzijjzpynqq4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP integrador</a> </li>\n<li>\n<p>Pueden comenzar a realizar <a href=\"https://www.pdep.com.ar/material/parciales\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parciales</a> para practicar. Les recomendamos:</p>\n<ul>\n<li>Si todavía no lo hicieron,  <a href=\"https://docs.google.com/document/d/1mBwfHLXmcZKLHSy22exTxibwny9x2a81hKW000tOFMQ/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tierra de Bárbaros</a> con <a href=\"https://drive.google.com/drive/folders/1AfNARmbRC3ODY-jYcFqzBqn9shs4QMRU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">posible resolución</a></li>\n<li><a href=\"https://docs.google.com/document/d/13SS-HXVR7z5SOgQCwYh2Maob7QhSh858PTSzc7MymCY/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Haskell Chef</a> con <a href=\"https://github.com/pdep-lunes/pdep-clases-2023/blob/main/Funcional/Clase09/src/Lib.hs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">posible resolución</a></li>\n<li><a href=\"https://drive.google.com/file/d/18c1VXjtvMaJeIIHE-gMtTOWycW4r62Ig/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Padrinos mágicos</a>.</li>\n<li><a href=\"https://docs.google.com/document/d/12PSO8F15XHRvOn53khcSMqku6qVuo0j2r9g77GCWZHk/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pinky y Cerebro</a></li>\n<li>Y todos los que tengan resolución así tienen con qué comparar.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"qué-vimos-hoy\" style=\"position:relative;\"><a href=\"#qu%C3%A9-vimos-hoy\" aria-label=\"qué vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué vimos hoy?</h2>\n<ul>\n<li>Listas infinitas</li>\n<li>Lazy evaluation</li>\n<li>Resolvimos malas prácticas de programación (code smells) con <a href=\"https://docs.google.com/document/d/1Uo444tEtRBZqbSxQD6u_mV-XnGUqsTezCA97_TTn8Uk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Disfuncional</a></li>\n</ul>\n<h2 id=\"listas-infinitas\" style=\"position:relative;\"><a href=\"#listas-infinitas\" aria-label=\"listas infinitas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listas infinitas</h2>\n<p>Ya vimos que en Haskell podemos modelar una biblioteca 📚 con las listas, por ejemplo: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y también podemos modelar una lista del 1 al 5:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">unoAlCinco</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Pero si quisiéramos hacer una lista del 1 al 1000… ¡¿deberíamos escribir mil veces los números?! 😱 Por suerte, nuestro gran amigo Haskell puede ayudarnos gracias a las <em>listas por rangos</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">unoAlMil</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">1000</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>También podemos definir una lista de los números pares entre 1 y 100 de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">paresAlCien</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y no solo sirve para números 🔢, sino también para letras 🔡: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">abecedario</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token char string\">'a'</span><span class=\"token operator\">..</span><span class=\"token char string\">'z'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Y así como podemos definir listas con límites o con rangos, también podemos tener… 🥁 ¡<strong>listas infinitas</strong>!</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">infinita</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>(¿Lo probaste en la consola y te olvidaste qué hacer para que pare? 😰 Apretá <strong>ctrl + c</strong>. 😉)</p>\n<h2 id=\"lazy-evaluation\" style=\"position:relative;\"><a href=\"#lazy-evaluation\" aria-label=\"lazy evaluation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy evaluation</h2>\n<p>Sabemos aplicar la función ´head´ a una lista:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"como\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"estás?\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"hola\"</span></code></pre></div>\n<p>Pero, ¿qué pasará con una lista infinita? 😮 </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>Por si quedan dudas de qué es lo que acaba de pasar, Haskell no esperó a que terminara la lista sino que tomó directamente lo que necesitaba. Eso es porque su forma de trabajo es la <strong>evaluación perezosa</strong> o <strong>lazy evaluation</strong>. Esto no pasa con todos los lenguajes. Otros (que seguramente ya utilizaste) usan la <strong>evaluación ansiosa</strong> o <strong>eager evaluation</strong> en donde, por ejemplo, esperarían a que la lista termine de cargar (infinitamente nunca 😵) para devolver el primer elemento.\nSipi, Haskell es lo más. 😍</p>\n<p>Ahora, ¿cómo funciona lazy evaluation?\nEste tipo de evaluación se basa en una <em>estrategia</em> que se llama <strong>call-by-name</strong>… ¿eeehhh? 😨\nSimplemente es operar primero las funciones que están “por fuera”, antes que las funciones de sus argumentos. Es decir, las funciones se aplican antes de que se evalúen los argumentos. 😎\nSi volvemos al ejemplo anterior:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- aplicará primero head, antes que evaluar la lista infinita</span>\n<span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>Pero también hay funciones en las cuales necesitamos evaluar primero los parámetros, antes que la función en sí:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> \n\n<span class=\"token comment\">-- (*) necesita que sus parámetros sean números para poder evaluar, entonces se evalúa primero (2+3).</span>\n\n<span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">></span> <span class=\"token number\">25</span></code></pre></div>\n<p>Evaluar primero los parámetros para luego pasarle el valor final a las funciones, lo llamamos <strong>call-by-value</strong>. Y es la estrategia en la que se basa la eager evaluation. Veamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- espera a que termine la lista infinita (nunca 😝)</span>\n<span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- ... y así hasta el infinito de los tiempos ⏳. ¡No termina!</span></code></pre></div>\n<p>Vimos los siguientes casos teniendo en cuenta estas preguntas:</p>\n<ul>\n<li>¿terminarán de evaluar con lazy evaluation? </li>\n<li>¿y con eager evaluation? </li>\n<li>¿qué nos devuelve? 🤔</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">take</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Sí termina con lazy. No terminaría con eager. Devuelve [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]</span>\n\n<span class=\"token builtin\">last</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">length</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">sum</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token operator\">..</span><span class=\"token number\">3</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Termina con ambas y devuelve 165.</span>\n\n<span class=\"token builtin\">any</span> <span class=\"token builtin\">even</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Termina con lazy pero no con eager. Devuelve True.</span>\n\n<span class=\"token builtin\">all</span> <span class=\"token builtin\">even</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina</span>\n\n<span class=\"token builtin\">all</span> <span class=\"token builtin\">odd</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- Devuelve False</span>\n\n<span class=\"token builtin\">head</span> <span class=\"token operator\">.</span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Termina con lazy pero no con eager. Devuelve 4.</span>\n\n<span class=\"token builtin\">head</span> <span class=\"token operator\">.</span> <span class=\"token builtin\">filter</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina con lazy y tampoco con eager.</span>\n\n<span class=\"token builtin\">map</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- No termina pero devuelve [3, 6, 9…]</span>\n\n<span class=\"token builtin\">fst</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Devuelve \"Hola\". No terminaría de evaluarse con eager.</span>\n\n<span class=\"token builtin\">fst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">head</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Devuelve \"Hola\". Con eager rompería porque no se puede hacer head de la lista vacía.</span>\n\n<span class=\"token builtin\">snd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- Rompe porque las listas deben ser homogéneas.</span></code></pre></div>\n<h2 id=\"funciones-para-generar-listas\" style=\"position:relative;\"><a href=\"#funciones-para-generar-listas\" aria-label=\"funciones para generar listas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Funciones para generar listas</h2>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">repeat</span> <span class=\"token string\">\"Hola\"</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">.....</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">iterate</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">replicate</span> <span class=\"token number\">10</span> <span class=\"token string\">\"Hola\"</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">cycle</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> …<span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2 id=\"tip-para-el-parcial-funciones-para-modificar-un-campo-de-una-estructura\" style=\"position:relative;\"><a href=\"#tip-para-el-parcial-funciones-para-modificar-un-campo-de-una-estructura\" aria-label=\"tip para el parcial funciones para modificar un campo de una estructura permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip para el parcial: funciones para modificar un campo de una estructura</h2>\n<p>En parciales es muy común que tengamos estructuras de datos complejos y se repita la idea de querer “modificar” uno de los campos de esta estructura. Por ejemplo, si tenemos una persona con nombre, apellido y edad y queremos hacer que cumpla años, duplicar su edad, hacer que cumpla 100 años, etc. Estas funciones terminarían con una lógica muy similar entre sí:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">cumplirA</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">cumplirA</span>ñ<span class=\"token hvariable\">os</span>    <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">edad</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">edad</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token hvariable\">duplicarEdad</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">duplicarEdad</span>   <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">edad</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">edad</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token hvariable\">cumplir100A</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">cumplir100A</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">edad</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>¡Esta repetición de lógica la podemos evitar de la misma forma que siempre! 🙌 Extrayendo la lógica común en una función. </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">modificarEdad</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">modificarEdad</span> <span class=\"token hvariable\">unaFuncion</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">edad</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unaFuncion</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">edad</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ahora, podemos escribir nuestras funciones anteriores en función de <code class=\"language-text\">modificarEdad</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">cumplirA</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">cumplirA</span>ñ<span class=\"token hvariable\">os</span>    <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">modificarEdad</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">duplicarEdad</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">duplicarEdad</span>   <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">modificarEdad</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">cumplir100A</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Persona</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Persona</span>\n<span class=\"token hvariable\">cumplir100A</span>ñ<span class=\"token hvariable\">os</span> <span class=\"token hvariable\">unaPersona</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">modificarEdad</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">const</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El crear estas funciones auxiliares nos trae un montón de ventajas:</p>\n<ul>\n<li>Evitamos la repetición de lógica.</li>\n<li>Nos facilita usar composición (en el caso que queramos modificar dos campos distintos a la vez, sólo necesitamos componer dos de estas funciones).</li>\n<li>Agrega una pequeña capa de abstracción entre nuestra lógica de dominio y la estructura de nuestros datos. Esto hace que si nuestra estructura cambia, las únicas funciones que se ven afectadas son las auxiliares, y no las de dominio.</li>\n</ul>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7-4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Listas infinitas</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lazy evaluation</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Estrategias de evaluación</a></li>\n<li><a href=\"https://github.com/pdep-lunes/pdep-clases-2023/blob/main/Funcional/Clase09/src/Disfuncional.hs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Posible solución de Disfuncional</a></li>\n</ul>","frontmatter":{"title":"Listas infinitas y lazy evaluation","date":"19-05-2025","description":"Octava clase","tags":["funcional","listas infinitas","lazy evaluation"]}}},"pageContext":{"slug":"/2025/funcional/clase-08/","previous":{"fields":{"slug":"/2025/funcional/clase-07/"},"frontmatter":{"title":"Corrección de Entrega 1 TP Funcional","date":"12-05-2025"}},"next":{"fields":{"slug":"/2025/funcional/clase-09/"},"frontmatter":{"title":"Simulacro de parcial funcional","date":"26-05-2025"}}}},
    "staticQueryHashes": ["452372368","63159454"]}