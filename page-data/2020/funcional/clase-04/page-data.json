{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2020/funcional/clase-04/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bitácora","author":"pdep"}},"markdownRemark":{"id":"0dca9145-9e5d-53a9-9bab-f7c7afdc6601","excerpt":"¿Qué vimos hoy? Hicimos una puesta en común del TP “Hora de lectura” que hicimos la clase pasada. 🧐 ¿Por dónde empezamos? 😅 Si vamos a trabajar con libros…","html":"<h2 id=\"qué-vimos-hoy\" style=\"position:relative;\"><a href=\"#qu%C3%A9-vimos-hoy\" aria-label=\"qué vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¿Qué vimos hoy?</h2>\n<p>Hicimos una puesta en común del <a href=\"https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TP “Hora de lectura”</a> que hicimos la clase pasada. 🧐</p>\n<p>¿Por dónde empezamos? 😅 Si vamos a trabajar con libros, empecemos por ahí. ¡A modelarlos! 🎨</p>\n<p>⚠️ Disclaimer: Es muy importante leer todo el enunciado antes de ponerse a codear. En este caso, vamos a ir a nuestro ritmo sólo por fines pedagógicos. ⚠️</p>\n<p>Tenemos que crear cada libro, para eso, vamos a crear… ¿variables? ¡No! 😠 En funcional <strong>no existen las variables</strong> porque las cosas no varían. Recordá: <strong>en Haskell no hay estado</strong>. Es por eso que vamos a crear <strong>etiquetas</strong> 🏷️ representando a cada libro. ¿Y cómo los vamos a representar? 💭 Bueno, sabemos que cada título del libro tiene un autor y una cantidad de páginas, entonces podríamos crear a <em>“El visitante”</em> y a <em>“Shingeki no Kyojin capítulo 1”</em> de esta forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y así seguimos con los demás títulos. Peeeero, antes de avanzar, ¿no hay algo que te llame la atención? 🤔 Pongámonos a filosofar: ¿qué es <code class=\"language-text\">elVisitante</code>? ¿qué es <code class=\"language-text\">shingekiNoKyojin1</code>? ¡Son libros 📚! Entonces, ¿no estaría bueno poder llamarlos como corresponde?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Por suerte, esto no va a quedar en un deseo. Lo vamos a poder hacer realidad con el <strong>type alias</strong> (en criollo: un apodo o un alias). Gracias a esta herramienta vamos a lograr que nuestro código sea más expresivo 😌. Entonces, para hacer esto posible deberemos agregar a nuestra solución un type alias:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>¡Y podemos seguir mejorando la expresividad de nuestro código! Si sabemos que nuestro libro es una dupla compuesta por el autor y la cantidad de páginas… Mirá 👀:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">=</span> <span class=\"token constant\">String</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">CantidadDePaginas</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Int</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CantidadDePaginas</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Y una vez que hayamos modelado todos los libros, ¡es hora de armar la biblioteca! Para eso vamos a usar vari… ¡Noooo! 😡 Crearemos una etiqueta. ¿Y cómo va a ser la biblioteca? Bueno, una lista con los libros que modelamos. ¿Y su tipo? ¿Una lista de <code class=\"language-text\">(String, Int)</code>? ¿O una lista de <code class=\"language-text\">Libro</code>s? 💭 Si bien dijimos que <code class=\"language-text\">(String, Int)</code> y <code class=\"language-text\">Libro</code> eran lo mismo, para darle un sentido semántico a nuestra solución, vamos a elegir como tipo de la biblioteca a lista de <code class=\"language-text\">Libro</code>s:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Sabemos lo que estás pensando… también nos gustaría tomar un helado 🍦. ¿Eh? ¿Eso no era lo que pensabas? 😳 No bueno, sí, también creemos que sería una buena idea crear un type alias para la biblioteca 😅:   </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span>\n<span class=\"token hvariable\">biblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">elVisitante</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin1</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin3</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">shingekiNoKyojin27</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">fundacion</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman5</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman10</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">sandman12</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Hagamos un recreíto de tanto código 🥴. Te vamos a contar un secreto 🤫: ¿viste el <code class=\"language-text\">String</code>? Bueno, ¡también es un apodo! ¿Te imaginás cuál es su verdadero nombre? 🙈 Es <code class=\"language-text\">type String = [Char]</code>. Así es, un <code class=\"language-text\">String</code> no es nada más ni nada menos que una lista de caracteres, una lista de <code class=\"language-text\">Char</code>. ¿Eso significa que a partir de ahora vamos a llamarle <code class=\"language-text\">[Char]</code>? ¡Nooo! El <code class=\"language-text\">String</code> va a seguir llamándose <code class=\"language-text\">String</code>, por algo alguien decidió crear ese type alias. ¿No nos crees? Mirá este ejemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token string\">\"¡Hola!\"</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token char string\">'¡'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'H'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char string\">'!'</span><span class=\"token punctuation\">]</span>\n<span class=\"token constant\">True</span></code></pre></div>\n<p>El string <code class=\"language-text\">¡Hola!</code> es lo mismo que la lista de caracteres <code class=\"language-text\">['¡', 'H', 'o', 'l', 'a', '!']</code>. Porque como dijimos, <code class=\"language-text\">String</code> es un type alias de <code class=\"language-text\">[Char]</code>. ¡Sigamos con el TP! 🌈</p>\n<p>Ya modelamos los libros y la biblioteca. Es hora de definir las funciones que nos piden 👩‍💻👨‍💻. La primera es <code class=\"language-text\">promedioDeHojas</code>. ¿Por dónde la encaramos 😵? <strong>Nuestro consejo es empezar por el tipo de la función</strong>. De esa forma, vamos a tener en mente qué parámetros toma y qué devuelve para luego definirla. 😊\n¿Cuántos parámetros toma <code class=\"language-text\">promedioDeHojas</code>? Uno solo, la biblioteca. Entonces, vamos a empezar poniendo una sol flechita (<strong>recordá que el tipo de una función tiene la misma cantidad de flechitas que de parámetros</strong>):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDeHojas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token operator\">...</span>   </code></pre></div>\n<p>A veces, es muy claro qué devuelve una función, por lo que podemos empezar completando ese espacio del tipo de la misma. En este caso, como vamos a hacer un promedio, vamos a obtener como resultado un número, ¡pero no cualquier número! Un número que podría tener una coma, es decir, un <code class=\"language-text\">Float</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDeHojas</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span>  <span class=\"token operator\">-></span> <span class=\"token constant\">Float</span></code></pre></div>\n<p>¿Y de qué tipo es el parámetro que toma? Dijimos que era una biblioteca y el tipo de la biblioteca es <code class=\"language-text\">Biblioteca</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDeHojas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Float</span></code></pre></div>\n<p>¡Wooohooo 🎉! Tenemos el tipo de nuestra función. Ahora, definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">promedioDeHojas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Float</span>\n<span class=\"token hvariable\">promedioDeHojas</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">fromIntegral</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">cantidadDeHojas</span> <span class=\"token hvariable\">unaBiblioteca</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token hvariable\">genericLength</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">cantidadDeHojas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDeHojas</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span> <span class=\"token operator\">.</span> <span class=\"token builtin\">map</span> <span class=\"token hvariable\">cantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span>\n \n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unasPaginas</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unasPaginas</span></code></pre></div>\n<p>Algo muy importante que hicimos en esta solución fue <strong>delegar</strong>. Es decir, dividimos nuestro gran problema en partecitas más pequeñas para poder resolverlo más fácilmente. De esta forma obtenemos un código más <strong>declarativo</strong>.</p>\n<p>Enfoquémonos en <code class=\"language-text\">cantidadDePaginas</code> 🔍. Es una función que dada una tupla, nos devuelve un elemento en específico de la misma. Esto es lo que llamamos un <strong>accessor</strong>. </p>\n<p>En este punto de la clase surgió la duda de si <code class=\"language-text\">Int</code> es lo mismo que <code class=\"language-text\">Integral</code>. Si no lo recordás, dijimos que no son lo mismo. <code class=\"language-text\">Int</code> es un tipo de dato mientras que <code class=\"language-text\">Integral</code> es una restricción de tipo, también llamada clase de tipo o <strong>type class</strong>. Este es un diagrama en donde lo escrito en negro ⚫ son clases de tipo y lo escrito en rojo 🔴 son tipos de dato:</p>\n<p><img src=\"https://raw.githubusercontent.com/pdep-lunes/bitacora/2019-completo/content/blog/funcional/haskell-type-classes.jpg\" alt=\"diagrama_tipo_clases\" title=\"Diagrama de tipos de clases\"></p>\n<p>Ahora toca el turno de definir <code class=\"language-text\">esLecturaObligatoria</code>. De vuelta vamos a descomponerla en funciones para que sea más fácil construirla. 💡 Un consejo que solemos dar definir la función de tal forma que cuando la leamos, quede igual que el enunciado. Y la única forma de hacer esto posible es delegando:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Saga</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Libro</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Saga</span>\n<span class=\"token hvariable\">sagaDeEragon</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">eragon</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">eldest</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">brisignr</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">legado</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Autor</span>\n<span class=\"token hvariable\">autor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unAutor</span>\n\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">sagaDeEragon</span>\n\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFundacion</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span></code></pre></div>\n<p>Fijate que la función <code class=\"language-text\">esLecturaObligatoria</code> quedó igual que el enunciado; el mismo dice: <em>”Es una lectura obligatoria cuando es de Stephen King o de la saga de Eragon o es el ejemplar de Fundación de 230 páginas de Isaac Asimov”</em>. A esto nos referimos con delegar y que se pueda leer como una oración del TP. 😁</p>\n<p>Hagamos una observación 🔍: cuando creamos la <code class=\"language-text\">sagaDeEragon</code>, le pusimos como tipo <code class=\"language-text\">Saga</code>, donde saga es <code class=\"language-text\">[Libro]</code>. ¡Lo mismo que la biblioteca! ¿Y por qué no reutilizamos el tipo <code class=\"language-text\">Biblioteca</code> si también es <code class=\"language-text\">[Libro]</code> 🤨? Porque si bien <em>sintácticamente</em> son lo mismo, <em>semánticamente</em> no lo son. Es decir, si bien las dos son del tipo <code class=\"language-text\">[Libro]</code>, una biblioteca no es lo mismo que una saga (y si no nos crees, buscalas en el diccionario 😜). Haciendo esta diferencia ganamos expresividad.</p>\n<p>Veamos otra versión de <code class=\"language-text\">esLecturaObligatoria</code> con <strong>pattern matching</strong> (y nuestra versión preferida porque usa una herramienta del paradigma funcional y además, es más declarativa): </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Isaac Asimov\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>⚠️ Hay que tener mucho cuidado con el orden cuando utilizamos pattern matching. Los casos deben ir de lo más particular a lo más general. ⚠️\nEn este caso <code class=\"language-text\">(\"Stephen King\", _)</code> y <code class=\"language-text\">(\"Isaac Asimov\", 230)</code> matchean con duplas que tengan ese formato, mientras que <code class=\"language-text\">unLibro</code> matchea con cualquier tupla (por eso va después) y por último va la variable anónima (<code class=\"language-text\">_</code>) que matchea con cualquier cosa. Así vamos de los casos más específicos a los generales.</p>\n<p>Y así como tenemos una solución preferida, tenemos una que no nos gusta para nada 🤬:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span> \n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eragon</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eldest</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">brisignr</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">legado</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n\t<span class=\"token operator\">|</span><span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>Hacerlo de esta forma es un 2️⃣ automático en el parcial, un desaprobado. Es un <strong>mal uso de booleanos</strong> y una <strong>muy muy mala práctica</strong> de programación. Dicho esto, quien avisa no traiciona… 👀</p>\n<p>¡Sigamos! Es el turno de <code class=\"language-text\">esFantasiosa</code>. Comencemos con su tipo, así que como recibe un parámetro, ponemos una flechita:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token operator\">...</span></code></pre></div>\n<p>Sabemos que devuelve un booleano, por lo tanto:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token operator\">...</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Y sabemos que toma una biblioteca:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div>\n<p>Tadáaa 🎉, tenemos el tipo de nuestra función. Ahora definámosla:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Mmmm, un momento ✋. Algo está oliendo mal 🤢… ¡a repetición de lógica! 🤮 Mirá estas tres funciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeStephenKing</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeChristopherPaolini</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeNeilGaiman</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Son prácticamente iguales 😱. En todas se <strong>repite la lógica</strong> de obtener el autor de un libro para fijarnos si es un autor en especial 😵. Para solucionar esto, vamos a crear una función que tenga sólo la lógica repetida, parametrizando lo único que cambia (que en este caso son los nombres de los autores):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDe</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">==</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Nuestra solución ahora quedaría así:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esLibroFantasioso'</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Hagamos una observación 🔍 a estas soluciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esLibroFantasioso'</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">||</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span> <span class=\"token hvariable\">unLibro</span>\n\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token hvariable\">esLibroFantasioso</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esFantasiosa'</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esFantasiosa'</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Christopher Paolini\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">||</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Neil Gaiman\"</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Las funciones <code class=\"language-text\">esFantasiosa</code> y <code class=\"language-text\">esFantasiosa'</code> hacen exactamente lo mismo. Es lo mismo hacer <code class=\"language-text\">any (condicion1 || condicion2) lista</code> que <code class=\"language-text\">any condicion1 lista || any condicion2 lista</code>. Siempre vamos a preferir la primer solución ya que es más declarativa.\nLo mismo ocurre tambien con <code class=\"language-text\">map</code> y <code class=\"language-text\">filter</code>: </p>\n<ul>\n<li><code class=\"language-text\">(map funcion1.map funcion2) lista</code> es lo mismo que <code class=\"language-text\">map (funcion1.funcion2) lista</code></li>\n<li><code class=\"language-text\">(filter condicion1.filter condicion2) lista</code> es lo mismo que <code class=\"language-text\">filter (condicion1 &amp;&amp; condicion2) lista</code></li>\n</ul>\n<p>Sigamos con <code class=\"language-text\">nombreDeLaBiblioteca</code>. Acá es cuando nos damos cuenta que, por no leer el enunciado completo antes de empezar, la forma en que modelamos al <code class=\"language-text\">Libro</code> no nos alcanza para implementar nuestra solución 🥴. Nos estaría faltando agregar a la tupla el elemento que hace referencia el título del libro. Por suerte hicimos el TP de tal forma que, en el caso de que esto llegara a pasar (¡y pasó! 😱), no fuese complicado hacer estos cambios 😌.\nPara solucionar esto vamos a agregar el título a cada libro y, como creamos el alias <code class=\"language-text\">Libro</code>, vamos a tener que modificar el tipo sólo en ese lugar y no en cada libro (ni en la saga ni en la biblioteca):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">elVisitante</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"El Visitante\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">592</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">shingekiNoKyojin1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Shingeki no Kyojin 1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>¡No hay que olvidarse de modificar los accessors! (Y crear el nuevo):</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">cantidadDePaginas</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unasPaginas</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unasPaginas</span>\n\n<span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">autor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">unAutor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unAutor</span>\n\n<span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">titulo</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unTitulo</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unTitulo</span></code></pre></div>\n<p>¿Te imaginás si en vez de usar nuestros propios accessors hubiésemos usado <code class=\"language-text\">fst</code> y <code class=\"language-text\">snd</code>? ¡Hubiese sido un lío tener que modificar todo 😭! Pero como usamos las herramientas que nos da el lenguaje y el paradigma, ¡no fue difícil ni estresante hacer ese cambio! 🙌 </p>\n<p>Entonces, <code class=\"language-text\">nombreDeLaBiblioteca</code> va a quedar así:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">nombreDeLaBiblioteca</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">sacarVocales</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">nombreDeLaBibliotecaConVocales</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">sacarVocales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">sacarVocales</span> <span class=\"token hvariable\">unTitulo</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span> <span class=\"token hvariable\">esConsonante</span> <span class=\"token hvariable\">unTitulo</span>\n\n<span class=\"token hvariable\">esConsonante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Char</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esConsonante</span> <span class=\"token hvariable\">unCaracter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">not</span> <span class=\"token operator\">.</span> <span class=\"token builtin\">elem</span> <span class=\"token hvariable\">unCaracter</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"aeiouAEIOU\"</span>\n\n<span class=\"token hvariable\">nombreDeLaBibliotecaConVocales</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">nombreDeLaBibliotecaConVocales</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">concatMap</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">unaBiblioteca</span></code></pre></div>\n<p>Recordá que como un <code class=\"language-text\">String</code> es una <code class=\"language-text\">[Char]</code> es lo mismo “aeiouAEIOU” que [‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’ , ‘U’] y es una forma mucho más fácil de escribirlo 😅. Si te quedó la duda de por qué repetimos las vocales en minúscula y mayúscula, es para que matchee de las dos formas. 😄</p>\n<p>¡Llegamos a la última función! La que nos dice si una biblioteca es ligera:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Biblioteca</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esBibliotecaLigera</span> <span class=\"token hvariable\">unaBiblioteca</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">all</span> <span class=\"token hvariable\">esLibroLigero</span> <span class=\"token hvariable\">unaBiblioteca</span>\n\n<span class=\"token hvariable\">esLibroLigero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLibroLigero</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token hvariable\">cantidadDePaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>Y de esa forma completamos el TP usando las herramientas que aprendiste hasta ahora. 👏</p>\n<h2 id=\"links-útiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links útiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links Útiles</h2>\n<ul>\n<li><a href=\"https://gist.github.com/julian-berbel/ac5d66c1a96487db6a6d1d397cab7963\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Solución del TP</a></li>\n<li><a href=\"https://drive.google.com/file/d/1MpsHO26ETM2_ihiXG3B-yQwmSF_xkKUx/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ymCuneefgKU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Uso de paréntesis en Haskell</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iWPWbPuEEQ0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inferencia de tipos</a></li>\n</ul>","frontmatter":{"title":"Cuarta clase","date":"27-04-2020","description":"Cuarta clase de PdeP","tags":["orden superior","aplicación parcial","pattern matching","guardas","type alias","type class"]}}},"pageContext":{"slug":"/2020/funcional/clase-04/","previous":{"fields":{"slug":"/2020/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase","date":"20-04-2020"}},"next":{"fields":{"slug":"/2020/funcional/clase-05/"},"frontmatter":{"title":"Quinta clase","date":"04-05-2020"}}}},
    "staticQueryHashes": ["452372368","63159454"]}