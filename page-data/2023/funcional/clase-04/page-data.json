{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2023/funcional/clase-04/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bit√°cora","author":"pdep"}},"markdownRemark":{"id":"19037297-c19e-5e45-94a3-037c4f8e4233","excerpt":"Tarea para la clase que viene: Pueden hacer (casi) completas las gu√≠as de ejercicios de Funcional. En los √∫ltimos ejercicios de la √∫ltima gu√≠a se pide que se‚Ä¶","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Pueden hacer (casi) completas las <a href=\"https://www.pdep.com.ar/material/gu%C3%ADa-de-ejercicios\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gu√≠as de ejercicios de Funcional</a>. En los √∫ltimos ejercicios de la √∫ltima gu√≠a se pide que se resuelva con herramientas que todav√≠a no se vieron, paciencia con esos, ya vas a poder realizarlos en unas semanas.</li>\n</ul>\n<h3 id=\"guardas\" style=\"position:relative;\"><a href=\"#guardas\" aria-label=\"guardas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Guardas</h3>\n<p>Ahora queremos saber de qu√© g√©nero es un libro. Eso va a depender de:</p>\n<ul>\n<li>Si tiene menos de 40 p√°ginas, es un c√≥mic. üí¨</li>\n<li>Si el autor es Stephen King, es de terror. ü§°</li>\n<li>Si el autor es japon√©s, es un manga. üóæ</li>\n<li>En cualquier otro caso, no sabemos el g√©nero. ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÇÔ∏è</li>\n</ul>\n<p>Aprendimos c√≥mo ver si un libro tiene cierta cantidad de p√°ginas o si es de un autor en especial pero‚Ä¶ ¬øc√≥mo averiguamos la nacionalidad de un autor? üòÖ ¬øDeber√≠amos agregar la nacionalidad del autor en cada libro? ¬°Momento ‚úã! S√≥lo interesa saber qui√©nes son de Jap√≥n y, como en nuestra soluci√≥n, el √∫nico autor japon√©s es <em>‚ÄúHajime Isayama‚Äù</em>, no tendr√≠a sentido agregar m√°s informaci√≥n a cada libro. La forma m√°s f√°cil de resolverlo es con una funci√≥n:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esDeAutorJapones</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">elem</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">autoresJaponenes</span>\n\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">String</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">autoresJaponenes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Hajime Isayama\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- Si se llegaran a agregar otros autores japoneses, esta soluci√≥n es m√°s extensible.</span></code></pre></div>\n<p>¬°Ya tenemos lo necesario para definir la funci√≥n <code class=\"language-text\">genero</code>! </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">genero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">genero</span> <span class=\"token hvariable\">unLibro</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esDe</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Terror\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">esJapones</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">autor</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Manga\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token hvariable\">esLecturaLigera</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Comic\"</span>\n  <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sin categor√≠a\"</span></code></pre></div>\n<p>Record√° no olvidarte el <code class=\"language-text\">otherwise</code> cuando utilices guardas ya que es donde entra todo lo que no abarcan las guardas de encima de √©l. Y, ¬øpor qu√© pasa eso? ü§î Resulta que <code class=\"language-text\">otherwise</code> es un sin√≥nimo de <code class=\"language-text\">True</code>, por lo que siempre se va a poder entrar por esa condici√≥n cuando no se no cumplan ninguna de las dem√°s. Utilizamos <code class=\"language-text\">otherwise</code> porque es m√°s expresivo.</p>\n<p>Veamos otra versi√≥n de <code class=\"language-text\">esLecturaObligatoria</code> con <strong>pattern matching</strong> (y nuestra versi√≥n preferida porque usa una herramienta del paradigma funcional y adem√°s, es m√°s declarativa): </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Stephen King\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Isaac Asimov\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">esLecturaObligatoria'</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">perteneceASagaEragon</span> <span class=\"token hvariable\">unLibro</span></code></pre></div>\n<p>‚ö†Ô∏è Hay que tener mucho cuidado con el orden cuando utilizamos pattern matching. Los casos deben ir de lo m√°s particular a lo m√°s general. ‚ö†Ô∏è\nEn este caso <code class=\"language-text\">(_, \"Stephen King\", _)</code> y <code class=\"language-text\">(_, \"Isaac Asimov\", 230)</code> matchean con tuplas que tengan ese formato, mientras que <code class=\"language-text\">unLibro</code> matchea con cualquier tupla (por eso va despu√©s). As√≠ vamos de los casos m√°s espec√≠ficos a los generales.</p>\n<p>Y as√≠ como tenemos una soluci√≥n preferida, tenemos una que no nos gusta para nada ü§¨:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span> \n<span class=\"token hvariable\">esLecturaObligatoria</span> <span class=\"token hvariable\">unLibro</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eragon</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">eldest</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">brisignr</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">legado</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">autor</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n            <span class=\"token operator\">|</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">fundacion</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n\t<span class=\"token operator\">|</span><span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>Usar <strong>guardas</strong> de esta forma es un 2 (2Ô∏è‚É£) autom√°tico en el parcial, un desaprobado. Es un <strong>mal uso de booleanos</strong> y una <strong>muy muy mala pr√°ctica</strong> de programaci√≥n. Dicho esto, quien avisa no traiciona‚Ä¶ üëÄ</p>\n<h4 id=\"aclaraci√≥n-de-restricci√≥n-de-tipos\" style=\"position:relative;\"><a href=\"#aclaraci%C3%B3n-de-restricci%C3%B3n-de-tipos\" aria-label=\"aclaraci√≥n de restricci√≥n de tipos permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Aclaraci√≥n de restricci√≥n de tipos</h4>\n<p>Cuando definimos la funci√≥n <code class=\"language-text\">modulo</code> lo hicimos indicando el tipo <code class=\"language-text\">modulo :: Num a => a -> a</code>. Esta restricci√≥n ‚Äúle quedaba grande‚Äù a la funci√≥n ya que en la primera guarda estamos fij√°ndonos si <code class=\"language-text\">unNumero</code> es mayor a 0. Los tipos de datos que pueden ordenarse (pueden compararse por mayor/menor) son los de la familia <code class=\"language-text\">Ord</code> y la familia <code class=\"language-text\">Num</code> engloba tambi√©n a los n√∫meros complejos que no pueden ordenarse dada su naturaleza.\nPor eso es que si queremos restringir el tipo de dato de la funci√≥n <code class=\"language-text\">modulo</code> a <code class=\"language-text\">Num</code>, debemos restringirlo a√∫n m√°s aclarando que debe pertenecer a la familia <code class=\"language-text\">Ord</code> de la siguiente forma: <code class=\"language-text\">modulo :: (Num a, Ord a) => a -> a</code></p>\n<h3 id=\"data\" style=\"position:relative;\"><a href=\"#data\" aria-label=\"data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data</h3>\n<p>¬°Excelente! Ya tenemos funcionando la funci√≥n <code class=\"language-text\">genero</code> üéâ. ¬øQu√© pasa si le mandamos como argumento una tupla que representa a una persona? No deber√≠a funcionar porque explicitamos en su tipo que recib√≠a un <code class=\"language-text\">Libro</code>‚Ä¶ Veamos qu√© pasa con la tupla que representa a nuestro querido ex-profe Gus: üëÄ</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">genero</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Gustavo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Trucco\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token string\">\"Comic\"</span></code></pre></div>\n<p>¬ø¬°Entonces Gus es un c√≥mic!? üò± Ya quisiera (es muy muy fan√°tico de los c√≥mics), pero no lo es. Lo que pas√≥ es que si bien dijimos que <code class=\"language-text\">genero</code> funciona s√≥lo con <code class=\"language-text\">Libro</code>s, un <code class=\"language-text\">Libro</code> es una tupla de tipo <code class=\"language-text\">(String, String, Int)</code>, ¬°el mismo tipo que la tupla que representa a una persona! üòÖ\nRecord√° que al usar el type alias, <strong>no estamos creando un nuevo tipo de dato</strong>, sino que le estamos dando un nombre a una estructura que tiene sentido para nuestra soluci√≥n y as√≠ ganar expresividad.</p>\n<p>Entonces, ¬øc√≥mo lo solucionamos? ü§® Creando nuestro propio tipo de dato con <strong>Data</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token constant\">Titulo</span> <span class=\"token constant\">Autor</span> <span class=\"token constant\">CantidadDePaginas</span></code></pre></div>\n<p>En donde <code class=\"language-text\">UnLibro</code> es una funci√≥n que llamamos <strong>constructor</strong> y su tipo es <code class=\"language-text\">UnLibro :: Titulo -> Autor -> CantidadDePaginas -> Libro</code>. Es decir, es una funci√≥n que recibe los par√°metros necesarios para crear un libro. </p>\n<p>Modelemos a ‚ÄúEl visitante‚Äù:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">UnLibro</span> <span class=\"token string\">\"El visitante\"</span> <span class=\"token string\">\"Stephen King\"</span> <span class=\"token number\">592</span></code></pre></div>\n<p>Si quisi√©ramos probarlo en la consola, nos tirar√≠a un error porque el data que construimos no es ‚Äúmostrable‚Äù üò©. Es decir, Haskell no sabe c√≥mo mostrar nuestro tipo de dato, pero lo solucionamos escribiendo <code class=\"language-text\">deriving Show</code> al final de la declaraci√≥n del data: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token constant\">Titulo</span> <span class=\"token constant\">Autor</span> <span class=\"token constant\">CantidadDePaginas</span> <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span></code></pre></div>\n<p>Y entonces, ¬øqu√© ventajas tenemos al usar data? Porque pareciera ser lo mismo que usar tuplas con el type alias üôÑ. La diferencia est√° en que, con el data, estamos creando nuestro propio tipo de dato y, gracias a eso, vamos a poder restringir a las funciones a que s√≥lo funcionen con el tipo de dato que le decimos. Ahora, <code class=\"language-text\">genero</code> s√≥lo va a recibir <code class=\"language-text\">Libro</code>s, de otra forma, romper√°. üí•</p>\n<p>Otra ventaja es que podemos utilizar data con <strong>record syntax</strong> y, de esta forma, nos genera autom√°ticamente los accessors:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">paginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span></code></pre></div>\n<p>En este caso tanto <code class=\"language-text\">libro</code> como <code class=\"language-text\">autor</code> y <code class=\"language-text\">paginas</code> son funciones (accessors) que van a acceder a cada elemento del data üôå.\nEn conclusi√≥n, ambas sintaxis para definir datas son equivalentes, solo que record syntax nos regala las funciones para acceder a las propiedades. üéÅ</p>\n<p>Es importante tener en cuenta, que al utilizar data estamos creando un tipo (<code class=\"language-text\">Libro</code>), una funci√≥n constructora (<code class=\"language-text\">UnLibro</code>) y un patr√≥n (<code class=\"language-text\">UnLibro unTitulo unAutor paginas</code>).</p>\n<p>Por otro lado, si queremos comparar una instancia de data con otra, tenemos que decirle a Haskell que queremos que sean comparables. ¬øC√≥mo hacemos eso? Agregando <code class=\"language-text\">Eq</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">autor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Autor</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">paginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Eq</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ahora vamos a modelar la funci√≥n <code class=\"language-text\">agregarPaginas</code>. ¬øEsta funci√≥n va a modificar al libro original? ¬°No! Los data, al igual que todo en el paradigma funcional, siguen siendo inmutables. Por ende, la funci√≥n nos devolver√° una copia del libro con la cantidad de p√°ginas aumentada.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">agregarPaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">agregarPaginas</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UnLibro</span> <span class=\"token hvariable\">unTitulo</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token hvariable\">unasPaginas</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">paginasAAgregar</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UnLibro</span> <span class=\"token hvariable\">unTitulo</span> <span class=\"token hvariable\">unAutor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unasPaginas</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">paginasAAgregar</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Podemos hacer lo mismo con record syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">agregarPaginas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">agregarPaginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token hvariable\">paginasAAgregar</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">paginas</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">paginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">+</span>  <span class=\"token hvariable\">paginasAAgregar</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Es importante destacar que para devolver la nueva cantidad de p√°ginas debemos sumar la cantidad de p√°ginas original. Para eso, utilizamos el accessor <code class=\"language-text\">paginas</code> y es importante pasarle por par√°metro <code class=\"language-text\">unLibro</code> para que pueda darnos el valor. No olvidar que <code class=\"language-text\">paginas</code> sigue siendo una funci√≥n que necesita su par√°metro.</p>\n<p>En caso de que queramos crear un libro editando mas de un valor, podemos hacer lo mismo que antes, separando cada valor con una <code class=\"language-text\">,</code>. Veamos un ejemplo: sacarSecuela, la cual no solo le agrega 50 p√°ginas a un libro sino que le agrega un 2 al nombre.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">sacarSecuela</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Libro</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Libro</span>\n<span class=\"token hvariable\">sacarSecuela</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">titulo</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">titulo</span> <span class=\"token hvariable\">libro</span> <span class=\"token operator\">++</span> <span class=\"token string\">\" 2\"</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">paginas</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">paginas</span> <span class=\"token hvariable\">unLibro</span> <span class=\"token operator\">+</span>  <span class=\"token number\">50</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"links-√∫tiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links √∫tiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links √ötiles</h2>\n<ul>\n<li><a href=\"https://drive.google.com/file/d/103Xo3_a1lmnJXl8K3WlCZdgzo6ayQwi-/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase 2021 de Guardas (a partir de la hora 2:44:46)</a></li>\n<li><a href=\"https://drive.google.com/file/d/10I86vEaVA-XDOzdaK6urWHKNr9-BEup7/view?usp=sharing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Video de la clase 2021 de Data</a></li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/data--definiendo-nuestros-tipos-en-haskell.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data</a></li>\n<li><a href=\"https://docs.google.com/document/d/1RmFCxoXlBW8p1lU6ZvK7D6dO3NMhtUzD_oO6z1TpyR4/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nuevo enunciado ‚ÄúHora de Lectura‚Äù</a> </li>\n<li><a href=\"https://github.com/pdep-lunes/pdep-clases-2023/blob/main/Funcional/Clase04/src/Lib.hs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C√≥digo de la clase</a></li>\n</ul>","frontmatter":{"title":"Cuarta clase","date":"17-04-2022","description":"Cuarta clase de PdeP","tags":["funcional","guardas","pr√°ctica","data","git"]}}},"pageContext":{"slug":"/2023/funcional/clase-04/","previous":{"fields":{"slug":"/2022/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase","date":"11-04-2022"}},"next":{"fields":{"slug":"/2022/funcional/clase-04/"},"frontmatter":{"title":"Cuarta clase","date":"18-04-2022"}}}},
    "staticQueryHashes": ["452372368","63159454"]}