{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2023/funcional/clase-02/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bit√°cora","author":"pdep"}},"markdownRemark":{"id":"ccfb5cbf-e79b-5f5b-a186-2bc659c8b8e0","excerpt":"Tarea para la clase que viene: Armar grupo si todav√≠a no lo hiciste. Pod√©s buscar integrantes en el canal #buscando-grupo de Discord. Una vez que ya lo tengas‚Ä¶","html":"<h2 id=\"tarea-para-la-clase-que-viene\" style=\"position:relative;\"><a href=\"#tarea-para-la-clase-que-viene\" aria-label=\"tarea para la clase que viene permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea para la clase que viene:</h2>\n<ul>\n<li>Armar grupo si todav√≠a no lo hiciste. Pod√©s buscar integrantes en el canal <strong>#buscando-grupo</strong> de Discord. Una vez que ya lo tengas armado, anunciarlo en el canal <strong>#grupos</strong> indicando qui√©nes lo integran.</li>\n<li>Continuar resolviendo el ejercicio <a href=\"https://docs.google.com/document/d/1kjXQ24yGqdvrXWqGT-7T2hCd8o10uz738N5NDROhfI0/edit#\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PdeP - commerce</a>.</li>\n<li>Realizar (si todav√≠a no los hiciste) los ejercicios de la <a href=\"https://docs.google.com/document/d/15VME8b-t_jXznNpPaTevLM3ETlRUAX1cI79tg6TikXY/edit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">primera gu√≠a</a>.</li>\n</ul>\n<h2 id=\"qu√©-vimos-hoy\" style=\"position:relative;\"><a href=\"#qu%C3%A9-vimos-hoy\" aria-label=\"qu√© vimos hoy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬øQu√© vimos hoy?</h2>\n<p>Estos son los ejemplos de funciones y valores que vimos en clase:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell‚Äã\"><pre class=\"language-haskell‚Äã\"><code class=\"language-haskell‚Äã\">esMayorDeEdad unaEdad = unaEdad &gt;= 18\n‚Äã\nfrecuenciaCardiacaPromedio = 80\n‚Äã\nhacerActividadFisica unaFrecuencia = unaFrecuencia + 50\n‚Äã\ntieneTaquicardia unaFrecuencia = unaFrecuencia &gt;= 180</code></pre></div>\n<p>De esa forma le pusimos un alias o etiqueta al valor 80 con <code class=\"language-text\">frecuenciaCardiacaPromedio</code> y creamos funciones como <code class=\"language-text\">esMayorDeEdad</code>, <code class=\"language-text\">hacerActividadFisica</code> y <code class=\"language-text\">tieneTaquicardia</code>.\nLas funciones van a ser nuestras herramientas para poder operar a los valores.</p>\n<p>Algo muy importante es que en Haskell <strong>no hay efecto</strong>. Esto quiere decir que los valores igualados no van a mutar luego de ser operados por las funciones. Este concepto se llama <strong>inmutabilidad</strong>.</p>\n<p>Por ejemplo, si aplicamos <code class=\"language-text\">hacerActividadFisica</code> a la <code class=\"language-text\">frecuenciaCardiacaPromedio</code>, podemos ver que <code class=\"language-text\">frecuenciaCardiacaPromedio</code> no cambia su valor:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">80</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">hacerActividadFisica</span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">130</span>\n<span class=\"token operator\">></span> <span class=\"token hvariable\">frecuenciaCardiacaPromedio</span>\n<span class=\"token operator\">=></span> <span class=\"token number\">80</span></code></pre></div>\n<p>Por esto, es que en Haskell logramos tener lo que se llama <strong>transparencia referencial</strong>. ü§Ø\nEs importante recordar que <code class=\"language-text\">frecuenciaCardiacaPromedio</code> no es una variable, sino que es simplemente un alias, es decir, otra manera de decirle al valor 80.</p>\n<p>Ahora supongamos que queremos ver si tenemos taquicardia despu√©s de hacer actividad f√≠sica. ¬øC√≥mo lo resolvemos? üò± Usando <strong>composici√≥n</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">)</span> <span class=\"token number\">70</span>\n<span class=\"token operator\">=></span> <span class=\"token constant\">True</span></code></pre></div>\n<p>Como ya mencionamos anteriormente, el valor que retorne la funci√≥n de la derecha, tiene que ser un valor que la funci√≥n de la izquierda pueda operar. Si quisi√©ramos componerlo al rev√©s:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">)</span> <span class=\"token number\">70</span></code></pre></div>\n<p>Va a romper üí• ya que <code class=\"language-text\">hacerActividadFisica</code> tiene que recibir un n√∫mero, y est√° recibiendo un booleano.</p>\n<p>Por √∫ltimo, vamos a darle un nombre a la acci√≥n de preguntar si se tiene taquicardia luego de hacer una actividad f√≠sica creando la funci√≥n<code class=\"language-text\">tieneTaquicardiaDespuesDeEntrenar</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">tieneTaquicardiaDespuesDeEntrenar</span> <span class=\"token hvariable\">unaFrecuencia</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">tieneTaquicardia</span><span class=\"token punctuation\">.</span><span class=\"token hvariable\">hacerActividadFisica</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">unaFrecuencia</span></code></pre></div>\n<p>Que no exista el estado en Haskell, hace que la composici√≥n tenga m√°s relevancia.\nYa que como no podemos pisar valores con variables, la composici√≥n nos permite encadenar las funciones para trabajar con diferentes valores y as√≠ poder crear soluciones m√°s complejas. ‚ú®</p>\n<h2 id=\"precedencia-de-operadores\" style=\"position:relative;\"><a href=\"#precedencia-de-operadores\" aria-label=\"precedencia de operadores permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Precedencia de operadores</h2>\n<p>En matem√°tica, cuando tenemos una expresi√≥n como 2 * 3 + 4, solemos operarla dependiendo de la precedencia de cada operador. Como el * es de mayor precedencia que el +, operamos primero 2 * 3 y luego le sumamos 4.</p>\n<p>En Haskell tambi√©n se respeta esto. Les dejamos una tabla para que puedan ver la precedencia que utiliza Haskell:</p>\n<table>\n<thead>\n<tr>\n<th>Precedencia (Mayor n√∫mero, mayor precedencia)</th>\n<th align=\"center\">‚ÄúOperador‚Äù</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>11</td>\n<td align=\"center\">( )</td>\n</tr>\n<tr>\n<td>10</td>\n<td align=\"center\">Aplicacion prefija</td>\n</tr>\n<tr>\n<td>9</td>\n<td align=\"center\">.</td>\n</tr>\n<tr>\n<td>8</td>\n<td align=\"center\">^</td>\n</tr>\n<tr>\n<td>7</td>\n<td align=\"center\">*,/</td>\n</tr>\n<tr>\n<td>6</td>\n<td align=\"center\">+,-</td>\n</tr>\n<tr>\n<td>5</td>\n<td align=\"center\">:</td>\n</tr>\n<tr>\n<td>4</td>\n<td align=\"center\">==, /=, &#x3C;, &#x3C;=, >, >=</td>\n</tr>\n<tr>\n<td>3</td>\n<td align=\"center\">&#x26;&#x26;</td>\n</tr>\n<tr>\n<td>2</td>\n<td align=\"center\">||</td>\n</tr>\n<tr>\n<td>1</td>\n<td align=\"center\">$</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"type-classes\" style=\"position:relative;\"><a href=\"#type-classes\" aria-label=\"type classes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type classes</h2>\n<p>Pensemos en la funci√≥n <code class=\"language-text\">suma</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token hvariable\">otroNumero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">otroNumero</span></code></pre></div>\n<p>¬øQu√© tipo deber√≠a tener?</p>\n<h3 id=\"enteros\" style=\"position:relative;\"><a href=\"#enteros\" aria-label=\"enteros permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬øEnteros?</h3>\n<p>¬øQue tal <code class=\"language-text\">suma :: Int -> Int -> Int</code>?</p>\n<p>Dados estos n√∫meros:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">unEntero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">unEntero</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token hvariable\">otroEntero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">otroEntero</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\n<span class=\"token hvariable\">unFlotante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Float</span>\n<span class=\"token hvariable\">unFlotante</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token hvariable\">otroFlotante</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Float</span>\n<span class=\"token hvariable\">otroFlotante</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span></code></pre></div>\n<p>¬øQu√© creen que pasar√≠a si queremos evaluar la siguiente expresi√≥n: <code class=\"language-text\">suma unEntero otroEntero</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unEntero</span> <span class=\"token hvariable\">otroEntero</span>\n<span class=\"token number\">5</span></code></pre></div>\n<p>¬øy <code class=\"language-text\">suma unFlotante otroFlotante</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unFlotante</span> <span class=\"token hvariable\">otroFlotante</span>\n<span class=\"token comment\">-- * estalla *</span></code></pre></div>\n<p>¬°Tiene sentido! le dijimos a nuestra funci√≥n suma que su dominio son los enteros, entonces cuando le damos un flotante, nos dice ‚Äúeh, no; yo trabajo s√≥lo con enteros‚Äù</p>\n<h3 id=\"flotantes\" style=\"position:relative;\"><a href=\"#flotantes\" aria-label=\"flotantes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬øFlotantes?</h3>\n<p>¬øY qu√© tal si la hubi√©semos definido como <code class=\"language-text\">suma :: Float -> Float -> Float</code>? Despu√©s de todo, los enteros son un subconjunto de los reales, ¬øno?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unFlotante</span> <span class=\"token hvariable\">otroFlotante</span>\n<span class=\"token number\">5</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unEntero</span> <span class=\"token hvariable\">otroEntero</span>\n<span class=\"token comment\">-- * estalla *</span></code></pre></div>\n<p>Bueno, no; si bien en la matem√°tica es cierto que los enteros son reales, en definitiva para haskell <code class=\"language-text\">Float</code> e <code class=\"language-text\">Int</code> son tipos de datos distintos.</p>\n<h3 id=\"a\" style=\"position:relative;\"><a href=\"#a\" aria-label=\"a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬øa?</h3>\n<p>¬øY si hago <code class=\"language-text\">suma :: a -> a -> a</code>?</p>\n<p>*Falla al cargar el archivo*</p>\n<p>Parece que haskell no nos permite sumar cualquier cosa tampoco, lo cual es de esperarse; ¬øtendr√≠a sentido que nos deje sumar dos funciones? ¬°no!</p>\n<p>¬øPero qu√© onda? si yo en la consola hago</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">unFlotante</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">otroFlotante</span>\n<span class=\"token number\">5</span></code></pre></div>\n<p>√≥</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">></span> <span class=\"token hvariable\">unEntero</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">otroEntero</span>\n<span class=\"token number\">5</span></code></pre></div>\n<p>¬°Me andan las dos!</p>\n<h3 id=\"n√∫meros\" style=\"position:relative;\"><a href=\"#n%C3%BAmeros\" aria-label=\"n√∫meros permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>¬°N√∫meros!</h3>\n<p>Para expresar el tipo de <code class=\"language-text\">suma</code>, en realidad nos est√° faltando una herramienta, a la cual llamamos <strong>Familia de Tipos</strong>, o <strong>Type Class</strong>.</p>\n<p>Mientras que a un tipo lo podr√≠amos describir como un conjunto de valores asociado a un conjunto de operaciones con las que los podemos trabajar, una familia de tipos es m√°s bien un contrato que te dice qu√© operaciones tiene que entender un tipo para pertenecer a esa familia.</p>\n<p>Hasta ac√° suena todo muy abstracto, as√≠ que baj√©moslo a un ejemplo concreto: ¬°los n√∫meros!</p>\n<p>Esa cosa en com√∫n que tienen <code class=\"language-text\">Int</code> y <code class=\"language-text\">Float</code> que nos permite sumarlos es la familia de tipos de los n√∫meros <code class=\"language-text\">Num</code>; y su contrato nos dice que cualquier tipo que pertenezca a su familia, se puede sumar <code class=\"language-text\">(+)</code>, restar <code class=\"language-text\">(-)</code>, y multiplicar <code class=\"language-text\">(*)</code>!</p>\n<p>¬øY esto c√≥mo lo escribimos en el c√≥digo?</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">suma</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">suma</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token hvariable\">otroNumero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">unNumero</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">otroNumero</span></code></pre></div>\n<p>Cuando escribimos esto, estamos restringiendo a que el tipo <code class=\"language-text\">a</code> debe pertenecer a la familia de tipos Num.</p>\n<p>Es importante recalcar que en toda la firma de <code class=\"language-text\">suma</code>, <code class=\"language-text\">a</code> representa a un <strong>mismo tipo</strong>. Si bien ahora podemos sumar enteros con enteros, y flotantes con flotantes, esto <strong>no</strong> nos permite sumar enteros con flotantes.</p>\n<p>Y as√≠ como tenemos una familia de tipos para los n√∫meros, tenemos otro mont√≥n con distintos prop√≥sitos, como:</p>\n<ul>\n<li>Show: Las cosas que se saben mostrar por pantalla (en la consola).</li>\n<li>Eq: Las cosas que se saben comparar por igualdad <code class=\"language-text\">(==)</code>.</li>\n<li>Ord: Las cosas que se saben comparar por orden <code class=\"language-text\">(>)</code>, <code class=\"language-text\">(&lt;)</code>, etc.</li>\n<li>Num: ¬°Los n√∫meros! se saben sumar, restar y multiplicar.</li>\n<li>Integral: Para n√∫meros enteros; entienden la divisi√≥n entera (<code class=\"language-text\">div</code>), el resto de la divisi√≥n <code class=\"language-text\">rem</code>, se les puede preguntar si son pares (<code class=\"language-text\">even</code>) o impares (<code class=\"language-text\">odd</code>).</li>\n<li>Fractional: Para n√∫meros reales, que se pueden dividir con la divisi√≥n flotante <code class=\"language-text\">(/)</code></li>\n</ul>\n<p>Podemos los tipos que pertenecen a cada familia en el siguiente diagrama:</p>\n<p><img src=\"https://user-images.githubusercontent.com/11720274/162550806-7f093ab3-fce5-494d-9da3-3a7611c6a2bb.jpg\" alt=\"diagrama_tipo_clases\" title=\"Diagrama de tipos de clases\"></p>\n<p><em>Es posible que haya alguna mentira blanca en este diagrama</em></p>\n<h2 id=\"links-√∫tiles\" style=\"position:relative;\"><a href=\"#links-%C3%BAtiles\" aria-label=\"links √∫tiles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Links √ötiles</h2>\n<ul>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/tipos-de-haskell.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tipos en Haskell</a> </li>\n<li><a href=\"http://wiki.uqbar.org/wiki/articles/inferencia-de-tipos.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Inferencia de tipos</a></li>\n<li><a href=\"https://github.com/pdep-lunes/pdep-clases-2023/blob/main/Funcional/Clase02/src/Lib.hs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">C√≥digo de la clase</a></li>\n<li><a href=\"https://github.com/pdep-lunes/pdep-clases-2023\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Repositorio de clases</a> </li>\n</ul>","frontmatter":{"title":"Segunda clase","date":"03-04-2023","description":"Segunda clase de PdeP","tags":["funcional","tipado","inmutabilidad","precedencia-de-operadores","practica"]}}},"pageContext":{"slug":"/2023/funcional/clase-02/","previous":{"fields":{"slug":"/2023/funcional/clase-01/"},"frontmatter":{"title":"Primera clase","date":"27-03-2023"}},"next":{"fields":{"slug":"/2023/funcional/clase-03/"},"frontmatter":{"title":"Tercera clase","date":"10-04-2023"}}}},
    "staticQueryHashes": ["452372368","63159454"]}