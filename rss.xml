<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Bitácora]]></title><description><![CDATA[Bitácora con resumenes clase a clase]]></description><link>https://pdep-lunes.github.io/bitacora</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 21 Oct 2020 00:16:16 GMT</lastBuildDate><item><title><![CDATA[Decimoseptima clase]]></title><description><![CDATA[Hicimos este ejercicio. Introducción Cuando ejecutamos un programa, pueden ocurrir problemas que hacen que éste no se comporte de la manera…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-17/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-17/</guid><pubDate>Mon, 19 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hicimos &lt;a href=&quot;https://docs.google.com/document/d/1YPZMyKI4fFij22QM8QfbDU8pfV78bP7vesl2__HIj64/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;este&lt;/a&gt; ejercicio.&lt;/p&gt;
&lt;h1 id=&quot;introducción&quot;&gt;&lt;a href=&quot;#introducci%C3%B3n&quot; aria-label=&quot;introducción permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Cuando ejecutamos un programa, pueden ocurrir problemas que hacen que éste no se comporte de la manera la cual nosotros esperábamos. En otras palabras, pueden ocurrir &lt;strong&gt;errores.&lt;/strong&gt; ¿Qué deberíamos hacer ante un error?&lt;/p&gt;
&lt;p&gt;Si nosotros ignoramos el error, se puede convertir en una &lt;em&gt;bola de nieve&lt;/em&gt; y desencadenar en otros errores, que pueden ser peores &lt;img class=&quot;emoji-icon&quot; alt=&quot;emoji-fire&quot; data-icon=&quot;emoji-fire&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, 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&quot; title=&quot;emoji-fire&quot;&gt;. Por lo tanto, lo mejor que podemos hacer es &lt;strong&gt;fallar&lt;/strong&gt;. Una forma de lograr esto es mediante el uso de &lt;strong&gt;excepciones&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&quot;excepciones&quot;&gt;&lt;a href=&quot;#excepciones&quot; aria-label=&quot;excepciones permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Excepciones&lt;/h1&gt;
&lt;p&gt;Una excepción es una indicación de que algo salió mal en la ejecución nuestro programa.&lt;/p&gt;
&lt;p&gt;¿Y cómo las podemos utilizar en Wollok?
Hay dos maneras de hacerlo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usando el mensaje &lt;code class=&quot;language-text&quot;&gt;error&lt;/code&gt;, el cual entienden los objetos y nos sirve para lanzar una excepción:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mensaje del error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Usando throw y la clase &lt;code class=&quot;language-text&quot;&gt;Exception&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mensaje del error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;También podemos crear nuestras propias excepciones &lt;img class=&quot;emoji-icon&quot; alt=&quot;emoji-wink&quot; data-icon=&quot;emoji-wink&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAATzUlEQVR4Ae2bBXAbS7O2n57Z1UqyjHFsJzlMOczMjP93mOEy3/tdZmZmZmZm5nuYOcxkJzHbot2Z/r32VGXLZedgcrGr3uoV9/P2zEizkvhfHf8X/xf/F8IRjm8F8+STnBQp52A4S4RTBIaMlR6UKgBC3TudUBhWZTOedzLhrd/8TbYC/oga8K1HBlq2PcWlKtwdW241sZxpY1M1JYMpCWIE7CLvnaJe8e1cHpf6uk/13dTx96L8+Ym/wYuA/pceAS9/guqKHh42ls8olc1VtmKMqVpMkoMrYjxidU4CIlAMVdTlEtQbfFvwLY+vO1zD+3bTP+Mdvzw6we8D9Y/NgLmiP3JMTxOdcCxPRrF8RalizradEabDYMuKiT2SlDCVHmzXaugYQKpDSKmGmBIA6ttoewatD8PsftzUXnxjAm218anBNQU/63HTGe2GfztL9Ye27+I3gewjG/Av1/ORYvVqLi3HfHe5Zm+KuiOiLoskDlOOiHqOxQxdgBm8CKmdgpT7IKqCWBAKI1pAAXWQ1dHmGDqzGT/yCn74NbKJXfhmhrYs2ZQjm8xozrh/aqZ8PfDiRzJgw+N8qFj728jWJ/jyclW+rdQbd9iemKjqMdWIaPAc7PG3YlZeCpW+AJcBHjRAC6AscSyAAYlAgMYY/sCLuB1/TzbyFr6ekdUNbiKlPZ7ONuv6LSf9Fj8M6NFaA+Tlh+haWeEny532ybi/RNRtsRVHNHAa9pQHMAOXQ1QGbYM6RAwfJlR9GC0lyJr4/c/jNv8R2f6NuIYlm3SkB9s0p91vHmjwRRf/AVOAHkkD5NW7WdXXx29Vu6Pr48ESUacQ1ebyybdhTngASXrANxEAkQ/3aspiJ1AAU0ZbE/jtcyZs+TuymTbZtJKOtKlPZv86NsYTF/45+wD9+A0I8P19/Gl5RXxJsjLBdkLU20t0xmOYwWtAUwQPIh/ve4wWjTAgMX7kP8jW/Q7Z+DhuGloHWjRH05cOjnHvBzHBvl/4v72N3uMH+IM5+CuToQTbLcQr+onP+WxM//mIn0U0AxxotiBC/riEQzRDtInUjsd0H4/MbkBpYEoW8bqmhL/ktkH+7De30IT3juh9jhJz+hA/Xu6Nrk0GEmyXIe7tmev8U5iuEyAdBzHFxeyIjIDiZXENZO61ozOfgnW/BjJB4hPweu3pmv048KmAB/TDj4AAv/FJvrzWY7+iNJTMgUfEnQnRKfciPWvnOw++2PGjIxz4BiR9mHInMrMRjIIRTNuf+zmn6cxPvMnzH34NCPDPPsRFJ/TKP5fXlDtKKxOiLoiOvRqz5mYgAxEEQDi6oaAAqkCE3/OPZLueJpuCdr4e7GnObh/XG6/8A1453Eiwh4N/apDyvWfza9WVpVNz+LjLYvtWYVffCEZBM4QM1B3d7geJpuE4RcorobUbcbMggjgtlVO3dnQvv/fmLO6DTgED2N+/l8e7euwXlwYTop4E22GxQ5ch1QHwLYTiohckDiIPkQIpZOmRN8GnYCwyJ+o7AAOqSNMff8kq3fKTb/EWoEHvaYAA9usupfuq1fLL5cFSf7wiIapZbPdKzIrzAIeQFjofwBNwjQY7tg+zbdNecG06a/bIjwQWTJCoAq1hyOqoCuoUZt3p5ZjfenoP7aUMiJbr/mOn8EDSZddGXRGmMqfEILU1IIr4OogAIZKIdiPlH/96PX//T+vYvWeUkQMpa88c4qd+4AGSGPDKkQxRRSWar9HUR+drzmtPurK1j52SPfA9L/JrgALucAYIIJf1kXSW5TPzjY3piLBlgyQJUu5GfAPwEPipxGzfNMLP/OKzbN64j7KFioGb7riE+x6/haQ0Ce1g2JEMBSGFvMYkwaYtfMfC5qxzyn3mZX36uy+M4QKjHs4A+73XcmGlKhfbWoQpW0zJIKUKYiJwDRAFgHLEmy/t4kd/+hlco85QDXpXD3LXpz/IFVeeAlPbYWIMEI5KqOQ1ztdqSul87TlDpZpe/L3X6oU3/CnPAf5wBhjADtbM3XHNGlO12JJFIgNREuZ7Cgoklk3rRviRn3qG2LXpSOD0S8/mkS+8h/7qLOz4D/AOxHJ0QyBK8prna3dVS84yWONu8C8CDvBLGSCAOamXuFLWG2T+TI5FYoNEgrER+BbgwQrTYxk/80uvYNIWlRguu+tyHvrUK4knN8LuSTAWEND0o+2GjIAtPNYrOGX5MPO1+kjy2hcYqpZKObshZ9s6TgYIoEsa8C0XcVJSlrW2YpGSxeQGWAu4BQPUQ8ny53+9meE9E/RWhKvvu4QHHz8XGX4HWikYA94fglEFfMiFy2jxpUEECCpZMIbGVMrYRJt25omsobszoqu7BLGBzEOmoEUKAzjE5rXrPEPOkjN9y0V60qf+I+sOZ4A9tpNzosRUTGIwkUA4f4e2wNfBGsaH2zz9wj4SA5fdcRYPPnIysnsdpBmIh9SFqeIICuBFaF3mQ6nMw23bmPEn/zTDxq0NZmbbZJkSWaFajRhYWeH8M3u48qI+Vh9TIRgR6tSFWmWh9pwhZ8mZju305wAbAVl2CvRUzJk2ESQWxBrESK4FoGwa4irvbp5kz+4GV924mkefOA7ZtQ7aDcAXYBWsgBHIAizy3tMhUnbubvLF37GH+rRnoBsqJaFiBFHwMxk7J5ts2DDGn/3dbq6/op9HPzFER2cErQCvaag7MMRCzpSzgf+T5QwwuZJIT5bIIDaXgAlDEyCbhSxjptlg4JROPu2zVlE6uBkaKRgpgAkkMgfgmJ51DK6MAQXHe4eHck+Zuz/1eLo6DL3dEQZoNhxToy0O7msyOqexkRaTUyl/8pd7eHP9JF//uasZ7LeQtQFAFmoXG0yIDEmUnUzgXGyABNlYGCAMfZEAjwEFAOpNrrqig4tvW8mK5izMZGAMFCMRXnq9wU//zihjkxlXX9jBFz2xgkpiwCmHDQcDXcJnP9wLRsB5UMAaMGY+z7Rg33DKu29O8eozozz/3ATf//O7+P6vWo0F0IAjfoHBCkTCPBvYAq8ungKxjeiRMO+xhdVCFREBhZprU5tMoekgXEfB0pHhlJ/6zQO4lmd1l/D0i9P0dVk+89G+YIAcfg/azGDrOMCiBU5AoFaynFqLOfX2Lu68cwVvbmiwd1sdr4pBQQEEIOAKOVPOBsSHXQOMUBYTwHVBogoCqgoALQcAEm4rTunI8B8vz6Jtz8mDlthCR0l4+c1Z7ru5k74eC85z2IgFolAEgAZ5hUyhlUEjhf114thw0UCZi1aX0ZEG+GBwMCKUjhjI2QCzlAESshEBJbgYHFD1EBZZ4NCzLrW2Odi2u01/TeguC1EYRdNjnh3DKX39svw0EKAk7B9OeW19i137MtqpUk6EoRWW41bFnLAmptZtoQU6b4hDR2aAQAmwqH4ARQn1m6WmgIZsnKeJI0A7VAVRC0DwNvAryFJnwJRWy1GOhSiCyEASg1VopBlEFlJdtvN/+c91fufPp2g2PYkVjAFC4z3Q3WW5/tIqD97SQSkCdYAQ6nQogBLqdAvyHhzMs4Eh2LPkXiDzTKn3qMvmJKDBDIHwSgSHg48KUvA1MtS6hOYYCCEUSiWh2umAFpglDEiE199M+dU/mGZlTTixzxJbQQDvIXOQqTJR9/zWnEFZlvGpD1TRRvGThaCEGgkPdGlg8eRsh9sOK0Ar46B6D96halBvEDwoAKjoIRMo2B0kJeGEk4XdGw/dLc2g0mE45ngPmoFduvt7xjNoQ4cVTCqoA2IoVYQS0JiBiizcXseDSUEUUVBCASpA6JHXObnA4ufZltsNahCTbdmxOlXUKfhQsBfUgABhVUTDQ6S4pIhCGy6/0vDC08LktFKtCqPjygW3WvoHUpjyS5+FSOHamyxjvsTsqLLqGMOq4w39qwwdHYIITE7AlvWOFLjufItOtQOvAEUDCOYvMGimaKrzbKAsNwUUyHZM+S1r2xbvFO89Rg1CYZgXP8NbRQUwioSsDob6PQ98ruUvftWxf1I59WrDPY8oNNKl4QE8dFrHU59qw15CoZlBQ6EtoDDQA6febMALDLfwCmIEnIAASHgsAHglZ1hgaUPOBrjltsMeyJ7Zx9abTvVNUl9WZ1DvAQmdVhAPYRRgNGQOZRQm4eIzDaf+gDBdV9b0eWTcgwcMS4eE0vZksHivpGEtmgXGBfXhOhtyEBSMcKA+jOTM41q+mbMBKeAJYRYZkP76O+yeabDFtxTNwhAiDHeriChiFoSEy3iEULUoWA+jGd2zGcfEDjmQQduD9WDeQzbkOJdCpGB9kIL4hdeX4BAKskiqKKH2VMlZcqac7XAGKNCaTUlHpuR5zQ1IAR9U2LUSJLK0EAEDtBXqCoRNkbC8TFECsuj+COEwcBZvWkLFM/UNJWfK2YAWoMsZkAKNf9zln87q6rWpuDbgFDTUZJYWRiFkgrDFaZKLIF1GLMjq4e8jurSBwTNVwCkug5wha6rPmYAGkC5nAIAH6j/8EuvHJvVtV/do2+NTBU94MQkCjBA6FrTEdWUgXlysLC3hkBKgvMxz2yWuk7BtD933maItj2t4cpacCagHRg5nQGMqpfH6Xv1TnfHzDhKmgnrCCxH220XgcGwP5czDG28I09NADUgIty8hCTkBOmDPHli/PjyfwOLnxoYaQhYBEPCF72paik57cpacCebl3+uLEQ8kr+1n8pFTuK5clR5JBFMCiUx4QUAKMJZwOZgRjt2cvvY7hD/9C0MswsAgVHpCZ6OgOECXAGDXTuH3f9/wXT9oaHu4+jogEyAAioRcEAtSFTQVtOFxM55szDMx7LZ/2l/z4+MtRoCx9/peACADprdMMv3cLv3123v8N9sOg6+ASYBYwLK4c0EKQihQibvg4UeFn/4+4dd/Rfirv1ROOx1OO00ZHFI6a+A9TEzB3t3C+nXC1k0wMSF0V+G+hwAFDAEU8OHYCPgFCYeONQXfBDejuAlPzpCzwLwygPcyQIEZYOLz/4l/e36Vf3VVp7tQqoKpgIkNWEFscRQUVGgWDbjjbti8DtY9LVS8sP4VeP0FRcJjRcF7EBU6EuhNIOqAuz9LWXsWMCpgABUgwEvxfT+A58ogzHuyScfIQf9qzgBMBCZ9v1+OOsC0MiqxYedlA3qbLZmIkmAiECuQ50jAUtCihU5kPp11eX6SE5oHhYE+YUVN6KkK3ZWF3N8prOwSOstCqy5cda/wwKcoMlkANoQcLhOkgjrQVPB1Tzqt80O/MZI1f+wF/dZ/28lOYASY/qA/kHBA9Pxe/DVDpnVcTS81sZBLIiCYIEbAFOANgBTej4WkDGdfaxjeBwe3QSWCjjJUS1CJIbaQtaDt4KqH4f5PU8y0QvEjLmYReAG+BdpQ/LTixj3Zfsezm/i5L/1nfRoYBg4C2Qc1wAdFv7te9z54IoM9iZ5MLAvQUTBCggmhxhChWMAIpJCU4LwbhPKAMDoiTI9DK4dOwVkYOkP4f58nXH0LyIRCVgTNBSBQnO8ZaBt8HfyUko572iMZW3b4v7/p9/RXgJGg+of9lZgFBoA1p/dx/J8+IN84eJw9Px6yxH0G22swVYFEkRiIih/RFCjsDxSIgB6h7YTh3cLYfrARrFwNQ0MKqcKkggcozHsvATxc52QenLbg6wuLXTo2pxHHyE73+r1/pN+5fowdwB5gP+A+7G+ENDyYgw3s6wd4++YhPbNiWEkkh96RMKFbIMgS/hZAZhWbQnc3DK2BwUGlFgFTCg0OdR0TOh+yz2XQVKAtaDOH96HzC/D797h1n/U3+j2vjrAH2AeMAe2P+jO5DPAAO6eQ10d47fp+PanD6KrwVoRosXCQ4AxKgGDxEA77hOKHU1kQIRfhnQldZ94ArYPOeLJJJcvh92Xs3elf++y/1u99ejd7CvN+9uP6nWCbgDFngv7DFl65cZCeLtGTw+YL8QoKooJqwRiRAnwAZRlpkDfgglE5cK62QBP8rKJTC/Bu1JMOOzZv9//w0J/pj881Z28BfhLg4zIAoAV4QMdayM+/wRuX9svkoHXnmIxoAToABjOAYMqi922Kx0t0PptX+P1TYZWfAZfDjyvpfkd9OGv+xwZ+4Zbf1d8aa3AQGAEOABMAH7cBwQRcMML8/jrdnbZ4+bSKDla9rtJwizpCBwn3FtQVOwwohbkNZIAL4O1coE1F6yyAT3vcpCcd9WQjjr27/Ks/+qz+wFf8s74IjAb40Hn0iP5aHOgEVgT1ViydP3U7V15/otzf029OtN0G27nwDiEVwZaAkiAxYDm0iRIAQAGvaDBMU6CluHbofF1xMwsGTBz02/51m/7xF/4tzzYc08A4MBo0DejR+stMDegGeoEeoGtNjdp3Xs/FVxwrt63olXOimpHcBFs1SCJICSTsJXIZAwA+gKNhB9deyK7u5+GzGa+jY/rWc7v1777xX3l5zwwzwBQwEQyYBGb+M/4zlITR0BVM6AzGRF96MSfedaq5+MRevbjWyQmliklMIhA+SZqoOALC/j0DwimsdsO3ZqbZvm1cXv6rTf7lH32ZbUAWQKcD/FQ4bv1n/mnKAJUAH0QV6AASC+YTpzFw7bGsWbvCHNtf1dXVmL4kohZbEoDU0WplzNRTxg7WZe+GUb/r33ex5y82st+BD4CzQD0AB9EA/H+Vf41FwYiOoGq4XAZKQTbIF3IwEUfIQe2gJtAI8LNBDSD7r/rHyYhwQiuoEuCLJpiQi+EAX4QPagDNoBaQ/Xf556gA8SJFIRf3jwBaMCAFspCL0iNV5NGKAI0JkiX2HT4omHHk4/8D9hvljachrR4AAAAASUVORK5CYII=&quot; title=&quot;emoji-wink&quot;&gt;. Para esto podemos crear una clase que herede de &lt;code class=&quot;language-text&quot;&gt;Exception&lt;/code&gt;. Esto nos va a ser útil más adelante.:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExcepcionParticularDelPrograma&lt;/span&gt; inherits &lt;span class=&quot;token class-name&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;y la tiramos como antes:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExcepcionParticularDelPrograma&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mensaje del error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Además, es importante que nuestros mensajes de excepción sean expresivos. Así si algo rompe &lt;img class=&quot;emoji-icon&quot; alt=&quot;emoji-boom&quot; data-icon=&quot;emoji-boom&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, 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&quot; title=&quot;emoji-boom&quot;&gt; sabremos por qué &lt;img class=&quot;emoji-icon&quot; alt=&quot;emoji-grinning&quot; data-icon=&quot;emoji-grinning&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, 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&quot; title=&quot;emoji-grinning&quot;&gt;.&lt;/p&gt;
&lt;p&gt;Ahora, todo bien, pero ¿para qué me sirven en la ejecución del programa? ¿Qué hacen?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Rick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  method &lt;span class=&quot;token function&quot;&gt;aumentarDemencia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unaCantidad&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nivelDeDemencia &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; unaCantidad &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;EstoyReDementeException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    nivelDeDemencia &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; unaCantidad &lt;span class=&quot;token comment&quot;&gt;// nunca será ejecutado si se entra al if anterior&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Luego de tirar la excepción se corta la ejecución del programa. Además, decimos que las excepciones &lt;em&gt;burbujean&lt;/em&gt; por lo que si otro objeto llamó a &lt;code class=&quot;language-text&quot;&gt;aumentarDemencia&lt;/code&gt; de un Rick y ese método lanza la excepción, también cortará el flujo de ejecución para ese objeto.&lt;/p&gt;
&lt;p&gt;Entonces, ¿si lanzamos una excepción esta &lt;em&gt;subirá&lt;/em&gt; indefinidamente? Bueno, en realidad no, porque si esto pasara cada vez que se lanza una excepción terminaría nuestro programa. Así que ahora veremos una forma de manejar excepciones …&lt;/p&gt;
&lt;h1 id=&quot;atrapando-excepciones&quot;&gt;&lt;a href=&quot;#atrapando-excepciones&quot; aria-label=&quot;atrapando excepciones permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Atrapando Excepciones&lt;/h1&gt;
&lt;p&gt;Cuando sabemos qué hacer ante una excepción, tenemos la opción de &lt;strong&gt;atrapar&lt;/strong&gt; la excepción y utilizar otro código que se tiene que ejecutar si ocurrió tal excepción. &lt;img class=&quot;emoji-icon&quot; alt=&quot;emoji-confetti_ball&quot; data-icon=&quot;emoji-confetti_ball&quot; style=&quot;display: inline; margin: 0; margin-top: 1px; position: relative; top: 5px; width: 25px&quot; src=&quot;data:image/png;base64, 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&quot; title=&quot;emoji-confetti_ball&quot;&gt;&lt;br&gt;
En wollok, esto se realiza de la siguiente forma:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// código que puede fallar&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; e &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExcepcionQueQuieroAtrapar&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// código a ejecutar si ocurre ExcepcionQueQuieroAtrapar&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Algo a notar, es que la excepción a atrapar tiene que ser &lt;strong&gt;la que quiero atrapar y lo menos general posible.&lt;/strong&gt; Si atrapo, por ejemplo, &lt;code class=&quot;language-text&quot;&gt;Exception&lt;/code&gt;, seguramente esté atrapando errores que no hubiese querido atrapar (Por ejemplo, división por cero).&lt;/p&gt;
&lt;h2 id=&quot;interfaz&quot;&gt;&lt;a href=&quot;#interfaz&quot; aria-label=&quot;interfaz permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interfaz&lt;/h2&gt;
&lt;p&gt;Una interfaz es un contrato que cumplen dos o más clases u objetos la cual obliga a que estos cumplan con la implementación de un conjunto de métodos.&lt;/p&gt;
&lt;p&gt;Cuando dos objetos o clases tienen una interfaz en común, es posible para un tercero utilizar sus instancias de forma polimórfica, aunque recordemos que el polimorfismo solo está si efectivamente un tercero interactua indistintamente.&lt;/p&gt;
&lt;p&gt;Las interfaces nos sirven para explicitar lógica que debe ser cumplida para quienes las implementen. En algunos lenguajes, las interfaces se escriben en código y existen validaciones de compilación para asegurar su cumplimiento. En &lt;code class=&quot;language-text&quot;&gt;Wollok&lt;/code&gt; no se escriben las interfaces en código, pero en la materia siempre vamos a explicitar las interfaces en el diagrama de clases.&lt;/p&gt;
&lt;p&gt;¿Cuál es la diferencia entre una interfaz y una clase abstracta? Si bien son similares, la clase abstracta tiene como objetivo reutilizar comportamiento, ya que siempre la tenemos en código y la idea es que otras clases puedan heredar de la misma implementando sus métodos. En cambio, el concepto de la interfaz es demostrar partes comunes entre clases u objetos para que puedan ser utilizados polimórficamente.&lt;/p&gt;
&lt;p&gt;En el diagrama de clases, la podemos ver indicada con una &lt;em&gt;I&lt;/em&gt;, en este caso en el Familiar.&lt;/p&gt;
&lt;h2 id=&quot;tarea&quot;&gt;&lt;a href=&quot;#tarea&quot; aria-label=&quot;tarea permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mumuki: &lt;a href=&quot;https://mumuki.io/pdep-utn/lessons/91-programacion-con-objetos-excepciones&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Lección 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1FD4I1kKZKB1REJVXmDA9Aoxzd97uQu7b/view?usp=drivesdk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/clase17-objetos-2020&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.plantuml.com/plantuml/png/bL7RIiD047sVhzZ716m_GHeKmOU2w1TCDbFSk9SmkniGzT-TqBB6sXNw5iwPSzcJNKp8AJiBnYVY0sfI3-YCDSZg0wPC0ptoFNKp-PGPcmFfLsnXDhFX0hOma2El3NPJu8J30dq1T7rCZ3eLovE2E8ZvkQQMTj6zmJwswho6P6gBCQgz7BvBHaIRXxtmQA5wNDf9N3BpqWsNp_0K-Ddejxho9Jj7_mubfw4VnKoDn2oLhdbbFNYfjPeGpCeltWNVJCGnU1pfHlqqkV0RjjlFsp80_5bYiodqMWR7VMliQPOrNIpXkCFltEKv0gsG7VaXE_iD&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Diagrama de clases de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/excepciones.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Wiki excepciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1T87tmdXv_39RoE_zR7alVFK8TUl-KJYOhdoIsoVTRb4/edit#&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Apunte&lt;/a&gt; de excepciones&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.uqbar.org/wiki/articles/clase-abstracta-vs-interfaz.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Clase abstracta vs interfaz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Dieciseisava clase]]></title><description><![CDATA[Tarea para la clase que viene: Entrega 2 del TP cuatrimestral de objetos. Herencia Anteriormente vimos que cuando dos objetos repiten lógica…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-16/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-16/</guid><pubDate>Mon, 05 Oct 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Entrega 2 del TP cuatrimestral de objetos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;herencia&quot;&gt;&lt;a href=&quot;#herencia&quot; aria-label=&quot;herencia permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Herencia&lt;/h2&gt;
&lt;p&gt;Anteriormente vimos que cuando dos objetos repiten lógica, crear una clase puede que sea nuestra solución. Pero, ¿qué hacemos cuando dos clases repiten lógica? Esto es un trabajo para… ¡la superclase! 🦸‍♀️🦸‍♂️&lt;/p&gt;
&lt;p&gt;Al tener lógica repetida entre clases podemos crear una nueva clase con esa lógica, dejando en cada una de las clases iniciales sólo lo particular de cada una. &lt;/p&gt;
&lt;p&gt;Por ejemplo:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Los perros y los gatos al jugar pierden unidades de energía según el tiempo que reciben por parámetro. Al pedirles que emitan un sonido los perros hacen guau (sí, todo muy original) y los gatos… ¡MUUU! 😲 (no, mentira, hacen miau pero casi se la creen 😂).
Pero al llegar su dueño o dueña a casa actúan distinto. Los gatos 🐈 actúan con indiferencia, es decir, no hacen nada. Los perros 🐕 en cambio aumentan en 100 su energía.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Un código posible podría ser:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Gato {
	var energia
	
	method jugar(unTiempo) {
		energia -= unTiempo
	}

	method emitirSonido() {
		return &amp;quot;miau&amp;quot;
	}

	method recibirDueño() {
	}
}

class Perro {
	var energia
	
	method jugar(unTiempo) {
		energia -= unTiempo
	}

	method emitirSonido() {
		return &amp;quot;guau&amp;quot;
	}

	method recibirDueño() {
		energia += 100
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Esa lógica repetida no les hizo doler los ojos? 😵&lt;/p&gt;
&lt;p&gt;Una solución sería crear una clase Animal (no es una frase onda “CREA UNA CLASE ANIMAL!!! MÁQUINA!!! 💪”) que contenga la lógica repetida:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Animal {
	var energia
	var sonido
	
	method jugar(unTiempo) {
		energia -= unTiempo
	}

	method emitirSonido() {
		return sonido
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lo único que faltaría es establecer una relación entre esta nueva clase y las originales definiendo &lt;strong&gt;herencia&lt;/strong&gt; de la siguiente manera: 👇&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Perro inherits Animal {
	var sonido = &amp;quot;guau&amp;quot;
	
	method recibirDueño() {
		energia += 100
	}
}

class Gato inherits Animal {
	var sonido = &amp;quot;miau&amp;quot;
	
	method recibirDueño() { 
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Listo, ¡problema solucionado! 🙌 Ahora vamos a decir que &lt;code class=&quot;language-text&quot;&gt;Animal&lt;/code&gt; es la &lt;strong&gt;superclase&lt;/strong&gt; de &lt;code class=&quot;language-text&quot;&gt;Perro&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;Gato&lt;/code&gt; o, de otra manera, que &lt;code class=&quot;language-text&quot;&gt;Perro&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;Gato&lt;/code&gt; son &lt;strong&gt;subclases&lt;/strong&gt; de &lt;code class=&quot;language-text&quot;&gt;Animal&lt;/code&gt;. Hay que tener en cuenta que cada clase solo puede heredar de una y solo una clase.&lt;/p&gt;
&lt;h2 id=&quot;super&quot;&gt;&lt;a href=&quot;#super&quot; aria-label=&quot;super permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Super&lt;/h2&gt;
&lt;p&gt;Siguiendo con nuestro ejemplo, imaginémonos que aparece la clase &lt;code class=&quot;language-text&quot;&gt;Gallina&lt;/code&gt; 🐔, cada &lt;code class=&quot;language-text&quot;&gt;Gallina&lt;/code&gt; emite el sonido “A River lo sigo a donde va” y cuando juegan también pierde energia, peeero también ponen un huevo 🐣. Entonces tendríamos que redefinir el método &lt;code class=&quot;language-text&quot;&gt;jugar&lt;/code&gt;, pero teniendo en cuenta que una parte de la lógica ya está definida en la superclase &lt;code class=&quot;language-text&quot;&gt;Animal&lt;/code&gt;. Para hacer esto vamos a combinar &lt;code class=&quot;language-text&quot;&gt;override&lt;/code&gt; (para redefinir un método de la superclase) con &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt; (para ver que hace la superclase):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Gallina inherits Animal {
	var sonido = &amp;quot;A River lo sigo a donde va&amp;quot;
	var huevosPuestos = 0

	override method jugar(unTiempo) {
		super(unTiempo)
		huevosPuestos ++
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;redefinición&quot;&gt;&lt;a href=&quot;#redefinici%C3%B3n&quot; aria-label=&quot;redefinición permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Redefinición&lt;/h2&gt;
&lt;p&gt;Acá vemos que la &lt;code class=&quot;language-text&quot;&gt;Gallina&lt;/code&gt; no tiene el método &lt;code class=&quot;language-text&quot;&gt;recibirDueño&lt;/code&gt;, ¿debería? 🤔&lt;/p&gt;
&lt;p&gt;Esto es una decisión de nuestro diseño, si creemos que todos los animales deberían poder recibir dueños (que los animales deban obligatoriamente tener dueños pertenece a un debate que no vamos a tener, recordemos que esto es meramente un ejemplo), debería estar presente en nuestro código. ¿Pero qué hace un animal cualquiera al recibir a su dueño? ¿Hay alguna lógica en común entre todos los animales? ¿Qué escribo en la superclase?&lt;/p&gt;
&lt;p&gt;Claramente no conocemos un comportamiento genérico para todos los animales, pero si queremos que todos los animales sepan recibir a su dueño sin especificar una lógica podemos crear un &lt;strong&gt;método abstracto&lt;/strong&gt; escribiendo solo la &lt;strong&gt;firma&lt;/strong&gt; de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Animal {
	….
	method recibirDueño()
	….
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;❗ ❗ Es importante diferenciar &lt;code class=&quot;language-text&quot;&gt;recibirDueño()&lt;/code&gt; de &lt;code class=&quot;language-text&quot;&gt;recibirDueño() { }&lt;/code&gt;. El segundo no es un método abstracto sino un método vacío. Aquellas clases que tienen métodos abstractos son llamadas &lt;strong&gt;clases abstractas&lt;/strong&gt; y tienen la particularidad de que no pueden ser instanciadas. En nuestro ejemplo podemos tener gallinas, gatos y perros pero no animales a secas.&lt;/p&gt;
&lt;p&gt;Luego de hacer esto es importante redefinir el método en cada subclase con la palabra &lt;code class=&quot;language-text&quot;&gt;override&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Perro inherits Animal {
	var sonido = &amp;quot;guau&amp;quot;
	
	override method recibirDueño() {
		energia += 100
	}
}

class Gato inherits Animal {
	var sonido = &amp;quot;miau&amp;quot;
	
	override method recibirDueño() { 
	}
}

class Gallina inherits Animal {
	var sonido = &amp;quot;A River lo sigo a donde va&amp;quot;
	var huevosPuestos = 0

	override method jugar(unTiempo) {
		super(unTiempo)
		huevosPuestos ++
	}

	override method recibirDueño() { 
		huevosPuestos = 0 /* el dueño llega y le roba los huevos*/
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;method-lookup&quot;&gt;&lt;a href=&quot;#method-lookup&quot; aria-label=&quot;method lookup permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method lookup&lt;/h2&gt;
&lt;p&gt;Hasta ahora vimos que cuando le enviamos un mensaje a un &lt;strong&gt;well known object&lt;/strong&gt; busca el método en la definición de ese objeto 🔎. Si se lo enviamos a una &lt;strong&gt;instancia&lt;/strong&gt;, lo busca en la clase a la que pertenece. Esto sigue siendo correcto, pero también aprendimos que si el método no está definido en la clase de la cual el objeto es instancia buscará en la superclase, y en caso que no esté seguirá buscando “para arriba” en la jerarquía de clases 🕵️‍♀️🕵️‍♂️. En caso que la superclase más super de todas, es decir, la clase &lt;code class=&quot;language-text&quot;&gt;Object&lt;/code&gt; no defina ese método obtendremos el famoso error &lt;code class=&quot;language-text&quot;&gt;wollok.lang.MessageNotUnderstoodException&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;diagrama-de-clases&quot;&gt;&lt;a href=&quot;#diagrama-de-clases&quot; aria-label=&quot;diagrama de clases permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Diagrama de clases&lt;/h2&gt;
&lt;p&gt;El diagrama de clases es una herramienta que nos permite modelar nuestra solución a partir de un esquema. En el mismo encontraremos las clases, objetos e interfaces (aún no vieron este tema), sus atributos, sus métodos y cómo se relacionan estos componentes. Es una manera de representar nuestras soluciones más allá del código.&lt;/p&gt;
&lt;p&gt;En esta clase en particular vimos cómo representar clases concretas, clases abstractas, objetos y las flechas de “hereda de” y “tiene”.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1DHstVgBAM4rVCH2kNAC9zwWXoCJdkazb/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/clase16-objetos-2020&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.plantuml.com/plantuml/png/ZL5DJy9043splwBXr1fxq1z0842CYGI3mVlGZhXakukpirpG_-uiz4DBWbxQ-PWtR-UziMSW3fLHaurdWeAJPoJlBEmmEIgqI5iDIji3MfdKJcr9ivlXgoxOaRG6_KgQDJ29M4iyRrCJYdUWgRD2bU97q7kNgJrIYTGC5M1Pbr1cgebcE3TO2R_piY8OrfLhAbAGBGoqxfKJLO5rauLyQZh7v9uYV-aeKrzAJGrutvsxV4FhzS4bnmkekGARuGkOK7PYJLPO1Ba9w3zxfgxQ0AF0ptBSrVzxLPmwcjAea44GXPWm3NP-6hXDua7dEAj13s3Z-iw1Sxl5P68auvP0ldu1VeLUUyQODMuCBfucoX8S_tv3KXkvjeyjISSSroutEomuOKSYydL_BcqMV0Jc-UUerLxrpUkr-oRzxlwyBtRglAdd-MXuC-p6nsZBK9bl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Diagrama de clases de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-noche-mavi/tutorial-plantuml&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Instructivo Plant UML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1KdG7NrKPgPh4bAcyLuDG2G1iWP7Ze2GFs91qzlvDKqI/edit#heading=h.mpvsrdz55x8g&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Herencia, super, redinifición y method lookup en Wollok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Quinceava clase]]></title><description><![CDATA[Tarea para la clase que viene: Corregir la entrega 1 del TP cuatrimestral de objetos. Corregir la tarea Batalla de estrellas. Clases ¿Cómo…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-15/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-15/</guid><pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Corregir la entrega 1 del TP cuatrimestral de objetos.&lt;/li&gt;
&lt;li&gt;Corregir la tarea Batalla de estrellas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;clases&quot;&gt;&lt;a href=&quot;#clases&quot; aria-label=&quot;clases permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Clases&lt;/h2&gt;
&lt;p&gt;¿Cómo hacemos para no repetir lógica entre objetos que hacen las mismas cosas? 😩
El paradigma orientado a objetos nos provee un mecanismo para resolver la repetición de comportamiento, ¡las &lt;strong&gt;clases&lt;/strong&gt;! 🙌
Gracias a este nuevo concepto podemos abstraer la lógica repetida en un mismo “molde” para crear &lt;em&gt;instancias&lt;/em&gt; a partir de él.&lt;/p&gt;
&lt;p&gt;Es importante tener en cuenta que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Todo objeto es siempre instancia de &lt;strong&gt;una y sólo una&lt;/strong&gt; clase. &lt;/li&gt;
&lt;li&gt;No se puede cambiar la clase de un objeto en tiempo de ejecución. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;instanciación&quot;&gt;&lt;a href=&quot;#instanciaci%C3%B3n&quot; aria-label=&quot;instanciación permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Instanciación&lt;/h2&gt;
&lt;p&gt;Si definimos una clase y queremos utilizar un caso concreto de la misma para poder mandarle mensajes necesitamos crear una &lt;strong&gt;instancia&lt;/strong&gt; 😄. Las clases no sólo nos permiten definir el comportamiento y los atributos de los objetos, también sirven para crear los mismos para luego utilizarlos en nuestro programa. ✨&lt;/p&gt;
&lt;p&gt;No es necesario asignar cada instancia que creemos en una variable, eso depende de lo que estemos tratando de hacer 😉. Podríamos, por ejemplo, crear un objeto dentro de un método y retornarlo directamente, o crearlo para mandarle un mensaje directamente.&lt;/p&gt;
&lt;h2 id=&quot;introducción-a-method-lookup&quot;&gt;&lt;a href=&quot;#introducci%C3%B3n-a-method-lookup&quot; aria-label=&quot;introducción a method lookup permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Introducción a method lookup&lt;/h2&gt;
&lt;p&gt;Cuando le enviamos un mensaje a un objeto que es instancia de una clase, busca el método correspondiente en la clase a la cual pertenece. 🔝&lt;/p&gt;
&lt;h2 id=&quot;diagrama-de-clases&quot;&gt;&lt;a href=&quot;#diagrama-de-clases&quot; aria-label=&quot;diagrama de clases permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Diagrama de clases&lt;/h2&gt;
&lt;p&gt;Hasta ahora siempre estuvimos trabajando con un diagrama dinámico, conocido como diagrama de objetos. Ahora que creamos clases vamos a utilizar una nueva herramienta que nos permite modelar nuestra solución con un diagrama estático, el &lt;strong&gt;diagrama de clases&lt;/strong&gt;. En este reflejaremos cómo interactúan nuestras clases y cuáles son los atributos y mensajes correspondientes a cada una. 🙆‍♀️🙆‍♂️&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1HKDspM8saxs8NPuUolgPKIM9q6rXvkZJ/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/clase15-objetos-2020&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1Dgq_PfCbJHO1M7dXe-vGXtj4mbEUWlYhfvQ2i0RWOsk/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Clases + method look up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/11c9l3sqgUIFDx1J_ULCSS86faMQXAyOV3uesg-nwaSY/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Instanciación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Catorceava clase]]></title><description><![CDATA[Tarea para la clase que viene: Realizar la primera entrega del TP “Barrilete cósmico” para la semana que viene. Se hace en grupo y se tiene…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-14/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-14/</guid><pubDate>Mon, 14 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Realizar la primera entrega del TP &lt;a href=&quot;https://docs.google.com/document/d/19idVZfZyYSsX0kuNScqfj9nfIG4i7KikPKBRmvWEq_M/edit#&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;“Barrilete cósmico”&lt;/a&gt; para la semana que viene. Se hace en grupo y se tiene que subir a GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;¿qué-hicimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-hicimos-hoy&quot; aria-label=&quot;¿qué hicimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué hicimos hoy?&lt;/h2&gt;
&lt;p&gt;Repasamos todos los conceptos del paradigma de objetos vistos hasta ahora con el TP individual &lt;a href=&quot;https://docs.google.com/document/d/10q-nDvhFtHZ6gpRRjog5p8OfdSJnBWIvH50asRYJZqs/edit#heading=h.hbdipc4cvuwl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;“Batalla de Estrellas”&lt;/a&gt;.
No se subirá la resolución del mismo.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Treceava clase]]></title><description><![CDATA[Tarea para la clase que viene: Hacer TP “Se dice atómico” para la semana que viene. Se hace en grupo y se tiene que subir a GitHub…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-13/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-13/</guid><pubDate>Mon, 07 Sep 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hacer &lt;a href=&quot;https://docs.google.com/document/d/1t68f9LUYqQLJLxJhGXonayhE7REey4NV7Yzh06KvD2c/edit#heading=h.kva2cspa7p76&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP “Se dice atómico”&lt;/a&gt; para la semana que viene. Se hace en grupo y se tiene que subir a GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;colecciones&quot;&gt;&lt;a href=&quot;#colecciones&quot; aria-label=&quot;colecciones permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Colecciones&lt;/h2&gt;
&lt;p&gt;En Wollok contamos con dos tipos de colecciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;listas&lt;/em&gt;: en donde los elementos tienen un orden y puede haber elementos repetidos. Se definen mediante el literal &lt;code class=&quot;language-text&quot;&gt;[ ]&lt;/code&gt;, por ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; bolsaDelSuper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;leche&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; manteca&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jugo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jugo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; jugo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;conjuntos&lt;/em&gt;: no hay orden en los elementos y no puede haber elementos repetidos. Se definen mediante el literal &lt;code class=&quot;language-text&quot;&gt;#{ }&lt;/code&gt;, por ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; numeros &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; #&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En ambos casos, la colección agrupa referencias a los objetos y no al objeto en sí.&lt;/p&gt;
&lt;p&gt;Hicimos un ejercicio para conocer y practicar los mensajes que entienden las colecciones. Entre ellos estaban, &lt;code class=&quot;language-text&quot;&gt;size&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;add&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;remove&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;forEach&lt;/code&gt; y se pueden encontrar en la &lt;a href=&quot;https://docs.google.com/document/d/1oJ-tyQJoBtJh0kFcsV9wSUpgpopjGtoyhJdPUdjFIJQ/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;guía de lenguajes&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;¿Qué diferencia hay entre &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;forEach&lt;/code&gt;? El primero lo usamos para devolver una lista y &lt;strong&gt;no&lt;/strong&gt; queremos que haya efecto y el segundo para cuando queremos afectar a un conjunto de objetos. &lt;/p&gt;
&lt;h2 id=&quot;testing&quot;&gt;&lt;a href=&quot;#testing&quot; aria-label=&quot;testing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Testing&lt;/h2&gt;
&lt;p&gt;¡Qué fiaca probar todo lo que hacíamos en la consola! 😫 Por suerte, aprendimos a hacer que la compu lo haga por nosotros (o casi 😝). Gracias a los &lt;em&gt;tests&lt;/em&gt; podemos &lt;strong&gt;automatizar&lt;/strong&gt; probar nuestro código para saber si lo que escribimos se corresponde con lo que realmente queríamos hacer.
En Wollok se hacen en un archivo a parte con extensión &lt;code class=&quot;language-text&quot;&gt;.wtest&lt;/code&gt;. Tenemos que tener en cuenta de escribir un nombre descriptivo para el test así es más fácil saber dónde nos equivocamos cuando falle.
¿Y por qué son tan importantes? 😅 Si vamos a modificar cosas en nuestro código, los tests son una manera de verificar que todo andaba antes y después del cambio.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1DmWOFVi-vSS1uHPEqFVZgNGuxhJLnKnj/view?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/clase3-objetos-2020&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1MLbx1Fxt7I_uVg6Yv9hYfIu2IIbUQqqICbOM3s969D8/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Colecciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1caDE_mlP1QMfzyVpyvh-tKshjAeYLXBkXDYrTX5zFUI/edit#heading=h.54t50i579i9f&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Testing (Explicación de &lt;code class=&quot;language-text&quot;&gt;describe&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;fixture&lt;/code&gt; incluída)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Doceava clase]]></title><description><![CDATA[¿Qué vimos hoy? Identidad vs Igualdad : decimos que dos objetos son idénticos si son el mismo objeto. Dentro del ambiente podemos tener dos…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-12/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-12/</guid><pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Identidad vs Igualdad&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Identidad&lt;/code&gt;: decimos que dos objetos son idénticos si son el mismo objeto. Dentro del ambiente podemos tener dos referencias diferentes al mismo objeto. En Wollok el operador usado para comparar dos objetos por identidad es ===.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Igualdad&lt;/code&gt;: (o equivalencia) por defecto dos objetos son iguales si son idénticos, o sea si son el mismo objeto. Al mismo tiempo dos objetos que no son idénticos pueden ser iguales. La igualdad == puede ser redefinida para que funcione acorde a nuestro dominio.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object lanzamientoWindows98 {
	const property dia = 25
	const property mes = 6
	const property anio = 1998
	
	override method ==(otroDia) {
		return dia  == otroDia.dia()
			&amp;amp;&amp;amp; mes  == otroDia.mes()
			&amp;amp;&amp;amp; anio == otroDia.anio()
	}
}

object fechaDeNacimiento {
	const property dia = 25
	const property mes = 6
	const property anio = 1998
	
	override method ==(otroDia) {
		return dia  == otroDia.dia()
			&amp;amp;&amp;amp; mes  == otroDia.mes()
			&amp;amp;&amp;amp; anio == otroDia.anio()
	}	
}

// Sin redefinir el ==
&amp;gt; lanzamientoWindows98 == fechaDeNacimiento // =&amp;gt; false
&amp;gt; lanzamientoWindows98 === fechaDeNacimiento // =&amp;gt; false

// Redefiniendo el ==
&amp;gt; lanzamientoWindows98 == fechaDeNacimiento // =&amp;gt; true
&amp;gt; lanzamientoWindows98 === fechaDeNacimiento // =&amp;gt; false, siguen sin ser el mismo objeto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para probar esto vamos a retomar el ejercicio anterior donde teníamos mascotas y personas que eran dueñas de mascotas. Vamos a introducir un par de cambios, vamos a hacer que los dueños puedan cambiar de mascota y que nos digan si pueden o no jugar con sus mascotas. Una persona puede jugar con su mascota siempre y cuando su energía esté por arriba de 100 y la mascota tenga más de 80 de energía.&lt;/p&gt;
&lt;p&gt;Si billy pasa a tener a sally como mascota vemos que en el diagrama tanto él como mandy “apuntan”/”conocen” a la misma mascota. Como ambos tienen a la misma mascota (el mismo objeto) lo que haga uno con esa mascota afecta a lo que pueda hacer el otro.&lt;/p&gt;
&lt;p&gt;Si billy juega dos veces con sally ahora mandy no puede jugar.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;billy.mascota(sally)
billy.jugarConMascota()
billy.jugarConMascota()
mandy.puedeJugar() // =&amp;gt; false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Realizamos el ejercicio &lt;code class=&quot;language-text&quot;&gt;PDEPCargas&lt;/code&gt; y vimos los siguientes conceptos:&lt;/p&gt;
&lt;p&gt;Self&lt;/p&gt;
&lt;p&gt;Empezando a realizar el objeto &lt;code class=&quot;language-text&quot;&gt;camionDeGanado&lt;/code&gt;, podríamos pensar esto como primera opción:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object camionGanado {
  var kilometraje = 700000
  var cantidadVacas = 10

  method pesoCarga() = cantidadVacas * 600

  method velocidadMaxima() = 80 - (cantidadVacas * 600) / 1000
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esto nos presenta un problema: Tenemos una repetición de lógica entre &lt;code class=&quot;language-text&quot;&gt;velocidadMaxima&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;pesoCarga&lt;/code&gt;. ¿Cómo podríamos llamar a ese mensaje?&lt;/p&gt;
&lt;p&gt;una opción podría ser &lt;code class=&quot;language-text&quot;&gt;camionGanado.pesoCarga()&lt;/code&gt;, pero vemos que wollok nos indica un warning:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Don’t use the name within the object. Use ‘self’ instead.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Self es una manera con la cual el objeto se conoce a sí mismo. Con self, puedo enviar mensajes que entienda el propio objeto, para poder abstraer lógica repetida en otros métodos del mismo objeto. self es una referencia al mismo objeto.&lt;/p&gt;
&lt;p&gt;Esto, con self, se puede resolver de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object camionGanado {
  var kilometraje = 700000
  var cantidadVacas = 10

  method pesoCarga() = cantidadVacas * 600

  method velocidadMaxima() = 80 - self.pesoCarga() / 1000
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hacemos el resto de los camiones, haciendo los métodos con las firmas necesarias (por ejemplo, &lt;code class=&quot;language-text&quot;&gt;recorrerRuta&lt;/code&gt; podría tener diferentes firmas y no estar en el &lt;code class=&quot;language-text&quot;&gt;scannion5000&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Puesto rutatlántica&lt;/p&gt;
&lt;p&gt;Arrancando el puesto, podríamos hacer un primer approach:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object rutatlantica {
  method pasar(unCamion) {
    pdepCargas.cobrar(7000 + 100 * unCamion.pesoCarga() / 1000)
    if (unCamion == camionGanado) {
       unCamion.kilometraje(unCamion.kilometraje() + 400)
    } else if (unCamion == camionCerealero) {
       unCamion.nivelDeDeterioro(unCamion.nivelDeDeterioro() + 0.max(unCamion.velocidadMaxima().min(75) - 45))
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hay un poco de ruido en esta solución: ¿Es necesario que comparemos camión por camión para saber qué lógica implementar? ¿Está bien que esta lógica la implemente el puesto? ¿Está bien que el puesto modifique el estado de los camiones?&lt;/p&gt;
&lt;p&gt;La respuesta, según el concepto &lt;code class=&quot;language-text&quot;&gt;encapsulamiento&lt;/code&gt;, es no.&lt;/p&gt;
&lt;p&gt;El &lt;code class=&quot;language-text&quot;&gt;encapsulamiento&lt;/code&gt; es la manera con la cual un objeto sólo usa lo que necesita de otro objeto para poder interactuar con éste. Es decir, utiliza la &lt;code class=&quot;language-text&quot;&gt;interfaz&lt;/code&gt; (mensajes que entiende) del objeto para interactuar con él. Cada objeto es responsable de su propio estado, y no el de otros.&lt;/p&gt;
&lt;p&gt;La &lt;code class=&quot;language-text&quot;&gt;responsabilidad&lt;/code&gt;, a nivel objetos, son las cosas que el objeto es responsable de hacer. Por ejemplo, el puesto rutatlantica en este caso NO es responsable de cambiar el kilometraje de los camiones, pero SI es responsable de cobrarle a pdepCargas una cantidad que debe calcular.&lt;/p&gt;
&lt;p&gt;Podríamos hacer un segundo approach:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object rutatlantica {
  method pasar(unCamion) {
    pdepCargas.cobrar(7000 + 100 * unCamion.pesoCarga() / 1000)
    unCamion.recorrerRuta(400, unCamion.velocidadMaxima().min(75))
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora vemos que le vamos a querer decir a un camión que recorra una ruta. ¿Esto funciona para todos los camiones que hicimos? ¿Qué pasa con la firma del método en los diferentes camiones? ¿Y si no definimos el método?&lt;/p&gt;
&lt;p&gt;¿Queremos que el método funcione para todos los camiones? Sí, ya que a todo camión que pase por el puesto se le debe mandar un mensaje para que recorra 400 kms y a 75 km/h como máximo.&lt;/p&gt;
&lt;p&gt;De esto surge el &lt;code class=&quot;language-text&quot;&gt;polimorfismo&lt;/code&gt;: Queremos que &lt;code class=&quot;language-text&quot;&gt;recorrerRuta(kilometraje, velocidad)&lt;/code&gt; lo entiendan todos los camiones, para que rutatlántica los pueda usar indistintamente. Es decir, el &lt;code class=&quot;language-text&quot;&gt;polimorfismo&lt;/code&gt; en objetos es la capacidad de que un objeto pueda utilizar indistintamente a otros objetos, siendo que potencialmente estos otros sean distintos. Con esto en mente, deberíamos cambiar el método &lt;code class=&quot;language-text&quot;&gt;recorrerRuta&lt;/code&gt; en todos los camiones:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object camionGanado {
	method recorrerRuta(extension, velocidad){
		kilometraje = kilometraje + extension
	}
}
object scanion5000 {
	method recorrerRuta(extension, velocidad){
		// no hace nada
	}
}

object camionCerealero {

	method recorrerRuta(extension, velocidad){
		nivelDeterioro += 0.max(velocidad - 45)
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Veamos bien qué es lo que está haciendo el método pasar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se encarga de realizar el cobro a pdepCargas&lt;/li&gt;
&lt;li&gt;Realiza el cálculo para saber cuánto hay que cobrarle&lt;/li&gt;
&lt;li&gt;Le dice a un camión que recorra una ruta&lt;/li&gt;
&lt;li&gt;Calcula la velocidad a la cual el camión debe de recorrer la ruta&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dentro de estas cuatro cosas que está haciendo el método &lt;code class=&quot;language-text&quot;&gt;pasar()&lt;/code&gt;, ¿Es &lt;code class=&quot;language-text&quot;&gt;responsable&lt;/code&gt; el método de hacerlo todo? ¿A qué nos referimos por &lt;code class=&quot;language-text&quot;&gt;responsable&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Nos referimos por &lt;code class=&quot;language-text&quot;&gt;responsabilidad&lt;/code&gt;, en métodos, a eso que el método debe de hacer. Es decir, por ejemplo, que nuestro método &lt;code class=&quot;language-text&quot;&gt;pasar()&lt;/code&gt; tiene responsabilidad “de más”: Cuando pasa un camión sólo le queremos cobrar a pdepCargas una cantidad y decirle al camión que recorra la ruta. El resto de la lógica podríamos abstraerla, para poder tener un código más legible y con métodos con sus respectivas “responsabilidades”.&lt;/p&gt;
&lt;p&gt;Esto se vería de la siguiente manera:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object rutatlantica {
	method pasar(unCamion) {
	  pdepCargas.cobrar(self.costo(unCamion))
	  unCamion.recorrerRuta(400, self.velocidadQuePasa(unCamion))
	}

	method velocidadQuePasa(unCamion) {
	  return unCamion.velocidadMaxima().min(75)
	}

	method costo(unCamion) {
	  return 7000 + 100 * unCamion.pesoCarga() / 1000
	}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1gFTPSS11aW4aT1XUbvFZbK9DPq1Zmv_X/view?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/1TIcIGa_rabX2MK9lR-AIDlhsCQ56a6HmakGah_zyl6g/edit#&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Pdep cargas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Onceava clase]]></title><description><![CDATA[¿Qué vimos hoy? Así como en funcional teníamos funciones y en lógico teníamos reglas lógicas, como sugiere el nombre, en esta parte de la…]]></description><link>https://pdep-lunes.github.io/bitacora/objetos/clase-11/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/objetos/clase-11/</guid><pubDate>Mon, 10 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Así como en funcional teníamos funciones y en lógico teníamos reglas lógicas, como sugiere el nombre, en esta parte de la materia vamos a estar trabajando con objetos. Empecemos creando un objeto simple:&lt;/p&gt;
&lt;p&gt;Tenemos a Poroto, el perro de una familia 🐕. Por lo pronto tenemos la siguiente información acerca de Poroto: tiene 4 años y 100 de energía (porque todos los perros necesitan energía para hacer cosas, claro). Entonces, vamos a decir que poroto tiene como &lt;strong&gt;atributos&lt;/strong&gt; edad y energía. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object poroto {
  var energia = 100
  var edad = 4
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Y qué podemos hacer con poroto? Por ahora no mucho 😅. Estaría bueno que sepa hacer más cosas, como jugar. ¿Y cómo hacemos que poroto juegue? 🤔 Se lo tenemos que decir (poroto, jugá! 🗣️) y la forma que tenemos para decirle a un objeto que haga algo es &lt;strong&gt;enviándole un mensaje&lt;/strong&gt;, y esto se hace así:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;poroto.jugar()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Los mensajes siempre son enviados a un objeto y son la manera de comunicarnos con los mismos.&lt;/p&gt;
&lt;p&gt;Si corremos el código anterior, ¿qué pasa?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ERROR: poroto does not understand jugar() (line: 4)&lt;/code&gt; 💥&lt;/p&gt;
&lt;p&gt;Claro, le dijimos a poroto que juegue, pero nunca le “enseñamos” cómo hacerlo 👨‍🏫👩‍🏫. De alguna forma le tenemos que decir qué es lo que queremos que haga cuando le digamos que juegue, y esto lo hacemos con lo que llamamos un &lt;strong&gt;método&lt;/strong&gt;. Repasando: un método es lo que un objeto hace cuando le enviamos un mensaje particular. Enseñémosle entonces a poroto a jugar. Vamos a querer que cuando poroto juegue, su energía baje 20 unidades. Esto en el código se escribe así: 👨‍💻👩‍💻&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object poroto {
  var energia = 100
  var edad = 4

  method jugar() {
    energia = energia - 20 // o energia -= 20
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Buenísimo, ahora que poroto sabe jugar, enviemosle el mensaje de nuevo.&lt;/p&gt;
&lt;p&gt;Ahora queremos ver si su energía cambió, por lo que deberíamos preguntarle a poroto cuál es su energía. Para esto vamos a tener que declarar un &lt;em&gt;getter&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;method energia() {
  return energia
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si quisiéramos cambiarla, haríamos un &lt;em&gt;setter&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;method energia(unaEnergia) {
  energia = unaEnergia
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Este tipo de métodos en los que accedemos al valor de un atributo o lo modificamos se llaman &lt;em&gt;accessors&lt;/em&gt;. No es necesario que todos los atributos tengan los suyos, sólo aquellos que los necesitan.&lt;/p&gt;
&lt;p&gt;Ahora, vamos a crear otro objeto: vamos a crear al dueño de poroto, Billy. De Billy conocemos su edad, su comida favorita, su energía y su mascota.
Sabemos que Billy puede jugar con poroto, entonces podemos hacer un método que sea &lt;code class=&quot;language-text&quot;&gt;jugarConMascota&lt;/code&gt;, el cual haga que Billy pierda 50 de energía (se cansa más rápido que su perro) y también hace que poroto juegue.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object billy {
  var edad = 12
  const comidaFavorita = &amp;quot;asado&amp;quot;
  var energia = 200
  var mascota = poroto

  method jugarConMascota() {
    energia -= 50
    mascota.jugar()
  }

  method mascota() {
    return mascota;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Como vemos acá, Billy le está mandando un mensaje a su mascota, que en este caso es poroto. Billy le dijo a su mascota jugá y Poroto jugó.
Ahora agregamos a Mandy que tiene como mascota a su perra Sally que empieza con la misma energía y edad que poroto y pierde la misma energía al jugar. Hacemos que mandy juegue con su mascota dejando a Sally con el mismo estado que Poroto.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;object mandy {
   var edad = 15
   const comidaFavorita = &amp;quot;milanesa&amp;quot;
   var energia = 200
   var mascota = sally

  method jugarConMascota() {
    energia -= 30
    mascota.jugar()
  }
 
  method mascota() {
    return mascota;
  }
}

object sally {
  var energia = 100
  var edad = 4

  method jugar() {
    energia = energia - 20
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/clase1-objetos-2020&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1n86oHvWveNmiK6j91OkqOLm7d8m2MMt5/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Décima clase]]></title><description><![CDATA[Tarea: Entregar la segunda parte del TP grupal para el lunes que viene (20/07). ¿Qué vimos hoy? Listas findall findall y listas Ahora…]]></description><link>https://pdep-lunes.github.io/bitacora/logico/clase-10/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/logico/clase-10/</guid><pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea&quot;&gt;&lt;a href=&quot;#tarea&quot; aria-label=&quot;tarea permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Entregar la &lt;a href=&quot;https://docs.google.com/document/d/1nGpaTRQlGVXMOqAmUyXeHePva_ilNVlUs_zbc08k1Lg/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;segunda parte del TP grupal&lt;/a&gt; para el lunes que viene (20/07).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Listas&lt;/li&gt;
&lt;li&gt;findall&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;findall-y-listas&quot;&gt;&lt;a href=&quot;#findall-y-listas&quot; aria-label=&quot;findall y listas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;findall y listas&lt;/h2&gt;
&lt;p&gt;Ahora queremos saber el puntaje de un autor, este se calcula como &lt;code class=&quot;language-text&quot;&gt;3 * cantidad de obras best seller que escribió.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Recordemos, que en nuestra base de conocimientos, contamos con un predicado &lt;code class=&quot;language-text&quot;&gt;esBestSeller/1&lt;/code&gt; que nos dice si una obra es best seller.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;esBestSeller(UnaObra) :-
  copiasVendidas(UnaObra, CantidadVendida),
  CantidadVendida &amp;gt; 50000.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por ende, podemos arrancar escribiendo un predicado que nos diga las obras que escribió un autor que son best sellers:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;escribioBestSeller(Autor, Obra):-
    escribio(Autor, Obra),
    esBestSeller(Obra).).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y en nuestra consola podemos hacer consultas como esta:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;escribioLibroBestSeller(Artista, Obra).
Artista = elsaBornemann,
Obra = socorro ;
Artista = neilGaiman,
Obra = sandman ;
Artista = alanMoore,
Obra = watchmen ;
Artista = brianAzarello,
Obra = cienBalas ;
Artista = frankMiller,
Obra = elCaballeroOscuroRegresa ;
Artista = frankMiller,
Obra = batmanAnioUno ;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si bien, como &lt;code class=&quot;language-text&quot;&gt;escribioBestSeller&lt;/code&gt; es inversible, podemos consultar por los valores que puede tomar la variable Obra. ¿Pero cómo podríamos trabajar con todas las obras best seller que escribió un autor al mismo tiempo? Bueno, ¡podríamos agruparlo en una lista!&lt;/p&gt;
&lt;p&gt;Para lograr esto contamos con un predicado llamado &lt;code class=&quot;language-text&quot;&gt;findall/3&lt;/code&gt;. Este se escribe de la forma &lt;code class=&quot;language-text&quot;&gt;findall(Formato, Consulta, Lista)&lt;/code&gt; y es inversible para su último argumento. Al igual que forall, findall es un predicado de orden superior, ya que su segundo parámetro es una consulta. La idea del findall es generar los individuos que cumplan con la consulta y agruparlos en una lista.  &lt;/p&gt;
&lt;p&gt;Entonces, ahora podríamos escribir un predicado &lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribio/2&lt;/code&gt; que relacione a un autor con todos las obras que escribió y que además son best sellers.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribio(Autor, Obras):-
    escribio(Autor, _),
    findall(Obra, escribioBestSeller(Autor, Obra), Obras).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y podemos consultar:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;?- obrasBestSellerQueEscribio(Artista, Obras).
Artista = elsaBornemann,
Obras = [socorro] ;
Artista = neilGaiman,
Obras = [sandman, americanGods, buenosPresagios] ;
Artista = alanMoore,
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora, la cantidad de obras best seller que escribió ese autor sería el tamaño de esa lista.
Y bueno, ¿cómo creen que prolog podría relacionar a una lista con su tamaño?
Sí, ¡con un predicado 🤩! Contamos con &lt;code class=&quot;language-text&quot;&gt;length(Lista, Tamanio)&lt;/code&gt;, que es inversible para el tamaño.&lt;/p&gt;
&lt;p&gt;Entonces podríamos escribir:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cantidadDeObrasBestSeller(Autor, Cantidad):-
    obrasBestSellerQueEscribio(Autor, UnasObras),
    length(UnasObras, Cantidad).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y ahora, por fin, ya podemos resolver nuestro problema inicial 😝:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;puntaje(Autor, Puntaje):-
    cantidadDeObrasBestSeller(Autor, Cantidad),
    Puntaje is 3 * Cantidad.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Volamos un segundo a analizar &lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribio&lt;/code&gt;. ¿Por qué es necesario generar al autor? Probemos qué pasa sin generarlo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;?- obrasBestSellerQueEscribio(Autor, Obras).
Obras = [socorro, sandman, watchmen, cienBalas, elCaballeroOscuroRegresa, batmanAnioUno, americanGods, buenosPresagios, buenosPresagios|...].&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Qué es lo que estamos haciendo mal? Al no ligar la variable autor a cada uno de los individuos, la pregunta que estamos haciendo en este caso es: ¿Cuáles son obras best seller? cuando lo que realmente se quiere lograr es ¿Cuáles son obra best seller de cada Autor?&lt;/p&gt;
&lt;p&gt;En el segundo parámetro del findall, podemos llegar a necesitar consultas más complejas. Por ejemplo, además de best sellers queremos que también le gusten a gus, por lo que vamos a hacer obrasBestSellerQueEscribioQueLeGustanAGus 🥵:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribioQueLeGustanAGus(Autor, Obras):-
    escribio(Autor, _),
    findall(Obra, (escribioBestSeller(Autor, Obra), leGustaA(gus, Obra)), Obras).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Es importante ver que muy probablemente si tenemos consultas compuestas en un findall, nos convendría delegar en una consulta que las abarque a ambas:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribioQueLeGustanAGus(Autor, Obras):-
    escribio(Autor, _),
    findall(Obra, esBestSellerDelGustoDeGus(Autor, Obra), Obras).

esBestSellerDelGustoDeGus(Autor, Obra):-
	escribioBestSeller(Autor, Obra), 
	leGustaA(gus, Obra).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Además de poder generar conjuntos, también podemos utilizar listas con individuos dentro de nuestro modelado. Para mostrar esto, vamos a introducir las obras fantásticas, las cuáles cuentan con un conjunto de elementos mágicos. Agreguemos el nuevo tipo de obra:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;%fantastica(ElementosMágicos)
esDeTipo(sandman, fantastica([yelmo, bolsaDeArena, rubi])).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vamos a agregar un nuevo tipo copado para las obras fantásticas: aquellas obras que tengan un rubi. ¿Cómo podemos saber si una lista incluye un elemento? Tan simple como usar el predicado &lt;code class=&quot;language-text&quot;&gt;member/2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;esTipoCopado(fantastica(ElementosFantasticos)):-
  member(rubi, ElementosFantasticos).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Es importante tener cuidado con el uso de member. Un clásico error del paradigma lógico es utilizar un member con un conjunto armado con un findall. Cuando queremos utilizar un findall para tener un conjunto, nunca deberíamos querer saber si un elemento está dentro de ese conjunto ya que contábamos con la condición para saberlo previamente. Sigamos el siguiente ejemplo: quiero saber si una obra es best seller del gusto de gus:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;obrasBestSellerQueEscribioQueLeGustanAGus(Autor, Obras):-
    escribio(Autor, _),
    findall(Obra, (esBestSeller(Autor, Obra), leGustaA(gus, Obra)), Obras).

esBestSellerDelGustoDeGus(Obra):-
  obrasBestSellerQueEscribioQueLeGustanAGus(_, Obras),
  member(Obra, Obras).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Este modelo es incorrecto conceptualmente: estamos armando una lista para preguntar si un elemento está en la misma cuando podíamos resolver directamente con una consulta:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;esBestSellerDelGustoDeGus(Obra):-
  esBestSeller(Obra),
  leGustaA(gus, Obra).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No necesitábamos una lista para poder cumplir el requerimiento. En este caso, nuestra solución es mucho más declarativa. &lt;/p&gt;
&lt;p&gt;Para terminar de aclarar los conceptos, vamos a realizar otro ejercicio. Queremos saber el promedio de copias que vendió un autor en toda su vida. Para ello, podemos empezar armando un predicado que relacione un autor con cada cantidad de copias vendida por obra:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;vendio(Autor, Copias):-
    escribio(Autor, Obra),
    copiasVendidas(Autor, Copias).&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Con esta información podemos armar el conjunto de copias vendidas de cada autor. ¿Y cómo sumamos la lista para obtener el promedio? ¡Fácil! Prolog nos da &lt;code class=&quot;language-text&quot;&gt;sum_list&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;promedioCopiasVendidas(Autor, Promedio):-
    escribio(Autor, _),
    findall(Copias, vendio(Autor, Copias), ListaCopias),
    sum_list(ListaCopias, TotalCopias)
    length(ListaCopias, Cantidad)
    Promedio is TotalCopias/Cantidad.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/obras/blob/master/obras.pl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/12-Zgt-FIicdu_3-lt13JuHoA7Q0zlW1f/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---listas.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Listas y findall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Novena clase]]></title><description><![CDATA[Tarea: Entregar la primera parte del TP grupal para el lunes que viene (13/7). ¿Qué vimos hoy? Forall Functores is Pattern Matching…]]></description><link>https://pdep-lunes.github.io/bitacora/logico/clase-09/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/logico/clase-09/</guid><pubDate>Mon, 06 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea&quot;&gt;&lt;a href=&quot;#tarea&quot; aria-label=&quot;tarea permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Entregar la &lt;a href=&quot;https://docs.google.com/document/d/1bblUbyuVNoGQKDRVq0usSkHEIts7WXNrkTMQlnkJC9w/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;primera parte del TP grupal&lt;/a&gt; para el lunes que viene (13/7).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Forall&lt;/li&gt;
&lt;li&gt;Functores&lt;/li&gt;
&lt;li&gt;is&lt;/li&gt;
&lt;li&gt;Pattern Matching&lt;/li&gt;
&lt;li&gt;Polimorfismo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;forall&quot;&gt;&lt;a href=&quot;#forall&quot; aria-label=&quot;forall permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Forall&lt;/h2&gt;
&lt;p&gt;Hasta ahora, estuvimos trabajando con &lt;strong&gt;cuantificadores existenciales&lt;/strong&gt;, es decir, todas nuestras consultas eran del tipo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;∃x / p(x) =&amp;gt; q(x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero, sabemos que hay otro cuantificador, el &lt;em&gt;universal&lt;/em&gt;. ¿Y cómo podemos trabajar con este cuantificador? 👀&lt;/p&gt;
&lt;p&gt;Vamos a utilizar el predicado de orden superior &lt;code class=&quot;language-text&quot;&gt;forall/2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;antecedente&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; consecuente&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para que el &lt;code class=&quot;language-text&quot;&gt;forall&lt;/code&gt; responda verdadero, tiene que ocurrir que &lt;strong&gt;para todo antecedente que ocurra, su consecuente ocurre&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, al definir el predicado &lt;code class=&quot;language-text&quot;&gt;soloEscribioComics/1&lt;/code&gt; nos responde si todas las obras que alguien escribió son cómics.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;soloEscribioComics&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Artista&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;escribio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Artista&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;escribio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Artista&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Obra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;esComic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Obra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cuidado, ya que forall no es conmutativo, si por ejemplo hiciésemos:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;esComic&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Obra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;escribio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Artista&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Obra&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esto, a diferencia de lo que hicimos en &lt;code class=&quot;language-text&quot;&gt;soloEscribioComics&lt;/code&gt;, significa que para todo cómic que existe lo escribió ese Artista.&lt;/p&gt;
&lt;p&gt;Al igual que &lt;code class=&quot;language-text&quot;&gt;not&lt;/code&gt;, el &lt;code class=&quot;language-text&quot;&gt;forall&lt;/code&gt; es un  predicado de orden superior ya que recibe predicados por parámetro. ¿Y por qué ligamos al &lt;code class=&quot;language-text&quot;&gt;Artista&lt;/code&gt; antes de entrar al &lt;code class=&quot;language-text&quot;&gt;forall&lt;/code&gt;? Porque, siguiendo con las similitudes con el &lt;code class=&quot;language-text&quot;&gt;not&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;forall&lt;/code&gt; no liga variables. Es por este motivo que tenemos que &lt;em&gt;“generar”&lt;/em&gt; al &lt;code class=&quot;language-text&quot;&gt;Artista&lt;/code&gt; antes de entrar al &lt;code class=&quot;language-text&quot;&gt;forall&lt;/code&gt; pero teniendo la precaución de no ligar la &lt;code class=&quot;language-text&quot;&gt;Obra&lt;/code&gt;, ya que queremos &lt;strong&gt;todas&lt;/strong&gt; las obras de &lt;strong&gt;un&lt;/strong&gt; artista.&lt;/p&gt;
&lt;h2 id=&quot;functores&quot;&gt;&lt;a href=&quot;#functores&quot; aria-label=&quot;functores permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functores&lt;/h2&gt;
&lt;p&gt;Hasta ahora, en lógico siempre hicimos consultas en las cuales nuestros individuos eran simples.
Pero además de los individuos simples, también existen los &lt;strong&gt;individuos complejos&lt;/strong&gt;. 🧐
Los &lt;em&gt;functores&lt;/em&gt; son individuos complejos y tienen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un nombre, o etiqueta, que los identifica.&lt;/li&gt;
&lt;li&gt;Una aridad.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En nuestra base de conocimientos teníamos libros, ahora conocemos los tipos de libros, que pueden ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;novela(Genero, CantidadDeCapitulos)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;libroDeCuentos(CantidadDeCuentos)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cientifico(Disciplina)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;bestSeller(Precio, CantidadDePaginas)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además contamos con un predicado &lt;code class=&quot;language-text&quot;&gt;esDeTipo/2&lt;/code&gt; que relaciona a cada libro con su tipo.&lt;/p&gt;
&lt;p&gt;Ahora queremos saber si un libro está bueno, esto se cumple cuando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Es una novela policial y tiene menos de 12 capítulos.&lt;/li&gt;
&lt;li&gt;Es una novela de terror.&lt;/li&gt;
&lt;li&gt;Los libros con más de 10 cuentos siempre son buenos.&lt;/li&gt;
&lt;li&gt;Es un libro científico de fisicaCuantica.&lt;/li&gt;
&lt;li&gt;Es un best seller y el precio por página es menor a $50.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;policial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;terror&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;libroDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cientifico&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fisicaCuantica&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bestSeller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Precio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Paginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Precio&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Paginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Si bien los functores se escriben como un predicado, &lt;strong&gt;NO&lt;/strong&gt; son un predicado. Como ven, los estamos usando como parámetro en nuestras consultas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora, mirando 🔭 un poco a nuestro código anterior, podemos ver lógica repetida y eso no nos gusta mucho. 👎&lt;/p&gt;
&lt;p&gt;Veamos cómo podríamos cambiar esto…&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;estaBueno&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Tipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Tipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;policial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;terror&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libroDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cientifico&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fisicaCuantica&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bestSeller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Precio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Paginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Precio&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Paginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tenemos un par de cosas interesantes aquí. 🤔&lt;/p&gt;
&lt;p&gt;Primero, si prestamos atención a cómo definimos el predicado &lt;code class=&quot;language-text&quot;&gt;esTipoCopado&lt;/code&gt;, podemos ver que estamos &lt;strong&gt;deconstruyendo&lt;/strong&gt; (o abriendo) a los functores que representan el tipo de los libros.&lt;br&gt;
Por ejemplo, en esta claúsula, el tipo va a unificar sólo con aquellas novelas que sean policiales.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;esTipoCopado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;policial&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
    &lt;span class=&quot;token variable&quot;&gt;Capitulos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;% además la variable Capitulos va a unificar&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;% con la cantidad de capítulos de esa novela&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Además, cada functor va a “saber” con qué claúsula del predicado quedarse.&lt;br&gt;
Todo esto gracias a que tenemos &lt;em&gt;Pattern Matching&lt;/em&gt;. 🎉&lt;/p&gt;
&lt;p&gt;En segundo lugar, podemos ver como al predicado &lt;code class=&quot;language-text&quot;&gt;tipoCopado&lt;/code&gt; no le importa para nada que &lt;em&gt;forma&lt;/em&gt; puede llegar a tener el functor del tipo de libro.&lt;br&gt;
Al hecho de tratar variables indistintamente de su forma lo llamamos &lt;strong&gt;polimorfismo&lt;/strong&gt; 💗 y va a ser un concepto muy importante y útil desde ahora hasta siempre. 😱&lt;/p&gt;
&lt;h2 id=&quot;is&quot;&gt;&lt;a href=&quot;#is&quot; aria-label=&quot;is permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;is&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;is&lt;/code&gt; es un predicado que relaciona a una cuenta &lt;em&gt;(a la derecha)&lt;/em&gt; con su resultado &lt;em&gt;(a la izquierda)&lt;/em&gt;. Es inversible para el resultado: liga la variable del &lt;code class=&quot;language-text&quot;&gt;Resultado&lt;/code&gt; al resultado de la expresión matemática de la derecha.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;Resultado&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;ExpresionMatematica&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Entonces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¿Cuándo usamos &lt;code class=&quot;language-text&quot;&gt;is&lt;/code&gt;?&lt;br&gt;
Bueno, &lt;strong&gt;solamente&lt;/strong&gt; cuando necesitamos realizar cuentas que tienen sentido.&lt;/li&gt;
&lt;li&gt;¿Y en en dónde más?&lt;br&gt;
En ningún otro caso. Usar &lt;code class=&quot;language-text&quot;&gt;is&lt;/code&gt; sólo para ligar variables está &lt;strong&gt;MAL&lt;/strong&gt; y nadie quisiera reprobar su parcial de lógico por eso. 👮🏻‍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la clase lo utilizamos cuando hicimos &lt;code class=&quot;language-text&quot;&gt;cantidadDePaginas&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;prolog&quot;&gt;&lt;pre class=&quot;language-prolog&quot;&gt;&lt;code class=&quot;language-prolog&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt; 
	&lt;span class=&quot;token function&quot;&gt;esDeTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;Tipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;paginasPorTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;Tipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;paginasPorTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;novela&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDeCapitulos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
	&lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDeCapitulos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;paginasPorTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libroDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:-&lt;/span&gt;
	&lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDeCuentos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;paginasPorTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cientifico&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;paginasPorTipo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bestSeller&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero fijate que solo lo utilizamos en las novelas y en los libros de cuentos. Para los best seller y los libros científicos usamos Pattern Matching ¡porque no había cuentas!&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1FLtumH4JNb34qIfYd0aPZyA8QHN5EnEM/view?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase de hoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pdep-lunes/obras/blob/master/obras.pl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Código de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---generacion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Generación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---existe-vs-para-todo.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Forall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---functores.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Functores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/polimorfismo-en-el-paradigma-logico.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Polimorfismo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/aritmetica-en-prolog.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Aritmética/is&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Octava clase]]></title><description><![CDATA[Tarea Queremos saber si una obra es rioplatense, que es cuando la nacionalidad de su artista es platense (Uruguay o Argentina). ¡Ojo con…]]></description><link>https://pdep-lunes.github.io/bitacora/logico/clase-08/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/logico/clase-08/</guid><pubDate>Mon, 29 Jun 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea&quot;&gt;&lt;a href=&quot;#tarea&quot; aria-label=&quot;tarea permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Queremos saber si una obra es rioplatense, que es cuando la nacionalidad de su artista es platense (Uruguay o Argentina). ¡Ojo con repetir lógica!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/18VMNw0u0B58TFfxaMtYdXV4ZQOUEAWL87HAP8K1jKLs/edit#heading=h.oit40igazgjk&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP Muerte en la Mansión Dreadbury&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Introducción a lógico&lt;/li&gt;
&lt;li&gt;Hechos y reglas&lt;/li&gt;
&lt;li&gt;Universo cerrado&lt;/li&gt;
&lt;li&gt;Negación&lt;/li&gt;
&lt;li&gt;Inversibilidad&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Empezamos viendo un &lt;a href=&quot;https://www.youtube.com/watch?reload=9&amp;#x26;v=4M-lzIOhVbI&amp;#x26;feature=youtu.be&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;video&lt;/a&gt; que introducía los conceptos básicos del &lt;em&gt;paradigma lógico&lt;/em&gt;.
Luego hicimos ejercicios que encontrás &lt;a href=&quot;https://github.com/pdepjm/2020-l-librosYcomics/blob/d6f14e597d2415bd4ac1cba97cea35239bc0b12c/obras.pl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;acá&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1iZdJgJyi4005vW1PsXzk_BRFN6TeB9nv/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1XJY_jdb52BPj7PvuRICEf3NZdCaxg3Kul2OeC9pHIXk/edit#slide=id.p&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;La presentación del video&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---introduccion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Universo cerrado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---un-poco-de-nomenclatura.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;¿Qué podemos encontrar en lógico?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---conjuncion-y-disyuncion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Conjunción y disyunción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---multiples-respuestas.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Consulta existencial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---negacion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Negación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/unificacion-y-pattern-matching.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Unificación vs asignación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/paradigma-logico---inversibilidad.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Inversibilidad&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Séptima clase]]></title><description><![CDATA[¿Qué vimos hoy? Listas infinitas Lazy evaluation Hicimos el simulacro Tierra de bárbaros Listas infinitas Ya vimos que en Haskell podemos…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-07/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-07/</guid><pubDate>Sun, 17 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Listas infinitas&lt;/li&gt;
&lt;li&gt;Lazy evaluation&lt;/li&gt;
&lt;li&gt;Hicimos el simulacro &lt;a href=&quot;https://docs.google.com/document/d/1ZJLz84JEPoEWZ9aVCJRWoHomfscUc04yECqSMOvdVZU/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Tierra de bárbaros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;listas-infinitas&quot;&gt;&lt;a href=&quot;#listas-infinitas&quot; aria-label=&quot;listas infinitas permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Listas infinitas&lt;/h2&gt;
&lt;p&gt;Ya vimos que en Haskell podemos modelar una biblioteca 📚 con las listas, por ejemplo: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fundacion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;brisignr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;legado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y también podemos modelar una lista del 1 al 5:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;unoAlCinco&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero si quisiéramos hacer una lista del 1 al 1000… ¡¿deberíamos escribir mil veces los números?! 😱 Por suerte, nuestro gran amigo Haskell puede ayudarnos gracias a las &lt;em&gt;listas por rangos&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;unoAlMil&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;También podemos definir una lista de los números pares entre 1 y 100 de esta forma:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;paresAlCien&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y no solo sirve para números 🔢, sino también para letras 🔡: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;abecedario&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;z&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y así como podemos definir listas con límites o con rangos, también podemos tener… 🥁 ¡&lt;strong&gt;listas infinitas&lt;/strong&gt;!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;infinita&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(¿Lo probaste en la consola y te olvidaste qué hacer para que pare? 😰 Apretá &lt;strong&gt;ctrl + c&lt;/strong&gt;. 😉)&lt;/p&gt;
&lt;h2 id=&quot;lazy-evaluation&quot;&gt;&lt;a href=&quot;#lazy-evaluation&quot; aria-label=&quot;lazy evaluation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy evaluation&lt;/h2&gt;
&lt;p&gt;Sabemos aplicar la función ´head´ a una lista:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;como&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;estás?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero, ¿qué pasará con una lista infinita? 😮 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por si quedan dudas de qué es lo que acaba de pasar, Haskell no esperó a que terminara la lista sino que tomó directamente lo que necesitaba. Eso es porque su forma de trabajo es la &lt;strong&gt;evaluación perezosa&lt;/strong&gt; o &lt;strong&gt;lazy evaluation&lt;/strong&gt;. Esto no pasa con todos los lenguajes. Otros (que seguramente ya utilizaste) usan la &lt;strong&gt;evaluación ansiosa&lt;/strong&gt; o &lt;strong&gt;eager evaluation&lt;/strong&gt; en donde, por ejemplo, esperarían a que la lista termine de cargar (infinitamente nunca 😵) para devolver el primer elemento.
Sipi, Haskell es lo más. 😍&lt;/p&gt;
&lt;p&gt;Ahora, ¿cómo funciona lazy evaluation?
Este tipo de evaluación se basa en una &lt;em&gt;estrategia&lt;/em&gt; que se llama &lt;strong&gt;call-by-name&lt;/strong&gt;… ¿eeehhh? 😨
Simplemente es operar primero las funciones de por fuera, antes que las funciones de sus parámetros. Es decir, las funciones se aplican antes de que se evalúen los parámetros. 😎
Si volvemos al ejemplo anterior:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- aplicará primero head, antes que evaluar la lista infinita&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero también hay funciones en las cuales necesitamos evaluar primero los parámetros, antes que la función en sí:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;-- (*) necesita que sus parámetros sean números para poder evaluar, entonces se evalúa primero (2+3).&lt;/span&gt;

&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Evaluar primero los parámetros para luego pasarle el valor final a las funciones, lo llamamos &lt;strong&gt;call-by-value&lt;/strong&gt;. Y es la estrategia en la que se basa la eager evaluation. Veamos:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- espera a que termine la lista infinita (nunca 😝)&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- espera a que termine la lista infinita (nunca 😝)&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- espera a que termine la lista infinita (nunca 😝)&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- ... y así hasta el infinito de los tiempos ⏳. ¡No termina!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Vimos los siguientes casos teniendo en cuenta estas preguntas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;¿terminarán de evaluar con lazy evaluation? &lt;/li&gt;
&lt;li&gt;¿y con eager evaluation? &lt;/li&gt;
&lt;li&gt;¿qué nos devuelve? 🤔&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Sí termina con lazy. No terminaría con eager. Devuelve [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- No termina con lazy y tampoco con eager.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- No termina con lazy y tampoco con eager.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Termina con ambas y devuelve 165.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Termina con lazy pero no con eager. Devuelve True.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;even&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- No termina&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;odd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Devuelve False&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Termina con lazy pero no con eager. Devuelve 4.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- No termina con lazy y tampoco con eager.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- No termina pero devuelve [2, 4, 6…]&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Devuelve &quot;Hola&quot;. No terminaría de evaluarse con eager.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;fst&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Devuelve 3. Con eager rompería porque no se puede dividir por 0.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;fst&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Devuelve &quot;Hola&quot;. Con eager porque no se puede hacer head de la lista infinita.&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hola&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- Rompe porque las listas deben ser homogéneas.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parcial de práctica: &lt;a href=&quot;https://docs.google.com/document/d/1ZJLz84JEPoEWZ9aVCJRWoHomfscUc04yECqSMOvdVZU/edit?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Tierra de bárbaros&lt;/a&gt; y una &lt;a href=&quot;https://drive.google.com/file/d/16t_sRI36Pdt91OAGP1sEqq_ftaqDEJX2/view?usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;posible solución&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links útiles:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/13sgW6Sf4mgkmz6tf99xaYfZUzOUbfIVO/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7-4&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Listas infinitas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html#tocAnchor-1-7&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Lazy evaluation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/estrategias-de-evaluacion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Estrategias de evaluación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Sexta clase]]></title><description><![CDATA[Tarea para la clase que viene Hacer los nuevos puntos del Monopoly Recargado Ver la solución propuesta a la primera parte del tp y hacer…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-06/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-06/</guid><pubDate>Mon, 11 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hacer los nuevos puntos del &lt;a href=&quot;https://docs.google.com/document/d/1--4XJTZqk49fEXxwGJjoQwoc_MfNAymheY-BJ2IRS40&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Monopoly Recargado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ver la &lt;a href=&quot;https://github.com/pdep-lunes/monopoly&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;solución propuesta&lt;/a&gt; a la primera parte del tp y hacer consultas (hay un &lt;a href=&quot;https://www.youtube.com/watch?v=lXsX8wsR7AI&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;video&lt;/a&gt; con el paso a paso).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Empezamos repasando lambdas, conociendo el concepto de currificación y viendo cómo es que llegamos a poder escribir con parámetros implícitos debido a lo anterior. Seguimos viendo que es la recursividad, cuando la usamos, cuando repetimos lógica y cómo podemos usar fold para evitar esa repetición y ser más declarativos.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;currificación-y-parámetros-implícitos&quot;&gt;&lt;a href=&quot;#currificaci%C3%B3n-y-par%C3%A1metros-impl%C3%ADcitos&quot; aria-label=&quot;currificación y parámetros implícitos permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Currificación y parámetros implícitos&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;-- Sin currificar&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡Hay otra forma de escribir esto! Teniendo en cuenta que sumaDe3 es una función, ¡lo podemos realizar con una lambda!:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A diferencia de sumaDe3, se utiliza una lambda para realizar su definición. Por eso (de forma didáctica), su tipo es la función (Int -&gt; Int -&gt; Int -&gt; Int).&lt;/p&gt;
&lt;p&gt;Si realizamos esta consulta en consola:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esto ocurre porque, como ya vimos, podemos construir nuevas funciones aplicando parcialmente funciones ya definidas. Si vemos el tipo de &lt;code class=&quot;language-text&quot;&gt;sumaDe3 5&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora, si vemos el tipo de &lt;code class=&quot;language-text&quot;&gt;sumaDe3&lt;/code&gt;, ¿Refleja bien lo que está ocurriendo?
Veamos si hacemos, utilizando lambdas, algo que refleje mejor esto:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos;&apos; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡Por esto es que ocurre la aplicación parcial! Cuando llamamos a &lt;code class=&quot;language-text&quot;&gt;sumaDe3&amp;#39;&amp;#39; 5&lt;/code&gt;, nos va a devolver la segunda función lambda que creamos.&lt;/p&gt;
&lt;p&gt;¡Pero sabemos que &lt;code class=&quot;language-text&quot;&gt;sumaDe3 5 5&lt;/code&gt; también nos devuelve una función!&lt;/p&gt;
&lt;p&gt;Si queremos hacer una función que replique todos los casos, tendriamos que hacer algo asi:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos;&apos;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sumaDe3&lt;/span&gt;&apos;&apos;&apos; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Esto quiere decir que ahora todas las funciones las tenemos que hacer así? ¿Y tiparlas así? ¡No! A lo que llegamos, es que &lt;em&gt;Haskell hace esto sin que nos demos cuenta&lt;/em&gt;: Lo que hace haskell es “partir” nuestra función en diferentes funciones de 1 parámetro, es decir, &lt;em&gt;currifica&lt;/em&gt; nuestras funciones.&lt;/p&gt;
&lt;p&gt;Ahora, entendiendo esto, llegamos a por qué existe aplicación parcial: Si le pasamos un parámetro a &lt;code class=&quot;language-text&quot;&gt;sumaDe3&lt;/code&gt;, nos va a devolver la &lt;em&gt;siguiente&lt;/em&gt; función, que toma dos parámetros y nos devuelve un entero.&lt;/p&gt;
&lt;p&gt;En Haskell, a veces, podemos dejar implícitos los parámetros que se pasan a las funciones. ¿Esto qué significa? Que no es necesario escribir a la izquierda del &lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt; que estamos recibiendo ese parámetro.
Veamos un ejemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;siguiente&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- es equivalente a&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;siguiente&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Esto es porque al haber aplicado un &lt;code class=&quot;language-text&quot;&gt;1&lt;/code&gt; a la función &lt;code class=&quot;language-text&quot;&gt;+&lt;/code&gt;, nos va a devolver una función &lt;code class=&quot;language-text&quot;&gt;Int -&amp;gt; Int&lt;/code&gt;. Justamente, gracias a que todas las funciones en Haskell están currificadas!!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;        &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En este caso, &lt;code class=&quot;language-text&quot;&gt;siguiente&lt;/code&gt; estaría recibiendo implícitamente un &lt;code class=&quot;language-text&quot;&gt;numero :: Int&lt;/code&gt;.
Y lo que estamos haciendo es simplemente darle un nuevo nombre a esa función, porque es un valor.&lt;/p&gt;
&lt;p&gt;Los parámetros implícitos también son útiles y frecuentemente vistos en los casos en los que componemos funciones.&lt;/p&gt;
&lt;p&gt;Usando un ejemplo del dominio de Monopoly:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;aumentarDinero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Dinero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cambiarTactica&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Tactica&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;pasarPorElBanco&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Jugador&lt;/span&gt;
                               &lt;span class=&quot;token comment&quot;&gt;--  (Jugador -&gt; Jugador) . (Jugador -&gt; Jugador)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;pasarPorElBanco&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cambiarTactica&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Comprador Compulsivo&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;aumentarDinero&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En este caso &lt;code class=&quot;language-text&quot;&gt;pasarPorElBanco&lt;/code&gt; recibe implícitamente a un &lt;code class=&quot;language-text&quot;&gt;jugador::Jugador&lt;/code&gt;. Esto es porque a la derecha del igual tenemos una función &lt;code class=&quot;language-text&quot;&gt;Jugador -&amp;gt; Jugador&lt;/code&gt;, a la que le queremos poner un nombre, porque para nosotros esa función significa &lt;code class=&quot;language-text&quot;&gt;pasarPorElBanco&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;recursividad&quot;&gt;&lt;a href=&quot;#recursividad&quot; aria-label=&quot;recursividad permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Recursividad&lt;/h3&gt;
&lt;p&gt;Probablemente ya hayan visto recursividad en materias como Algoritmos y Estrucutras de Datos, Matemática Discreta o hasta Análisis Matemático.&lt;/p&gt;
&lt;p&gt;La lógica en este caso es la misma, estamos hablando de una función que se usa a si misma dentro de su definición. Consta principalmente de dos casos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caso base, corta la recursividad.&lt;/li&gt;
&lt;li&gt;Caso recursivo, donde la función se llama a sí misma.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplos comunes de esto son la sucesión de fibonacci y el factorial:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;                     &lt;span class=&quot;token comment&quot;&gt;-- caso base&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- caso recursivo&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;                                     &lt;span class=&quot;token comment&quot;&gt;-- caso base&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;                                     &lt;span class=&quot;token comment&quot;&gt;-- caso base&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fibonacci&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;-- caso recursivo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pero esto no se reduce solo a funciones matemáticas que rara vez usemos en nuestros programas, la recursividad también sirve para funciones más comunes y corrientes como &lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt; que nos permite saber el largo de una lista:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;-- caso base&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;-- caso recursivo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Acá podemos hacer un parate y ver qué significa cada parte de la declaración de la función:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cuando decimos &lt;code class=&quot;language-text&quot;&gt;length [ ] = ...&lt;/code&gt; estamos diciendo que cuando la lista encaje con ese patrón (&lt;code class=&quot;language-text&quot;&gt;[ ]&lt;/code&gt; es el patrón de lista vacía) la función devuelve lo que está a la derecha.&lt;/li&gt;
&lt;li&gt;Cuando ponemos &lt;code class=&quot;language-text&quot;&gt;length (_:cola) = ...&lt;/code&gt; estamos diciendo que cuando la lista tenga cabeza y cola (el patrón es &lt;code class=&quot;language-text&quot;&gt;(cabeza:cola)&lt;/code&gt;) la función devuelve lo que está del lado derecho. Acá es importante ver como usamos la variable anónima (&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;) para decir que queremos que tenga cabeza pero que no nos importa que valor tiene la cabeza.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Lo importante es que quede claro que lo mismo escrito del lado izquierdo del igual y del lado derecho no tienen el mismo significado, cuando vemos lo siguiente: &lt;code class=&quot;language-text&quot;&gt;(cabeza:cola)&lt;/code&gt; no podemos decir si eso corresponde al patrón de lista (cabeza:cola) o si corresponde a usar la función &lt;code class=&quot;language-text&quot;&gt;:&lt;/code&gt; con &lt;code class=&quot;language-text&quot;&gt;cabeza&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;cola&lt;/code&gt;. Lo mismo sucede con el patrón de lista vacía y la lista vacía (en ambos casos es &lt;code class=&quot;language-text&quot;&gt;[ ]&lt;/code&gt;, del lado izquierdo patrón y del lado derecho lista vacía). Por último, la variable anónima &lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt; no es un valor, solo la usamos como patrón.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ahora, intentemos hacer la definición de &lt;code class=&quot;language-text&quot;&gt;sum&lt;/code&gt; de manera recursiva:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Num&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;            &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si comparamos con la definición anterior de &lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt;, vemos que hay una repetición de lógica:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En ambas definiciones esperamos que cuando la lista esté vacía la función retorne 0.&lt;/li&gt;
&lt;li&gt;Luego, en ambas definiciones realizamos una operación que involucra el primer elemento de la lista, una función &lt;code class=&quot;language-text&quot;&gt;f&lt;/code&gt; y una llamada recursiva de la función que estamos definiendo con la cola de la lista como parámetro.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;             &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;             &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;predicado&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para solucionar este problema de repetición de lógica, surgen las funciones de la familia &lt;code class=&quot;language-text&quot;&gt;fold&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Empezamos por &lt;code class=&quot;language-text&quot;&gt;foldl&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;--    :: funcion -&gt; neutro/semilla -&gt; lista -&gt; a&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- caso base, si la lista está vacía, retorno la semilla&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- caso recursivo, si la lista no esta vacia, ejecuto la funcion con la semilla y la cabeza, y hago una llamada recursiva con eso y la cola de la lista&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- básicamnente foldl recibe:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una función&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una semilla o valor para el caso base&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una lista&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- devuelve el valor para el caso base si la lista es vacia&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- y vuelve a usar foldl usando el resultado de aplicar la funcion a la semilla y la cabeza como nueva semilla&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- y la cola de la lista como nueva lista (para este nuevo uso de foldl)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora, las funciones de &lt;code class=&quot;language-text&quot;&gt;sum&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt; las podemos realizar sin repetir lógica:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;lista&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;lista&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;sumarUno&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;valorAnterior&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;valorAnterior&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;lista&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sumarUno&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;lista&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;También, existe la función &lt;code class=&quot;language-text&quot;&gt;foldr&lt;/code&gt; que tiene la misma funcionalidad que &lt;code class=&quot;language-text&quot;&gt;foldl&lt;/code&gt; &lt;em&gt;pero&lt;/em&gt; aplica la función recursiva cambiando la posición de los parametros de la función que le pasamos por parametro y de otra forma:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cabeza&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;semilla&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cola&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- básicamnente foldr recibe:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una función (con los parámetros al revés que la defoldl)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una semilla o valor para el caso base&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- * una lista&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- devuelve el valor para el caso base si la lista es vacia&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;-- y evalua la funcion con la cabeza de la lista y el resultado de foldear la cola&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Y qué pasa en los casos donde no puedo incluir una semilla? (Por ejemplo, averiguar el máximo número de una lista de números). Para esto, tenemos las funciones &lt;code class=&quot;language-text&quot;&gt;foldl1&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;foldr1&lt;/code&gt; que toman como semilla o valor base el primer elemento de la lista:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;foldl1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldl1&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;foldl&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;

&lt;span class=&quot;token builtin&quot;&gt;foldr1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;token builtin&quot;&gt;foldr1&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;foldr&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;funcion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;xs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La idea ahora &lt;strong&gt;no&lt;/strong&gt; es que dejen de usar &lt;code class=&quot;language-text&quot;&gt;sum&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;length&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;any&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;all&lt;/code&gt; para hacer todo eso con foldl, justamente porque esos “problemas” ya están resueltos. Lo importante es que lo tengamos en cuenta para cuando necesitemos “plegar” una lista usando alguna función o cuando tengamos el instinto de hacer algo recursivo cuando quizás podría quedar más declarativo con &lt;code class=&quot;language-text&quot;&gt;fold&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;!-- - [Video de la clase](...)
-  --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/open?id=1mbSZHPZphl0T0jfB6hU21YjhySdoyx3p&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Leer el documento sobre las funciones de la familia fold que está &lt;a href=&quot;https://docs.google.com/document/d/1jSrU7lVMan4nbHBETGqvO5VpqJI0KXVWtH7fqnVASPU/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;acá&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Quinta clase]]></title><description><![CDATA[Tarea para la clase que viene: Realizar el TP Monopoly y entregarlo por GitHub. De forma opcional pero muy recomendable se puede hacer la…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-05/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-05/</guid><pubDate>Mon, 04 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Realizar el &lt;a href=&quot;https://docs.google.com/document/d/1EAN_RC2zngF1jiy4MGCuLvYQvr1euHj1Xx4ORiDh-nE/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP Monopoly&lt;/a&gt; y &lt;strong&gt;entregarlo por GitHub&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;De forma opcional pero &lt;em&gt;muy recomendable&lt;/em&gt; se puede hacer la guía de &lt;a href=&quot;https://mumuki.io/pdep-utn/chapters/438-control-de-versiones&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;uso de consola y Git de Mumuki&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;También de forma opcional se pueden hacer las guías de Mumuki de &lt;a href=&quot;https://mumuki.io/pdep-utn/lessons/743-programacion-funcional-expresiones-lambda&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Expresiones Lambda&lt;/a&gt; y &lt;a href=&quot;https://mumuki.io/pdep-utn/lessons/745-programacion-funcional-modelado&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Data&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Volvimos al TP de la clase pasada &lt;a href=&quot;https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP “Hora de lectura”&lt;/a&gt; para seguir trabajando con él y agregando nuevos ejercicios. 🙌 &lt;/p&gt;
&lt;p&gt;Queremos saber de qué género es un libro. Eso va a depender de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si tiene menos de 50 páginas, es un cómic. 💬&lt;/li&gt;
&lt;li&gt;Si el autor es Stephen King, es de terror. 🤡&lt;/li&gt;
&lt;li&gt;Si el autor es japonés, es un manga. 🗾&lt;/li&gt;
&lt;li&gt;En cualquier otro caso, no sabemos el género. 🤷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aprendimos cómo ver si un libro tiene cierta de cantidad de páginas o si es de un autor en especial pero… ¿cómo averiguamos la nacionalidad de un autor? 😅 ¿Deberíamos agregar la nacionalidad del autor en cada libro? ¡Momento ✋! Sólo interesa saber quiénes son de Japón y, como en nuestra solución, el único autor japonés es &lt;em&gt;“Hajime Isayama”&lt;/em&gt;, no tendría sentido agregar más información a cada libro. La forma más fácil de resolverlo es con una función:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esJapones&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esJapones&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esJapones&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡Ya tenemos lo necesario para definir la función &lt;code class=&quot;language-text&quot;&gt;genero&lt;/code&gt;! &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;genero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;genero&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Comic&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Terror&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;esJapones&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Manga&quot;&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;No clasificado&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recordá no olvidarte el &lt;code class=&quot;language-text&quot;&gt;otherwise&lt;/code&gt; cuando utilices guardas ya que es donde entra todo lo que no abarcan las guardas de encima de él. Y, ¿por qué pasa eso? 🤔 Resulta que &lt;code class=&quot;language-text&quot;&gt;otherwise&lt;/code&gt; es un sinónimo de &lt;code class=&quot;language-text&quot;&gt;True&lt;/code&gt;, por lo que siempre se va a poder entrar por esa condición cuando no se no cumplan ninguna de las demás. Utilizamos &lt;code class=&quot;language-text&quot;&gt;otherwise&lt;/code&gt; porque es más expresivo.&lt;/p&gt;
&lt;p&gt;La clase anterior contamos en qué situaciones &lt;strong&gt;no&lt;/strong&gt; usar las guardas ❌. Pero el caso de arriba es cuando sí queremos usarlas ✔️. Entonces, ¿cuándo usar guardas y cuando pattern matching? 😩
Usamos pattern matching cuando tenemos algo que encaja con un patrón, por ejemplo una tupla de 3 elementos, una lista vacía, etc. 🧩
Usamos guardas cuando queremos evaluar conjuntos de dominios (en matemática, esto es muy similar a las funciones partidas). 🔀&lt;/p&gt;
&lt;p&gt;¡Excelente! Ya tenemos funcionando la función &lt;code class=&quot;language-text&quot;&gt;genero&lt;/code&gt; 🎉. ¿Qué pasa si le mandamos como argumento una tupla que representa a una persona? No debería funcionar porque explicitamos en su tipo que recibía un &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;… Veamos qué pasa con la tupla que representa a nuestro querido profe Gus: 👀&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;genero&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Gustavo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Trucco&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Comic&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿¡Entonces el profe es un cómic!? 😱 Ya quisiera, pero no lo es. Lo que pasó es que si bien dijimos que &lt;code class=&quot;language-text&quot;&gt;genero&lt;/code&gt; funciona sólo con &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;s, un &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt; es una tupla de tipo &lt;code class=&quot;language-text&quot;&gt;(String, String, Int)&lt;/code&gt;, ¡el mismo tipo que la tupla que representa a una persona! 😅
Recordá que al usar el type alias, &lt;strong&gt;no estamos creando un nuevo tipo de dato&lt;/strong&gt;, sino que le estamos dando un nombre a una estructura que tiene sentido para nuestra solución y así ganar expresividad.&lt;/p&gt;
&lt;p&gt;Entonces, ¿cómo lo solucionamos? 🤨 Creando nuestro propio tipo de dato con &lt;strong&gt;Data&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En donde &lt;code class=&quot;language-text&quot;&gt;UnLibro&lt;/code&gt; es una función que llamamos &lt;strong&gt;constructor&lt;/strong&gt; y su tipo es &lt;code class=&quot;language-text&quot;&gt;UnLibro :: String -&amp;gt; Autor -&amp;gt; Int -&amp;gt; Libro&lt;/code&gt;. Es decir, es una función que recibe los parámetros necesarios para crear un libro. &lt;/p&gt;
&lt;p&gt;Modelemos a “El visitante”:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;El visitante&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Si quisiéramos probarlo en la consola, nos tiraría un error porque el data que construimos no es “mostrable” 😩. Es decir, Haskell no sabe cómo mostrar nuestro tipo de dato, pero lo solucionamos escribiendo &lt;code class=&quot;language-text&quot;&gt;deriving Show&lt;/code&gt; al final de la declaración del data: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y entonces, ¿qué ventajas tenemos al usar data? Porque pareciera ser lo mismo que usar tuplas con el type alias 🙄. La diferencia está en que, con el data, estamos creando nuestro propio tipo de dato y, gracias a eso, vamos a poder restringir a las funciones a que sólo funcionen con el tipo de dato que le decimos. Ahora, &lt;code class=&quot;language-text&quot;&gt;genero&lt;/code&gt; sólo va a recibir &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;s, de otra forma, romperá. 💥
Otra ventaja es que podemos utilizar data con &lt;strong&gt;record syntax&lt;/strong&gt; y, de esta forma, nos genera automáticamente los accessors:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Show&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;En este caso tanto &lt;code class=&quot;language-text&quot;&gt;libro&lt;/code&gt; como &lt;code class=&quot;language-text&quot;&gt;autor&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;cantidadDePaginas&lt;/code&gt; son funciones (accessors) que van a acceder a cada elemento del data 🙌. ¿Cómo nos damos cuenta? Porque estamos explicitando el tipo de cada una al momento de crear el tipo de dato.&lt;/p&gt;
&lt;p&gt;En conclusión, ambas sintaxis para definir datas son equivalentes, solo que record syntax nos regala las funciones para acceder a las propiedades. 🎁&lt;/p&gt;
&lt;p&gt;Por otro lado, si queremos comparar una instancia de data con otra, tenemos que decirle a Haskell que queremos que sean comparables. ¿Cómo hacemos eso? Agregando &lt;code class=&quot;language-text&quot;&gt;Eq&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Eq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora vamos a modelar la función &lt;code class=&quot;language-text&quot;&gt;agregarPaginas&lt;/code&gt;. ¿Esta función va a modificar al libro original? ¡No! Los data, al igual que todo en funcional, siguen siendo inmutables. Por ende, la función nos devolverá una copia del libro con la cantidad de páginas aumentada.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaCantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UnLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;unaCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Podemos hacer lo mismo con record syntax:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Es importante destacar que para devolver la nueva cantidad de páginas debemos sumar la cantidad de páginas original. Para eso, utilizamos el accessor &lt;code class=&quot;language-text&quot;&gt;cantidadDePaginas&lt;/code&gt; y es importante pasarle por parámetro &lt;code class=&quot;language-text&quot;&gt;unLibro&lt;/code&gt; para que pueda darnos el valor. No olvidar que &lt;code class=&quot;language-text&quot;&gt;cantidadDePaginas&lt;/code&gt; sigue siendo una función que necesita su parámetro.&lt;/p&gt;
&lt;p&gt;¿Quedan dudas? 😕 ¡Veamos otro ejemplo! Definamos &lt;code class=&quot;language-text&quot;&gt;sacarSecuela&lt;/code&gt;, que agrega un “2” al final del título y cuyas páginas siempre serán 400:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sacarSecuela&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sacarSecuela&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lo sentís, ¿no? ¡El olor a repetición de lógica! 🤢 En ambas estamos cambiando las páginas de alguna forma. Así que vamos a abstraer esa lógica en la función &lt;code class=&quot;language-text&quot;&gt;cambiarCantidadDePaginas&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cambiarCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFuncion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFuncion&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ahora la cantidad de páginas se cambia según el criterio (una función) que reciba por parámetro (concepto de &lt;strong&gt;órden superior&lt;/strong&gt;). Pero… en &lt;code class=&quot;language-text&quot;&gt;sacarSecuela&lt;/code&gt; no usábamos una función, asignábamos 400 y ¡listo! 😨 ¿Cómo hacemos para utilizar esta nueva función? Con &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;, la cual recibe dos parámetros y siempre se queda con el primero:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;sacarSecuela&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarTitulo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y ya que estamos… podemos abstraer el cambio de título de forma similar al cambio de cantidad de páginas: 🌚&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarTitulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cambiarTitulo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFuncion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFuncion&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nuestras funciones quedarían:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;agregarPaginas&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;algunLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cambiarCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;paginasAAgregar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;algunLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;sacarSecuela&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sacarSecuela&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarCantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cambiarTitulo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; 2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pasemos ahora a modelar a las personas 👩👨. Las cuales tienen un nombre y un conjunto de libros que le gustan:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;gustos&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;gustos&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;snd&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Para saber si a una persona le gusta un libro, definimos la función &lt;code class=&quot;language-text&quot;&gt;leGusta&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;gustos&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De esta forma asumimos que a una persona siempre le gustan algunos libros. Ahora hagamos un cambio al modelado. En vez de tener los libros que le gustan a la persona, definamos un criterio por el cual a una persona le gusta un libro:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;julian&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;julian&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Julian&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;esLibroLigero&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y ahora nuestra función leGusta quedaría:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;leGustaSegun&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;gustos&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;leGustaSegun&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt;  &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;         &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;leGustaSegun&lt;/span&gt;    &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;       &lt;span class=&quot;token hvariable&quot;&gt;unGusto&lt;/span&gt;     &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;     &lt;span class=&quot;token hvariable&quot;&gt;unGusto&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Que pasa con la función &lt;code class=&quot;language-text&quot;&gt;leGustaSegun&lt;/code&gt;? No tiene demasiada lógica, y además es difícil encontrar un nombre expresivo para esta función auxiliar. Para eso, dentro de Haskell contamos con las &lt;strong&gt;expresiones lambda&lt;/strong&gt; o &lt;strong&gt;funciones anónimas&lt;/strong&gt;: funciones sin nombre que usamos para este tipo de casos particulares. Reescribamos la función &lt;code class=&quot;language-text&quot;&gt;leGusta&lt;/code&gt; utilizando lambda:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Persona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;leGusta&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;unGusto&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unGusto&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;gustos&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaPersona&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;La lambda está definida entre paréntesis. En este caso recibe un solo parámetro, pero podría recibir varios. La &lt;code class=&quot;language-text&quot;&gt;-&amp;gt;&lt;/code&gt; indica dónde terminan los parámetros y empieza la función. Las expresiones lambda o funciones anónimas nos sirven para este tipo de casos específicos.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/julian-berbel/902aa2942c210c2dbeef3adcf9ec147b&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Solución del ejercicio de hoy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/147cqUY86wWVoJ86Ce0NoX1R78CwoCOGZtF7RugUvzFg/edit#heading=h.pfzudah6sze2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Guía rápida de Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Z1PBoZoQ_pQ&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Resolución de conflictos en Git y VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/open?id=1rWu_COUxQ2puK1ReqZkclHZ8fWW3x-c6&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Cuarta clase]]></title><description><![CDATA[¿Qué vimos hoy? Hicimos una puesta en común del TP “Hora de lectura” que hicimos la clase pasada. 🧐 ¿Por dónde empezamos? 😅 Si vamos a…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-04/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-04/</guid><pubDate>Mon, 27 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Hicimos una puesta en común del &lt;a href=&quot;https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP “Hora de lectura”&lt;/a&gt; que hicimos la clase pasada. 🧐&lt;/p&gt;
&lt;p&gt;¿Por dónde empezamos? 😅 Si vamos a trabajar con libros, empecemos por ahí. ¡A modelarlos! 🎨&lt;/p&gt;
&lt;p&gt;⚠️ Disclaimer: Es muy importante leer todo el enunciado antes de ponerse a codear. En este caso, vamos a ir a nuestro ritmo sólo por fines pedagógicos. ⚠️&lt;/p&gt;
&lt;p&gt;Tenemos que crear cada libro, para eso, vamos a crear… ¿variables? ¡No! 😠 En funcional &lt;strong&gt;no existen las variables&lt;/strong&gt; porque las cosas no varían. Recordá: &lt;strong&gt;en Haskell no hay estado&lt;/strong&gt;. Es por eso que vamos a crear &lt;strong&gt;etiquetas&lt;/strong&gt; 🏷️ representando a cada libro. ¿Y cómo los vamos a representar? 💭 Bueno, sabemos que cada título del libro tiene un autor y una cantidad de páginas, entonces podríamos crear a &lt;em&gt;“El visitante”&lt;/em&gt; y a &lt;em&gt;“Shingeki no Kyojin capítulo 1”&lt;/em&gt; de esta forma:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y así seguimos con los demás títulos. Peeeero, antes de avanzar, ¿no hay algo que te llame la atención? 🤔 Pongámonos a filosofar: ¿qué es &lt;code class=&quot;language-text&quot;&gt;elVisitante&lt;/code&gt;? ¿qué es &lt;code class=&quot;language-text&quot;&gt;shingekiNoKyojin1&lt;/code&gt;? ¡Son libros 📚! Entonces, ¿no estaría bueno poder llamarlos como corresponde?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por suerte, esto no va a quedar en un deseo. Lo vamos a poder hacer realidad con el &lt;strong&gt;type alias&lt;/strong&gt; (en criollo: un apodo o un alias). Gracias a esta herramienta vamos a lograr que nuestro código sea más expresivo 😌. Entonces, para hacer esto posible deberemos agregar a nuestra solución un type alias:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡Y podemos seguir mejorando la expresividad de nuestro código! Si sabemos que nuestro libro es una dupla compuesta por el autor y la cantidad de páginas… Mirá 👀:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;CantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y una vez que hayamos modelado todos los libros, ¡es hora de armar la biblioteca! Para eso vamos a usar vari… ¡Noooo! 😡 Crearemos una etiqueta. ¿Y cómo va a ser la biblioteca? Bueno, una lista con los libros que modelamos. ¿Y su tipo? ¿Una lista de &lt;code class=&quot;language-text&quot;&gt;(String, Int)&lt;/code&gt;? ¿O una lista de &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;s? 💭 Si bien dijimos que &lt;code class=&quot;language-text&quot;&gt;(String, Int)&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt; eran lo mismo, para darle un sentido semántico a nuestra solución, vamos a elegir como tipo de la biblioteca a lista de &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin27&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fundacion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eragon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eldest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;brisignr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;legado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sabemos lo que estás pensando… también nos gustaría tomar un helado 🍦. ¿Eh? ¿Eso no era lo que pensabas? 😳 No bueno, sí, también creemos que sería una buena idea crear un type alias para la biblioteca 😅:   &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin27&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fundacion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sandman12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eragon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eldest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;brisignr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;legado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hagamos un recreíto de tanto código 🥴. Te vamos a contar un secreto 🤫: ¿viste el &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt;? Bueno, ¡también es un apodo! ¿Te imaginás cuál es su verdadero nombre? 🙈 Es &lt;code class=&quot;language-text&quot;&gt;type String = [Char]&lt;/code&gt;. Así es, un &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; no es nada más ni nada menos que una lista de caracteres, una lista de &lt;code class=&quot;language-text&quot;&gt;Char&lt;/code&gt;. ¿Eso significa que a partir de ahora vamos a llamarle &lt;code class=&quot;language-text&quot;&gt;[Char]&lt;/code&gt;? ¡Nooo! El &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; va a seguir llamándose &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt;, por algo alguien decidió crear ese type alias. ¿No nos crees? Mirá este ejemplo:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;¡Hola!&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;¡&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;H&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;o&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;l&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;El string &lt;code class=&quot;language-text&quot;&gt;¡Hola!&lt;/code&gt; es lo mismo que la lista de caracteres &lt;code class=&quot;language-text&quot;&gt;[&amp;#39;¡&amp;#39;, &amp;#39;H&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;!&amp;#39;]&lt;/code&gt;. Porque como dijimos, &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; es un type alias de &lt;code class=&quot;language-text&quot;&gt;[Char]&lt;/code&gt;. ¡Sigamos con el TP! 🌈&lt;/p&gt;
&lt;p&gt;Ya modelamos los libros y la biblioteca. Es hora de definir las funciones que nos piden 👩‍💻👨‍💻. La primera es &lt;code class=&quot;language-text&quot;&gt;promedioDeHojas&lt;/code&gt;. ¿Por dónde la encaramos 😵? &lt;strong&gt;Nuestro consejo es empezar por el tipo de la función&lt;/strong&gt;. De esa forma, vamos a tener en mente qué parámetros toma y qué devuelve para luego definirla. 😊
¿Cuántos parámetros toma &lt;code class=&quot;language-text&quot;&gt;promedioDeHojas&lt;/code&gt;? Uno solo, la biblioteca. Entonces, vamos a empezar poniendo una sol flechita (&lt;strong&gt;recordá que el tipo de una función tiene la misma cantidad de flechitas que de parámetros&lt;/strong&gt;):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;promedioDeHojas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A veces, es muy claro qué devuelve una función, por lo que podemos empezar completando ese espacio del tipo de la misma. En este caso, como vamos a hacer un promedio, vamos a obtener como resultado un número, ¡pero no cualquier número! Un número que podría tener una coma, es decir, un &lt;code class=&quot;language-text&quot;&gt;Float&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;promedioDeHojas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Y de qué tipo es el parámetro que toma? Dijimos que era una biblioteca y el tipo de la biblioteca es &lt;code class=&quot;language-text&quot;&gt;Biblioteca&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;promedioDeHojas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡Wooohooo 🎉! Tenemos el tipo de nuestra función. Ahora, definámosla:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;promedioDeHojas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Float&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;promedioDeHojas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;fromIntegral&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cantidadDeHojas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;genericLength&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;cantidadDeHojas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cantidadDeHojas&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;
 
&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unasPaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unasPaginas&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Algo muy importante que hicimos en esta solución fue &lt;strong&gt;delegar&lt;/strong&gt;. Es decir, dividimos nuestro gran problema en partecitas más pequeñas para poder resolverlo más fácilmente. De esta forma obtenemos un código más &lt;strong&gt;declarativo&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Enfoquémonos en &lt;code class=&quot;language-text&quot;&gt;cantidadDePaginas&lt;/code&gt; 🔍. Es una función que dada una tupla, nos devuelve un elemento en específico de la misma. Esto es lo que llamamos un &lt;strong&gt;accessor&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;En este punto de la clase surgió la duda de si &lt;code class=&quot;language-text&quot;&gt;Int&lt;/code&gt; es lo mismo que &lt;code class=&quot;language-text&quot;&gt;Integral&lt;/code&gt;. Si no lo recordás, dijimos que no son lo mismo. &lt;code class=&quot;language-text&quot;&gt;Int&lt;/code&gt; es un tipo de dato mientras que &lt;code class=&quot;language-text&quot;&gt;Integral&lt;/code&gt; es una restricción de tipo, también llamada clase de tipo o &lt;strong&gt;type class&lt;/strong&gt;. Este es un diagrama en donde lo escrito en negro ⚫ son clases de tipo y lo escrito en rojo 🔴 son tipos de dato:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/pdep-lunes/bitacora/2019-completo/content/blog/funcional/haskell-type-classes.jpg&quot; alt=&quot;diagrama_tipo_clases&quot; title=&quot;Diagrama de tipos de clases&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ahora toca el turno de definir &lt;code class=&quot;language-text&quot;&gt;esLecturaObligatoria&lt;/code&gt;. De vuelta vamos a descomponerla en funciones para que sea más fácil construirla. 💡 Un consejo que solemos dar definir la función de tal forma que cuando la leamos, quede igual que el enunciado. Y la única forma de hacer esto posible es delegando:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Saga&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;sagaDeEragon&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Saga&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sagaDeEragon&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;eragon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eldest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;brisignr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;legado&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDeStephenKing&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;perteneceASagaEragon&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esFundacion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esDeStephenKing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeStephenKing&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;perteneceASagaEragon&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;perteneceASagaEragon&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;sagaDeEragon&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esFundacion&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esFundacion&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fundacion&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fijate que la función &lt;code class=&quot;language-text&quot;&gt;esLecturaObligatoria&lt;/code&gt; quedó igual que el enunciado; el mismo dice: &lt;em&gt;”Es una lectura obligatoria cuando es de Stephen King o de la saga de Eragon o es el ejemplar de Fundación de 230 páginas de Isaac Asimov”&lt;/em&gt;. A esto nos referimos con delegar y que se pueda leer como una oración del TP. 😁&lt;/p&gt;
&lt;p&gt;Hagamos una observación 🔍: cuando creamos la &lt;code class=&quot;language-text&quot;&gt;sagaDeEragon&lt;/code&gt;, le pusimos como tipo &lt;code class=&quot;language-text&quot;&gt;Saga&lt;/code&gt;, donde saga es &lt;code class=&quot;language-text&quot;&gt;[Libro]&lt;/code&gt;. ¡Lo mismo que la biblioteca! ¿Y por qué no reutilizamos el tipo &lt;code class=&quot;language-text&quot;&gt;Biblioteca&lt;/code&gt; si también es &lt;code class=&quot;language-text&quot;&gt;[Libro]&lt;/code&gt; 🤨? Porque si bien &lt;em&gt;sintácticamente&lt;/em&gt; son lo mismo, &lt;em&gt;semánticamente&lt;/em&gt; no lo son. Es decir, si bien las dos son del tipo &lt;code class=&quot;language-text&quot;&gt;[Libro]&lt;/code&gt;, una biblioteca no es lo mismo que una saga (y si no nos crees, buscalas en el diccionario 😜). Haciendo esta diferencia ganamos expresividad.&lt;/p&gt;
&lt;p&gt;Veamos otra versión de &lt;code class=&quot;language-text&quot;&gt;esLecturaObligatoria&lt;/code&gt; con &lt;strong&gt;pattern matching&lt;/strong&gt; (y nuestra versión preferida porque usa una herramienta del paradigma funcional y además, es más declarativa): &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt;&apos; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt;&apos; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Isaac Asimov&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;perteneceASagaEragon&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⚠️ Hay que tener mucho cuidado con el orden cuando utilizamos pattern matching. Los casos deben ir de lo más particular a lo más general. ⚠️
En este caso &lt;code class=&quot;language-text&quot;&gt;(&amp;quot;Stephen King&amp;quot;, _)&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;(&amp;quot;Isaac Asimov&amp;quot;, 230)&lt;/code&gt; matchean con duplas que tengan ese formato, mientras que &lt;code class=&quot;language-text&quot;&gt;unLibro&lt;/code&gt; matchea con cualquier tupla (por eso va después) y por último va la variable anónima (&lt;code class=&quot;language-text&quot;&gt;_&lt;/code&gt;) que matchea con cualquier cosa. Así vamos de los casos más específicos a los generales.&lt;/p&gt;
&lt;p&gt;Y así como tenemos una solución preferida, tenemos una que no nos gusta para nada 🤬:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt; 
&lt;span class=&quot;token hvariable&quot;&gt;esLecturaObligatoria&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eragon&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;eldest&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;brisignr&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;legado&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;fundacion&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;
	&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;otherwise&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hacerlo de esta forma es un 2️⃣ automático en el parcial, un desaprobado. Es un &lt;strong&gt;mal uso de booleanos&lt;/strong&gt; y una &lt;strong&gt;muy muy mala práctica&lt;/strong&gt; de programación. Dicho esto, quien avisa no traiciona… 👀&lt;/p&gt;
&lt;p&gt;¡Sigamos! Es el turno de &lt;code class=&quot;language-text&quot;&gt;esFantasiosa&lt;/code&gt;. Comencemos con su tipo, así que como recibe un parámetro, ponemos una flechita:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sabemos que devuelve un booleano, por lo tanto:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y sabemos que toma una biblioteca:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tadáaa 🎉, tenemos el tipo de nuestra función. Ahora definámosla:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDeChristopherPaolini&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDeNeilGaiman&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esDeChristopherPaolini&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeChristopherPaolini&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Christopher Paolini&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esDeNeilGaiman&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeNeilGaiman&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Neil Gaiman&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mmmm, un momento ✋. Algo está oliendo mal 🤢… ¡a repetición de lógica! 🤮 Mirá estas tres funciones:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esDeStephenKing&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeStephenKing&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esDeChristopherPaolini&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeChristopherPaolini&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Christopher Paolini&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esDeNeilGaiman&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDeNeilGaiman&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Neil Gaiman&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Son prácticamente iguales 😱. En todas se &lt;strong&gt;repite la lógica&lt;/strong&gt; de obtener el autor de un libro para fijarnos si es un autor en especial 😵. Para solucionar esto, vamos a crear una función que tenga sólo la lógica repetida, parametrizando lo único que cambia (que en este caso son los nombres de los autores):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nuestra solución ahora quedaría así:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Christopher Paolini&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Neil Gaiman&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hagamos una observación 🔍 a estas soluciones:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Christopher Paolini&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Neil Gaiman&quot;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroFantasioso&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt;&apos; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esFantasiosa&lt;/span&gt;&apos; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Christopher Paolini&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;esDe&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Neil Gaiman&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Las funciones &lt;code class=&quot;language-text&quot;&gt;esFantasiosa&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;esFantasiosa&amp;#39;&lt;/code&gt; hacen exactamente lo mismo. Es lo mismo hacer &lt;code class=&quot;language-text&quot;&gt;any (condicion1 || condicion2) lista&lt;/code&gt; que &lt;code class=&quot;language-text&quot;&gt;any condicion1 lista || any condicion2 lista&lt;/code&gt;. Siempre vamos a preferir la primer solución ya que es más declarativa.
Lo mismo ocurre tambien con &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(map funcion1.map funcion2) lista&lt;/code&gt; es lo mismo que &lt;code class=&quot;language-text&quot;&gt;map (funcion1.funcion2) lista&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;(filter condicion1.filter condicion2) lista&lt;/code&gt; es lo mismo que &lt;code class=&quot;language-text&quot;&gt;filter (condicion1 &amp;amp;&amp;amp; condicion2) lista&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sigamos con &lt;code class=&quot;language-text&quot;&gt;nombreDeLaBiblioteca&lt;/code&gt;. Acá es cuando nos damos cuenta que, por no leer el enunciado completo antes de empezar, la forma en que modelamos al &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt; no nos alcanza para implementar nuestra solución 🥴. Nos estaría faltando agregar a la tupla el elemento que hace referencia el título del libro. Por suerte hicimos el TP de tal forma que, en el caso de que esto llegara a pasar (¡y pasó! 😱), no fuese complicado hacer estos cambios 😌.
Para solucionar esto vamos a agregar el título a cada libro y, como creamos el alias &lt;code class=&quot;language-text&quot;&gt;Libro&lt;/code&gt;, vamos a tener que modificar el tipo sólo en ese lugar y no en cada libro (ni en la saga ni en la biblioteca):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Autor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;elVisitante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;El Visitante&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Stephen King&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;592&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;shingekiNoKyojin1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Shingeki no Kyojin 1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hajime Isayama&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¡No hay que olvidarse de modificar los accessors! (Y crear el nuevo):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unasPaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unasPaginas&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;autor&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unAutor&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Te imaginás si en vez de usar nuestros propios accessors hubiésemos usado &lt;code class=&quot;language-text&quot;&gt;fst&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;snd&lt;/code&gt;? ¡Hubiese sido un lío tener que modificar todo 😭! Pero como usamos las herramientas que nos da el lenguaje y el paradigma, ¡no fue difícil ni estresante hacer ese cambio! 🙌 &lt;/p&gt;
&lt;p&gt;Entonces, &lt;code class=&quot;language-text&quot;&gt;nombreDeLaBiblioteca&lt;/code&gt; va a quedar así:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;nombreDeLaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;nombreDeLaBiblioteca&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;sacarVocales&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;nombreDeLaBibliotecaConVocales&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;sacarVocales&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;sacarVocales&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esConsonante&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unTitulo&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esConsonante&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esConsonante&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unCaracter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;not&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unCaracter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;aeiouAEIOU&quot;&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;nombreDeLaBibliotecaConVocales&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;nombreDeLaBibliotecaConVocales&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;concatMap&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;titulo&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recordá que como un &lt;code class=&quot;language-text&quot;&gt;String&lt;/code&gt; es una &lt;code class=&quot;language-text&quot;&gt;[Char]&lt;/code&gt; es lo mismo “aeiouAEIOU” que [‘a’, ‘e’, ‘i’, ‘o’, ‘u’, ‘A’, ‘E’, ‘I’, ‘O’ , ‘U’] y es una forma mucho más fácil de escribirlo 😅. Si te quedó la duda de por qué repetimos las vocales en minúscula y mayúscula, es para que matchee de las dos formas. 😄&lt;/p&gt;
&lt;p&gt;¡Llegamos a la última función! La que nos dice si una biblioteca es ligera:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;esBibliotecaLigera&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Biblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esBibliotecaLigera&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;esLibroLigero&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaBiblioteca&lt;/span&gt;

&lt;span class=&quot;token hvariable&quot;&gt;esLibroLigero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Libro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;token hvariable&quot;&gt;esLibroLigero&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt; . &lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;cantidadDePaginas&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unLibro&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y de esa forma completamos el TP usando las herramientas que aprendiste hasta ahora. 👏&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/julian-berbel/ac5d66c1a96487db6a6d1d397cab7963&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Solución del TP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1MpsHO26ETM2_ihiXG3B-yQwmSF_xkKUx/view&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Video de la clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ymCuneefgKU&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Uso de paréntesis en Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iWPWbPuEEQ0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Inferencia de tipos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Tercera clase]]></title><description><![CDATA[Tarea para la clase que viene: ¡No hay! 🤪 ¿Qué vimos hoy? Hicimos el TP Hora de Lectura para repasar los temas de Mumuki para esta clase…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-03/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-03/</guid><pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;p&gt;¡No hay! 🤪&lt;/p&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Hicimos el &lt;a href=&quot;https://docs.google.com/document/d/11uYGXvG-TnNhveawDjKD1iSWKW9Qy8PVqlvtHhV58F8/edit#heading=h.poq6zqz17xui&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP Hora de Lectura&lt;/a&gt; para repasar los temas de Mumuki para esta clase.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/aplicacion-parcial.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Aplicación parcial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/orden-superior.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Orden superior&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/pattern-matching-en-haskell.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Segunda clase]]></title><description><![CDATA[Tarea para la clase que viene: Hacer las lecciones Aplicación Parcial y Orden Superior, Práctica Aplicación Parcial y Orden Superior…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-02/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-02/</guid><pubDate>Mon, 13 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;p&gt;Hacer las lecciones Aplicación Parcial y Orden Superior, Práctica Aplicación Parcial y Orden Superior, Alternativas: Guardas y Patrones, Listas y Práctica Listas de &lt;a href=&quot;https://mumuki.io/pdep-utn&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Mumuki&lt;/a&gt;. En clase contestaremos las dudas que te hayan surgido al hacer el contenido.&lt;/p&gt;
&lt;h2 id=&quot;¿qué-vimos-hoy&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-vimos-hoy&quot; aria-label=&quot;¿qué vimos hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué vimos hoy?&lt;/h2&gt;
&lt;p&gt;Hicimos el &lt;a href=&quot;https://docs.google.com/document/d/14FdoEE4n2tgCSyK05P3kHryxQobbg1iwXgOIKjvPnjs/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;TP PdeP-Commerce&lt;/a&gt; para repasar los temas de Mumuki para esta clase.&lt;/p&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/tipos-de-haskell.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Tipos en Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/inferencia-de-tipos.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Inferencia de tipos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Primera clase]]></title><description><![CDATA[Tarea para la clase que viene: Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este instructivo.
Hacer las lecciones 1, 2, 3 y 4 de…]]></description><link>https://pdep-lunes.github.io/bitacora/funcional/clase-01/</link><guid isPermaLink="false">https://pdep-lunes.github.io/bitacora/funcional/clase-01/</guid><pubDate>Mon, 06 Apr 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;tarea-para-la-clase-que-viene&quot;&gt;&lt;a href=&quot;#tarea-para-la-clase-que-viene&quot; aria-label=&quot;tarea para la clase que viene permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tarea para la clase que viene:&lt;/h2&gt;
&lt;p&gt;Crearse una cuenta en GitHub y en Mumuki. Para eso, lee este &lt;a href=&quot;https://docs.google.com/document/d/1qGLqYENZ9WYgRRh_Cbn3fczQd0jMSG1nLD_dDd8jWt4/edit&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;instructivo&lt;/a&gt;.
Hacer las lecciones 1, 2, 3 y 4 de &lt;a href=&quot;https://mumuki.io/pdep-utn&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Mumuki&lt;/a&gt;. En clase contestaremos las dudas que te hayan surgido al hacer el contenido.&lt;/p&gt;
&lt;h2 id=&quot;primero-un-poco-de-burocracia&quot;&gt;&lt;a href=&quot;#primero-un-poco-de-burocracia&quot; aria-label=&quot;primero un poco de burocracia permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Primero un poco de burocracia…&lt;/h2&gt;
&lt;p&gt;Dadas las circunstancias actuales debido a la pandemia 👑🦠, esta cursada será, en principio, virtual. Nuestro medio de comunicación será &lt;a href=&quot;https://discordapp.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;discord&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;La materia tiene 3️⃣ parciales.  &lt;/p&gt;
&lt;p&gt;¿Cómo los promociono?
8 o más en los 3 parciales (con la posibilidad de recuperar 1 si te sacaste menos de 8).
TPs aprobados.&lt;/p&gt;
&lt;p&gt;¿Cómo simplemente los apruebo?
6 o más en los 3 parciales (hay 2 recuperatorios por cada parcial).
TPs aprobados.&lt;/p&gt;
&lt;p&gt;¿Cuándo y cómo van a ser? Todavía no sabemos. ¡Paciencia! 🙏&lt;/p&gt;
&lt;h2 id=&quot;los-temas-de-hoy&quot;&gt;&lt;a href=&quot;#los-temas-de-hoy&quot; aria-label=&quot;los temas de hoy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Los temas de hoy&lt;/h2&gt;
&lt;p&gt;¿Qué es un paradigma de programación?
Expresividad y declaratividad
Paradigma funcional&lt;/p&gt;
&lt;h2 id=&quot;¿qué-es-un-paradigma-de-programación&quot;&gt;&lt;a href=&quot;#%C2%BFqu%C3%A9-es-un-paradigma-de-programaci%C3%B3n&quot; aria-label=&quot;¿qué es un paradigma de programación permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;¿Qué es un paradigma de programación?&lt;/h2&gt;
&lt;p&gt;Un paradigma es una forma en especial de pensar la solución a un problema, en este caso, un problema de programación 👩‍💻👨‍💻. Para ello, vamos a necesitar herramientas 🔧 y conceptos 📖 que cambiarán de paradigma en paradigma. &lt;/p&gt;
&lt;p&gt;Los que veremos en la cursada serán los paradigmas &lt;strong&gt;funcional&lt;/strong&gt;, &lt;strong&gt;lógico&lt;/strong&gt; y &lt;strong&gt;de objetos&lt;/strong&gt; 😮. ¡Empecemos!&lt;/p&gt;
&lt;h2 id=&quot;expresividad-y-declaratividad&quot;&gt;&lt;a href=&quot;#expresividad-y-declaratividad&quot; aria-label=&quot;expresividad y declaratividad permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Expresividad y declaratividad&lt;/h2&gt;
&lt;p&gt;Dos conceptos muy pero muy importantes que nos van a acompañar tooodoo este año. Son transversales a los 3 paradigmas.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;expresividad&lt;/strong&gt; viene de la mano de cuán &lt;em&gt;entendible&lt;/em&gt; es nuestro código. De cómo nombramos a las variables, funciones, métodos… Tiene que estar escrito de tal forma de que lo entiendas vos, tu colega o alguien que no sepa programación tanto hoy como dentro de unos años. &lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;declaratividad&lt;/strong&gt; tiene que ver con ocultar los detalles algorítmicos de nuestro código. Enfocarnos en el &lt;em&gt;qué y no en el cómo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Estos dos conceptos son complementarios y vamos a buscar que nuestras soluciones sean lo más declarativas y expresivas que podamos. No existe EL código expresivo y declarativo, sino que existen códigos más declarativos y expresivos que otros. &lt;/p&gt;
&lt;p&gt;¡Veamos unos ejemplos!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Solución A&lt;/span&gt;
​
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; b&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      a&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
​
&lt;span class=&quot;token comment&quot;&gt;// Solución B&lt;/span&gt;
​
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cantidadDeNumerosPares&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; unosNumeros&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cantidadDePares &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; indice &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; indice&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unosNumeros&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;indice&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      cantidadDePares&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cantidadDePares&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
​
&lt;span class=&quot;token comment&quot;&gt;// Solución C&lt;/span&gt;
​
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cantidadDeNumerosPares&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; unosNumeros&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cantidadDePares &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; indice &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; indice&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;esNumeroPar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unosNumeros&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;indice&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      cantidadDePares&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cantidadDePares&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dadas esas soluciones, ¡comparémoslas!&lt;/p&gt;
&lt;p&gt;La solución A es menos expresiva que las otras dos, pero igual de declarativa que la B, aunque menos declarativa que la C.
La solución B es más expresiva que la A, e igual que la C, pero menos declarativa que la C, aunque igual de declarativa que la A.
La solución C es la más expresiva junto con la B y es la más declarativa.&lt;/p&gt;
&lt;p&gt;No te asustes si no pudiste darte cuenta tan fácilmente qué solución era más expresiva o declarativa que la otra 😨. Es una habilidad que se va adquiriendo con la experiencia, así que ¡a hacer muchos ejercicios! 💪💻&lt;/p&gt;
&lt;h2 id=&quot;paradigma-funcional&quot;&gt;&lt;a href=&quot;#paradigma-funcional&quot; aria-label=&quot;paradigma funcional permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Paradigma funcional&lt;/h2&gt;
&lt;p&gt;Es el paradigma con el vamos a arrancar. Y trata sobre… ¡adivinaste! Funciones 😝. Y acá es donde hacemos esa gran pregunta tan temida en Análisis Matemático: ¿qué es una función? 😅 Es la relación entre un dominio e imagen, en donde, para una entrada tenemos una salida (existencia) y esa salida es única (unicidad). Esta misma norma se va a cumplir para las &lt;em&gt;funciones&lt;/em&gt; que creemos en &lt;code class=&quot;language-text&quot;&gt;Haskell&lt;/code&gt;, el lenguaje correspondiente a este paradigma.&lt;/p&gt;
&lt;p&gt;⚠️ Antes de seguir, vamos a dejar algo en claro: &lt;strong&gt;nunca pero nunca vamos a usar un &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt;para devolver un &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt; o un &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;.&lt;/strong&gt; Es una muy mala práctica de programación y quien la haga en un parcial tendrá un 2 🦆.
❌ El código que &lt;strong&gt;no&lt;/strong&gt; hay que hacer sería:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;esMayorDeEdad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;unaEdad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unaEdad &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;✔️ Lo correcto sería:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;esMayorDeEdad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;unaEdad&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; unaEdad &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dicho esto, adentrémonos en Haskell. Estos son los ejemplos de funciones y valores que vimos en clase:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;triple&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
​
&lt;span class=&quot;token hvariable&quot;&gt;esMayorDeEdad&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaEdad&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaEdad&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;
​
&lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
​
&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
​
&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;De esa forma le pusimos un alias o etiqueta al valor 80 con &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; y creamos funciones como &lt;code class=&quot;language-text&quot;&gt;triple&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;esMayorDeEdad&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; y &lt;code class=&quot;language-text&quot;&gt;tieneTaquicardia&lt;/code&gt;.
Las funciones van a ser nuestras herramientas para poder operar a los valores.&lt;/p&gt;
&lt;p&gt;Algo muy importante es que en Haskell &lt;strong&gt;no hay efecto&lt;/strong&gt;. Esto quiere decir que los valores igualados no van a mutar luego de ser operados por las funciones. Este concepto se llama &lt;strong&gt;inmutabilidad&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si aplicamos &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; a la &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt;, podemos ver que &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; no cambia su valor:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;130&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;frecuenciaCardiacaPromedio&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Por esto, es que en Haskell logramos tener lo que se llama &lt;strong&gt;transparencia referencial&lt;/strong&gt;. 🤯
Es importante recordar que &lt;code class=&quot;language-text&quot;&gt;frecuenciaCardiacaPromedio&lt;/code&gt; no es una variable, sino que es simplemente un alias, es decir, otra manera de decirle al valor 80.&lt;/p&gt;
&lt;p&gt;Ahora supongamos que queremos ver si tenemos taquicardia después de hacer actividad física. ¿Cómo lo resolvemos? 😱 Usando &lt;strong&gt;composición&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;¿Qué lo qué está pasando? 😱 Lo mismo que con la composición de funciones matemáticas ( FoG(x) ) 🤓. Primero se aplica la función de la derecha con el valor y luego se aplica la de la izquierda con el valor que nos devolvió la función anterior.&lt;/p&gt;
&lt;p&gt;Recordemos que, como en matemática, el valor que retorne la función de la derecha, tiene que ser un valor que la función de la izquierda pueda operar. Es decir, que la imágen de la función de la derecha esté incluída en el dominio de la función de la izquierda.&lt;/p&gt;
&lt;p&gt;Si quisiéramos componerlo al revés:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Va a romper 💥 ya que &lt;code class=&quot;language-text&quot;&gt;hacerActividadFisica&lt;/code&gt; tiene que recibir un número, y está recibiendo un booleano.&lt;/p&gt;
&lt;p&gt;Y ya que estamos, démosle un nombre a la acción de preguntar si se tiene taquicardia luego de hacer una actividad física. Lo haremos creando una nueva función llamada &lt;code class=&quot;language-text&quot;&gt;tieneTaquicardiaDespuesDeEntrenar&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;haskell&quot;&gt;&lt;pre class=&quot;language-haskell&quot;&gt;&lt;code class=&quot;language-haskell&quot;&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardiaDespuesDeEntrenar&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;tieneTaquicardia&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token hvariable&quot;&gt;hacerActividadFisica&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token hvariable&quot;&gt;unaFrecuencia&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Y entonces, lo que nos queda después de componer dos funciones es… ¡una nueva función! 😮&lt;/p&gt;
&lt;p&gt;Que no exista el estado en Haskell, hace que la composición tenga más relevancia.
Ya que como no podemos pisar valores con variables, la composición nos permite encadenar las funciones para trabajar con diferentes valores y así poder crear soluciones más complejas. ✨&lt;/p&gt;
&lt;p&gt;Otro tema que vimos ya al final de la clase, en el canal de discord fue el de &lt;strong&gt;precedencia de operadores&lt;/strong&gt;.
En matemática, cuando tenemos una expresión como 2 * 3 + 4, solemos operarla dependiendo de la precedencia de cada operador. Como el * es de mayor precedencia que el +, operamos primero 2 * 3 y luego le sumamos 4.&lt;/p&gt;
&lt;p&gt;En Haskell también se respeta esto. Les dejamos una tabla para que puedan ver la precedencia que utiliza Haskell:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Precedencia (Mayor numero, mayor precedencia)&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;“Operador”&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Aplicacion Normal de una Funcion&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;*,/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;+,-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;==, /=, &amp;#x3C;, &amp;#x3C;=, &gt;, &gt;=&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&amp;#x26;&amp;#x26;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;$&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;links-útiles&quot;&gt;&lt;a href=&quot;#links-%C3%BAtiles&quot; aria-label=&quot;links útiles permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Links Útiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/concepto-de-funcion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Concepto de función&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wiki.uqbar.org/wiki/articles/composicion.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Composición&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>